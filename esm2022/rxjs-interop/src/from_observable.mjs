/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { assertInInjectionContext, computed, DestroyRef, inject, signal } from '@angular/core';
export function fromObservable(source, initialValue) {
    assertInInjectionContext(fromObservable);
    // Note: T is the Observable value type, and U is the initial value type. They don't have to be
    // the same - the returned signal gives values of type `T`.
    let state;
    if (initialValue === undefined && arguments.length !== 2) {
        // No initial value was passed, so initially the signal is in a `NoValue` state and will throw
        // if accessed.
        state = signal({ kind: 0 /* StateKind.NoValue */ });
    }
    else {
        // An initial value was passed, so use it.
        state = signal({ kind: 1 /* StateKind.Value */, value: initialValue });
    }
    const sub = source.subscribe({
        next: value => state.set({ kind: 1 /* StateKind.Value */, value }),
        error: error => state.set({ kind: 2 /* StateKind.Error */, error }),
        // Completion of the Observable is meaningless to the signal. Signals don't have a concept of
        // "complete".
    });
    // Unsubscribe when the current context is destroyed.
    inject(DestroyRef).onDestroy(sub.unsubscribe.bind(sub));
    // The actual returned signal is a `computed` of the `State` signal, which maps the various states
    // to either values or errors.
    return computed(() => {
        const current = state();
        switch (current.kind) {
            case 1 /* StateKind.Value */:
                return current.value;
            case 2 /* StateKind.Error */:
                throw current.error;
            case 0 /* StateKind.NoValue */:
                // TODO(alxhub): use a RuntimeError when we finalize the error semantics
                throw new Error(`fromObservable() signal read before the Observable emitted`);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,