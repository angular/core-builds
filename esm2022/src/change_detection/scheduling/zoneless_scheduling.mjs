/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { InjectionToken } from '../../di/injection_token';
/**
 * Injectable that is notified when an `LView` is made aware of changes to application state.
 */
export class ChangeDetectionScheduler {
}
/** Token used to indicate if zoneless was enabled via provideZonelessChangeDetection(). */
export const ZONELESS_ENABLED = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Zoneless enabled' : '', { providedIn: 'root', factory: () => false });
/** Token used to indicate `provideExperimentalZonelessChangeDetection` was used. */
export const PROVIDED_ZONELESS = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Zoneless provided' : '', { providedIn: 'root', factory: () => false });
export const ZONELESS_SCHEDULER_DISABLED = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'scheduler disabled' : '');
// TODO(atscott): Remove in v19. Scheduler should be done with runOutsideAngular.
export const SCHEDULE_IN_ROOT_ZONE = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'run changes outside zone in root' : '');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9uZWxlc3Nfc2NoZWR1bGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2NoYW5nZV9kZXRlY3Rpb24vc2NoZWR1bGluZy96b25lbGVzc19zY2hlZHVsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQXdDeEQ7O0dBRUc7QUFDSCxNQUFNLE9BQWdCLHdCQUF3QjtDQUc3QztBQUVELDJGQUEyRjtBQUMzRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FDaEQsT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFDdkUsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUMsQ0FDM0MsQ0FBQztBQUVGLG9GQUFvRjtBQUNwRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FDakQsT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFDeEUsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUMsQ0FDM0MsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLElBQUksY0FBYyxDQUMzRCxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUMxRSxDQUFDO0FBRUYsaUZBQWlGO0FBQ2pGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUNyRCxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUN4RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJy4uLy4uL2RpL2luamVjdGlvbl90b2tlbic7XG5cbmV4cG9ydCBjb25zdCBlbnVtIE5vdGlmaWNhdGlvblNvdXJjZSB7XG4gIC8vIENoYW5nZSBkZXRlY3Rpb24gbmVlZHMgdG8gcnVuIGluIG9yZGVyIHRvIHN5bmNocm9uaXplIGFwcGxpY2F0aW9uIHN0YXRlXG4gIC8vIHdpdGggdGhlIERPTSB3aGVuIHRoZSBmb2xsb3dpbmcgbm90aWZpY2F0aW9ucyBhcmUgcmVjZWl2ZWQ6XG4gIC8vIFRoaXMgb3BlcmF0aW9uIGluZGljYXRlcyB0aGF0IGEgc3VidHJlZSBuZWVkcyB0byBiZSB0cmF2ZXJzZWQgZHVyaW5nIGNoYW5nZSBkZXRlY3Rpb24uXG4gIE1hcmtBbmNlc3RvcnNGb3JUcmF2ZXJzYWwsXG4gIC8vIEEgY29tcG9uZW50L2RpcmVjdGl2ZSBnZXRzIGEgbmV3IGlucHV0LlxuICBTZXRJbnB1dCxcbiAgLy8gRGVmZXIgYmxvY2sgc3RhdGUgdXBkYXRlcyBuZWVkIGNoYW5nZSBkZXRlY3Rpb24gdG8gZnVsbHkgcmVuZGVyIHRoZSBzdGF0ZS5cbiAgRGVmZXJCbG9ja1N0YXRlVXBkYXRlLFxuICAvLyBEZWJ1Z2dpbmcgdG9vbHMgdXBkYXRlZCBzdGF0ZSBhbmQgaGF2ZSByZXF1ZXN0ZWQgY2hhbmdlIGRldGVjdGlvbi5cbiAgRGVidWdBcHBseUNoYW5nZXMsXG4gIC8vIENoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjayBpbmRpY2F0ZXMgdGhlIGNvbXBvbmVudCBpcyBkaXJ0eS9uZWVkcyB0byByZWZyZXNoLlxuICBNYXJrRm9yQ2hlY2ssXG5cbiAgLy8gQm91bmQgbGlzdGVuZXIgY2FsbGJhY2tzIGV4ZWN1dGUgYW5kIGNhbiB1cGRhdGUgc3RhdGUgd2l0aG91dCBjYXVzaW5nIG90aGVyIG5vdGlmaWNhdGlvbnMgZnJvbVxuICAvLyBhYm92ZS5cbiAgTGlzdGVuZXIsXG5cbiAgLy8gVGhlIGZvbGxvd2luZyBub3RpZmljYXRpb25zIGRvIG5vdCByZXF1aXJlIHZpZXdzIHRvIGJlIHJlZnJlc2hlZFxuICAvLyBidXQgd2Ugc2hvdWxkIGV4ZWN1dGUgcmVuZGVyIGhvb2tzOlxuICAvLyBSZW5kZXIgaG9va3MgYXJlIGd1YXJhbnRlZWQgdG8gZXhlY3V0ZSB3aXRoIHRoZSBzY2hlZHVsZXJzIHRpbWluZy5cbiAgUmVuZGVySG9vayxcbiAgRGVmZXJyZWRSZW5kZXJIb29rLFxuICAvLyBWaWV3cyBtaWdodCBiZSBjcmVhdGVkIG91dHNpZGUgYW5kIG1hbmlwdWxhdGVkIGluIHdheXMgdGhhdFxuICAvLyB3ZSBjYW5ub3QgYmUgYXdhcmUgb2YuIFdoZW4gYSB2aWV3IGlzIGF0dGFjaGVkLCBBbmd1bGFyIG5vdyBcImtub3dzXCJcbiAgLy8gYWJvdXQgaXQgYW5kIHdlIG5vdyBrbm93IHRoYXQgRE9NIG1pZ2h0IGhhdmUgY2hhbmdlZCAoYW5kIHdlIHNob3VsZFxuICAvLyBydW4gcmVuZGVyIGhvb2tzKS4gSWYgdGhlIGF0dGFjaGVkIHZpZXcgaXMgZGlydHksIHRoZSBgTWFya0FuY2VzdG9yc0ZvclRyYXZlcnNhbGBcbiAgLy8gbm90aWZpY2F0aW9uIHNob3VsZCBhbHNvIGJlIHJlY2VpdmVkLlxuICBWaWV3QXR0YWNoZWQsXG4gIC8vIFdoZW4gRE9NIHJlbW92YWwgaGFwcGVucywgcmVuZGVyIGhvb2tzIG1heSBiZSBpbnRlcmVzdGVkIGluIHRoZSBuZXdcbiAgLy8gRE9NIHN0YXRlIGJ1dCB3ZSBkbyBub3QgbmVlZCB0byByZWZyZXNoIGFueSB2aWV3cyB1bmxlc3MuIElmIGNoYW5nZVxuICAvLyBkZXRlY3Rpb24gaXMgcmVxdWlyZWQgYWZ0ZXIgRE9NIHJlbW92YWwsIGFub3RoZXIgbm90aWZpY2F0aW9uIHNob3VsZFxuICAvLyBiZSByZWNlaXZlZCAoaS5lLiBgbWFya0ZvckNoZWNrYCkuXG4gIFZpZXdEZXRhY2hlZEZyb21ET00sXG4gIC8vIEFwcGx5aW5nIGFuaW1hdGlvbnMgbWlnaHQgcmVzdWx0IGluIG5ldyBET00gc3RhdGUgYW5kIHNob3VsZCByZXJ1biByZW5kZXIgaG9va3NcbiAgQXN5bmNBbmltYXRpb25zTG9hZGVkLFxufVxuXG4vKipcbiAqIEluamVjdGFibGUgdGhhdCBpcyBub3RpZmllZCB3aGVuIGFuIGBMVmlld2AgaXMgbWFkZSBhd2FyZSBvZiBjaGFuZ2VzIHRvIGFwcGxpY2F0aW9uIHN0YXRlLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2hhbmdlRGV0ZWN0aW9uU2NoZWR1bGVyIHtcbiAgYWJzdHJhY3Qgbm90aWZ5KHNvdXJjZTogTm90aWZpY2F0aW9uU291cmNlKTogdm9pZDtcbiAgYWJzdHJhY3QgcnVubmluZ1RpY2s6IGJvb2xlYW47XG59XG5cbi8qKiBUb2tlbiB1c2VkIHRvIGluZGljYXRlIGlmIHpvbmVsZXNzIHdhcyBlbmFibGVkIHZpYSBwcm92aWRlWm9uZWxlc3NDaGFuZ2VEZXRlY3Rpb24oKS4gKi9cbmV4cG9ydCBjb25zdCBaT05FTEVTU19FTkFCTEVEID0gbmV3IEluamVjdGlvblRva2VuPGJvb2xlYW4+KFxuICB0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUgPyAnWm9uZWxlc3MgZW5hYmxlZCcgOiAnJyxcbiAge3Byb3ZpZGVkSW46ICdyb290JywgZmFjdG9yeTogKCkgPT4gZmFsc2V9LFxuKTtcblxuLyoqIFRva2VuIHVzZWQgdG8gaW5kaWNhdGUgYHByb3ZpZGVFeHBlcmltZW50YWxab25lbGVzc0NoYW5nZURldGVjdGlvbmAgd2FzIHVzZWQuICovXG5leHBvcnQgY29uc3QgUFJPVklERURfWk9ORUxFU1MgPSBuZXcgSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj4oXG4gIHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSA/ICdab25lbGVzcyBwcm92aWRlZCcgOiAnJyxcbiAge3Byb3ZpZGVkSW46ICdyb290JywgZmFjdG9yeTogKCkgPT4gZmFsc2V9LFxuKTtcblxuZXhwb3J0IGNvbnN0IFpPTkVMRVNTX1NDSEVEVUxFUl9ESVNBQkxFRCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxib29sZWFuPihcbiAgdHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlID8gJ3NjaGVkdWxlciBkaXNhYmxlZCcgOiAnJyxcbik7XG5cbi8vIFRPRE8oYXRzY290dCk6IFJlbW92ZSBpbiB2MTkuIFNjaGVkdWxlciBzaG91bGQgYmUgZG9uZSB3aXRoIHJ1bk91dHNpZGVBbmd1bGFyLlxuZXhwb3J0IGNvbnN0IFNDSEVEVUxFX0lOX1JPT1RfWk9ORSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxib29sZWFuPihcbiAgdHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlID8gJ3J1biBjaGFuZ2VzIG91dHNpZGUgem9uZSBpbiByb290JyA6ICcnLFxuKTtcbiJdfQ==