/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { producerAccessed, SIGNAL } from '@angular/core/primitives/signals';
import { RuntimeError } from '../errors';
import { INPUT_SIGNAL_NODE, REQUIRED_UNSET_VALUE } from './input_signal_node';
export const ɵINPUT_SIGNAL_BRAND_READ_TYPE = /* @__PURE__ */ Symbol();
export const ɵINPUT_SIGNAL_BRAND_WRITE_TYPE = /* @__PURE__ */ Symbol();
/**
 * Creates an input signal.
 *
 * @param initialValue The initial value.
 *   Can be set to {@link REQUIRED_UNSET_VALUE} for required inputs.
 * @param options Additional options for the input. e.g. a transform, or an alias.
 */
export function createInputSignal(initialValue, options) {
    const node = Object.create(INPUT_SIGNAL_NODE);
    node.value = initialValue;
    // Perf note: Always set `transformFn` here to ensure that `node` always
    // has the same v8 class shape, allowing monomorphic reads on input signals.
    node.transformFn = options?.transform;
    function inputValueFn() {
        // Record that someone looked at this signal.
        producerAccessed(node);
        if (node.value === REQUIRED_UNSET_VALUE) {
            throw new RuntimeError(-950 /* RuntimeErrorCode.REQUIRED_INPUT_NO_VALUE */, ngDevMode && 'Input is required but no value is available yet.');
        }
        return node.value;
    }
    inputValueFn[SIGNAL] = node;
    return inputValueFn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRfc2lnbmFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvYXV0aG9yaW5nL2lucHV0X3NpZ25hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsTUFBTSxFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFFMUUsT0FBTyxFQUFDLFlBQVksRUFBbUIsTUFBTSxXQUFXLENBQUM7QUFHekQsT0FBTyxFQUFDLGlCQUFpQixFQUFtQixvQkFBb0IsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBdUM3RixNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDdEUsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBNkN2RTs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQzdCLFlBQW1CLEVBQ25CLE9BQXFDO0lBQ3ZDLE1BQU0sSUFBSSxHQUFtQyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFOUUsSUFBSSxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUM7SUFFMUIsd0VBQXdFO0lBQ3hFLDRFQUE0RTtJQUM1RSxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sRUFBRSxTQUFTLENBQUM7SUFFdEMsU0FBUyxZQUFZO1FBQ25CLDZDQUE2QztRQUM3QyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QixJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssb0JBQW9CLEVBQUUsQ0FBQztZQUN4QyxNQUFNLElBQUksWUFBWSxzREFFbEIsU0FBUyxJQUFJLGtEQUFrRCxDQUFDLENBQUM7UUFDdkUsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUEsWUFBb0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDckMsT0FBTyxZQUF1RCxDQUFDO0FBQ2pFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtwcm9kdWNlckFjY2Vzc2VkLCBTSUdOQUx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcHJpbWl0aXZlcy9zaWduYWxzJztcblxuaW1wb3J0IHtSdW50aW1lRXJyb3IsIFJ1bnRpbWVFcnJvckNvZGV9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQge1NpZ25hbH0gZnJvbSAnLi4vcmVuZGVyMy9yZWFjdGl2aXR5L2FwaSc7XG5cbmltcG9ydCB7SU5QVVRfU0lHTkFMX05PREUsIElucHV0U2lnbmFsTm9kZSwgUkVRVUlSRURfVU5TRVRfVkFMVUV9IGZyb20gJy4vaW5wdXRfc2lnbmFsX25vZGUnO1xuXG4vKipcbiAqIEBkZXZlbG9wZXJQcmV2aWV3XG4gKlxuICogT3B0aW9ucyBmb3Igc2lnbmFsIGlucHV0cy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbnB1dE9wdGlvbnM8UmVhZFQsIFdyaXRlVD4ge1xuICAvKiogT3B0aW9uYWwgcHVibGljIG5hbWUgZm9yIHRoZSBpbnB1dC4gQnkgZGVmYXVsdCwgdGhlIGNsYXNzIGZpZWxkIG5hbWUgaXMgdXNlZC4gKi9cbiAgYWxpYXM/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBPcHRpb25hbCB0cmFuc2Zvcm0gdGhhdCBydW5zIHdoZW5ldmVyIGEgbmV3IHZhbHVlIGlzIGJvdW5kLiBDYW4gYmUgdXNlZCB0b1xuICAgKiB0cmFuc2Zvcm0gdGhlIGlucHV0IHZhbHVlIGJlZm9yZSB0aGUgaW5wdXQgaXMgdXBkYXRlZC5cbiAgICpcbiAgICogVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiBjYW4gd2lkZW4gdGhlIHR5cGUgb2YgdGhlIGlucHV0LiBGb3IgZXhhbXBsZSwgY29uc2lkZXJcbiAgICogYW4gaW5wdXQgZm9yIGBkaXNhYmxlZGAuIEluIHByYWN0aWNlLCBhcyB0aGUgY29tcG9uZW50IGF1dGhvciwgeW91IHdhbnQgdG8gb25seVxuICAgKiBkZWFsIHdpdGggYSBib29sZWFuLCBidXQgdXNlcnMgbWF5IHdhbnQgdG8gYmluZCBhIHN0cmluZyBpZiB0aGV5IGp1c3QgdXNlIHRoZVxuICAgKiBhdHRyaWJ1dGUgZm9ybSB0byBiaW5kIHRvIHRoZSBpbnB1dCB2aWEgYDxteS1kaXIgaW5wdXQ+YC4gQSB0cmFuc2Zvcm0gY2FuIHRoZW5cbiAgICogaGFuZGxlIHN1Y2ggc3RyaW5nIHZhbHVlcyBhbmQgY29udmVydCB0aGVtIHRvIGBib29sZWFuYC4gU2VlOiB7QGxpbmsgYm9vbGVhbkF0dHJpYnV0ZX0uXG4gICAqL1xuICB0cmFuc2Zvcm0/OiAodjogV3JpdGVUKSA9PiBSZWFkVDtcbn1cblxuLyoqXG4gKiBTaWduYWwgaW5wdXQgb3B0aW9ucyB3aXRob3V0IHRoZSB0cmFuc2Zvcm0gb3B0aW9uLlxuICpcbiAqIEBkZXZlbG9wZXJQcmV2aWV3XG4gKi9cbmV4cG9ydCB0eXBlIElucHV0T3B0aW9uc1dpdGhvdXRUcmFuc2Zvcm08UmVhZFQ+ID1cbiAgICAvLyBOb3RlOiBXZSBzdGlsbCBrZWVwIGEgbm90aW9uIG9mIGB0cmFuc2Zvcm1gIGZvciBhdXRvLWNvbXBsZXRpb24uXG4gICAgT21pdDxJbnB1dE9wdGlvbnM8UmVhZFQsIFJlYWRUPiwgJ3RyYW5zZm9ybSc+Jnt0cmFuc2Zvcm0/OiB1bmRlZmluZWR9O1xuLyoqXG4gKiBTaWduYWwgaW5wdXQgb3B0aW9ucyB3aXRoIHRoZSB0cmFuc2Zvcm0gb3B0aW9uIHJlcXVpcmVkLlxuICpcbiAqIEBkZXZlbG9wZXJQcmV2aWV3XG4gKi9cbmV4cG9ydCB0eXBlIElucHV0T3B0aW9uc1dpdGhUcmFuc2Zvcm08UmVhZFQsIFdyaXRlVD4gPVxuICAgIFJlcXVpcmVkPFBpY2s8SW5wdXRPcHRpb25zPFJlYWRULCBXcml0ZVQ+LCAndHJhbnNmb3JtJz4+JklucHV0T3B0aW9uczxSZWFkVCwgV3JpdGVUPjtcblxuZXhwb3J0IGNvbnN0IMm1SU5QVVRfU0lHTkFMX0JSQU5EX1JFQURfVFlQRSA9IC8qIEBfX1BVUkVfXyAqLyBTeW1ib2woKTtcbmV4cG9ydCBjb25zdCDJtUlOUFVUX1NJR05BTF9CUkFORF9XUklURV9UWVBFID0gLyogQF9fUFVSRV9fICovIFN5bWJvbCgpO1xuXG4vKipcbiAqIGBJbnB1dFNpZ25hbFdpdGhUcmFuc2Zvcm1gIHJlcHJlc2VudHMgYSBzcGVjaWFsIGBTaWduYWxgIGZvciBhXG4gKiBkaXJlY3RpdmUvY29tcG9uZW50IGlucHV0IHdpdGggYSBgdHJhbnNmb3JtYCBmdW5jdGlvbi5cbiAqXG4gKiBTaWduYWwgaW5wdXRzIHdpdGggdHJhbnNmb3JtcyBjYXB0dXJlIGFuIGV4dHJhIGdlbmVyaWMgZm9yIHRoZWlyIHRyYW5zZm9ybSB3cml0ZVxuICogdHlwZS4gVHJhbnNmb3JtcyBjYW4gZXhwYW5kIHRoZSBhY2NlcHRlZCBib3VuZCB2YWx1ZXMgZm9yIGFuIGlucHV0IHdoaWxlIGVuc3VyaW5nXG4gKiB2YWx1ZSByZXRyaWV2YWxzIG9mIHRoZSBzaWduYWwgaW5wdXQgYXJlIHN0aWxsIG1hdGNoaW5nIHRoZSBnZW5lcmljIGlucHV0IHR5cGUuXG4gKlxuICogYGBgdHNcbiAqIGNsYXNzIE15RGlyIHtcbiAqICAgZGlzYWJsZWQgPSBpbnB1dChmYWxzZSwge1xuICogICAgIHRyYW5zZm9ybTogKHY6IHN0cmluZ3xib29sZWFuKSA9PiBjb252ZXJ0VG9Cb29sZWFuKHYpLFxuICogICB9KTsgLy8gSW5wdXRTaWduYWxXaXRoVHJhbnNmb3JtPGJvb2xlYW4sIHN0cmluZ3xib29sZWFuPlxuICpcbiAqICAgY2xpY2soKSB7XG4gKiAgICAgdGhpcy5kaXNhYmxlZCgpIC8vIGFsd2F5cyByZXR1cm5zIGEgYGJvb2xlYW5gLlxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBJbnB1dFNpZ25hbH0gZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uXG4gKlxuICogQGRldmVsb3BlclByZXZpZXdcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbnB1dFNpZ25hbFdpdGhUcmFuc2Zvcm08UmVhZFQsIFdyaXRlVD4gZXh0ZW5kcyBTaWduYWw8UmVhZFQ+IHtcbiAgW1NJR05BTF06IElucHV0U2lnbmFsTm9kZTxSZWFkVCwgV3JpdGVUPjtcbiAgW8m1SU5QVVRfU0lHTkFMX0JSQU5EX1JFQURfVFlQRV06IFJlYWRUO1xuICBbybVJTlBVVF9TSUdOQUxfQlJBTkRfV1JJVEVfVFlQRV06IFdyaXRlVDtcbn1cblxuLyoqXG4gKiBgSW5wdXRTaWduYWxgIHJlcHJlc2VudHMgYSBzcGVjaWFsIGBTaWduYWxgIGZvciBhIGRpcmVjdGl2ZS9jb21wb25lbnQgaW5wdXQuXG4gKlxuICogQW4gaW5wdXQgc2lnbmFsIGlzIHNpbWlsYXIgdG8gYSBub24td3JpdGFibGUgc2lnbmFsIGV4Y2VwdCB0aGF0IGl0IGFsc29cbiAqIGNhcnJpZXMgYWRkaXRpb25hbCB0eXBlLWluZm9ybWF0aW9uIGZvciB0cmFuc2Zvcm1zLCBhbmQgdGhhdCBBbmd1bGFyIGludGVybmFsbHlcbiAqIHVwZGF0ZXMgdGhlIHNpZ25hbCB3aGVuZXZlciBhIG5ldyB2YWx1ZSBpcyBib3VuZC5cbiAqXG4gKiBAc2VlIHtAbGluayBJbnB1dE9wdGlvbnNXaXRoVHJhbnNmb3JtfSBmb3IgaW5wdXRzIHdpdGggdHJhbnNmb3Jtcy5cbiAqXG4gKiBAZGV2ZWxvcGVyUHJldmlld1xuICovXG5leHBvcnQgaW50ZXJmYWNlIElucHV0U2lnbmFsPFJlYWRUPiBleHRlbmRzIElucHV0U2lnbmFsV2l0aFRyYW5zZm9ybTxSZWFkVCwgUmVhZFQ+IHt9XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnB1dCBzaWduYWwuXG4gKlxuICogQHBhcmFtIGluaXRpYWxWYWx1ZSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAqICAgQ2FuIGJlIHNldCB0byB7QGxpbmsgUkVRVUlSRURfVU5TRVRfVkFMVUV9IGZvciByZXF1aXJlZCBpbnB1dHMuXG4gKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBpbnB1dC4gZS5nLiBhIHRyYW5zZm9ybSwgb3IgYW4gYWxpYXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnB1dFNpZ25hbDxSZWFkVCwgV3JpdGVUPihcbiAgICBpbml0aWFsVmFsdWU6IFJlYWRULFxuICAgIG9wdGlvbnM/OiBJbnB1dE9wdGlvbnM8UmVhZFQsIFdyaXRlVD4pOiBJbnB1dFNpZ25hbFdpdGhUcmFuc2Zvcm08UmVhZFQsIFdyaXRlVD4ge1xuICBjb25zdCBub2RlOiBJbnB1dFNpZ25hbE5vZGU8UmVhZFQsIFdyaXRlVD4gPSBPYmplY3QuY3JlYXRlKElOUFVUX1NJR05BTF9OT0RFKTtcblxuICBub2RlLnZhbHVlID0gaW5pdGlhbFZhbHVlO1xuXG4gIC8vIFBlcmYgbm90ZTogQWx3YXlzIHNldCBgdHJhbnNmb3JtRm5gIGhlcmUgdG8gZW5zdXJlIHRoYXQgYG5vZGVgIGFsd2F5c1xuICAvLyBoYXMgdGhlIHNhbWUgdjggY2xhc3Mgc2hhcGUsIGFsbG93aW5nIG1vbm9tb3JwaGljIHJlYWRzIG9uIGlucHV0IHNpZ25hbHMuXG4gIG5vZGUudHJhbnNmb3JtRm4gPSBvcHRpb25zPy50cmFuc2Zvcm07XG5cbiAgZnVuY3Rpb24gaW5wdXRWYWx1ZUZuKCkge1xuICAgIC8vIFJlY29yZCB0aGF0IHNvbWVvbmUgbG9va2VkIGF0IHRoaXMgc2lnbmFsLlxuICAgIHByb2R1Y2VyQWNjZXNzZWQobm9kZSk7XG5cbiAgICBpZiAobm9kZS52YWx1ZSA9PT0gUkVRVUlSRURfVU5TRVRfVkFMVUUpIHtcbiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoXG4gICAgICAgICAgUnVudGltZUVycm9yQ29kZS5SRVFVSVJFRF9JTlBVVF9OT19WQUxVRSxcbiAgICAgICAgICBuZ0Rldk1vZGUgJiYgJ0lucHV0IGlzIHJlcXVpcmVkIGJ1dCBubyB2YWx1ZSBpcyBhdmFpbGFibGUgeWV0LicpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlLnZhbHVlO1xuICB9XG5cbiAgKGlucHV0VmFsdWVGbiBhcyBhbnkpW1NJR05BTF0gPSBub2RlO1xuICByZXR1cm4gaW5wdXRWYWx1ZUZuIGFzIElucHV0U2lnbmFsV2l0aFRyYW5zZm9ybTxSZWFkVCwgV3JpdGVUPjtcbn1cbiJdfQ==