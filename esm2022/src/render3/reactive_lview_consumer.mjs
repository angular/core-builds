/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { REACTIVE_NODE } from '@angular/core/primitives/signals';
import { markViewDirty } from './instructions/mark_view_dirty';
let currentConsumer = null;
/**
 * Create a new template consumer pointing at the specified LView.
 * Sometimes, a previously created consumer may be reused, in order to save on allocations. In that
 * case, the LView will be updated.
 */
export function getReactiveLViewConsumer(lView, slot) {
    return lView[slot] ?? getOrCreateCurrentLViewConsumer(lView, slot);
}
const REACTIVE_LVIEW_CONSUMER_NODE = {
    ...REACTIVE_NODE,
    consumerIsAlwaysLive: true,
    consumerMarkedDirty: (node) => {
        if (ngDevMode && node.isRunning) {
            console.warn(`Angular detected a signal being set which makes the template for this component dirty` +
                ` while it's being executed, which is not currently supported and will likely result` +
                ` in ExpressionChangedAfterItHasBeenChecked errors or future updates not working` +
                ` entirely.`);
        }
        markViewDirty(node.lView);
    },
    consumerOnSignalRead() {
        if (currentConsumer !== this) {
            return;
        }
        this.lView[this.slot] = currentConsumer;
        currentConsumer = null;
    },
    isRunning: false,
};
function createLViewConsumer() {
    return Object.create(REACTIVE_LVIEW_CONSUMER_NODE);
}
function getOrCreateCurrentLViewConsumer(lView, slot) {
    currentConsumer ??= createLViewConsumer();
    currentConsumer.lView = lView;
    currentConsumer.slot = slot;
    return currentConsumer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3RpdmVfbHZpZXdfY29uc3VtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL3JlYWN0aXZlX2x2aWV3X2NvbnN1bWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxhQUFhLEVBQWUsTUFBTSxrQ0FBa0MsQ0FBQztBQUs3RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFHN0QsSUFBSSxlQUFlLEdBQStCLElBQUksQ0FBQztBQU92RDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLHdCQUF3QixDQUNwQyxLQUFZLEVBQUUsSUFBNkU7SUFFN0YsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksK0JBQStCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3JFLENBQUM7QUFFRCxNQUFNLDRCQUE0QixHQUFnRDtJQUNoRixHQUFHLGFBQWE7SUFDaEIsb0JBQW9CLEVBQUUsSUFBSTtJQUMxQixtQkFBbUIsRUFBRSxDQUFDLElBQTJCLEVBQUUsRUFBRTtRQUNuRCxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQ1IsdUZBQXVGO2dCQUN2RixxRkFBcUY7Z0JBQ3JGLGlGQUFpRjtnQkFDakYsWUFBWSxDQUFDLENBQUM7U0FDbkI7UUFDRCxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFDRCxvQkFBb0I7UUFDbEIsSUFBSSxlQUFlLEtBQUssSUFBSSxFQUFFO1lBQzVCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLGVBQWUsQ0FBQztRQUN4QyxlQUFlLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFDRCxTQUFTLEVBQUUsS0FBSztDQUNqQixDQUFDO0FBRUYsU0FBUyxtQkFBbUI7SUFDMUIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLDRCQUE0QixDQUFDLENBQUM7QUFDckQsQ0FBQztBQUVELFNBQVMsK0JBQStCLENBQ3BDLEtBQVksRUFBRSxJQUE2RTtJQUM3RixlQUFlLEtBQUssbUJBQW1CLEVBQUUsQ0FBQztJQUMxQyxlQUFlLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUM5QixlQUFlLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUM1QixPQUFPLGVBQWUsQ0FBQztBQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7UkVBQ1RJVkVfTk9ERSwgUmVhY3RpdmVOb2RlfSBmcm9tICdAYW5ndWxhci9jb3JlL3ByaW1pdGl2ZXMvc2lnbmFscyc7XG5cbmltcG9ydCB7UnVudGltZUVycm9yfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHthc3NlcnREZWZpbmVkfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5cbmltcG9ydCB7bWFya1ZpZXdEaXJ0eX0gZnJvbSAnLi9pbnN0cnVjdGlvbnMvbWFya192aWV3X2RpcnR5JztcbmltcG9ydCB7TFZpZXcsIFJFQUNUSVZFX0hPU1RfQklORElOR19DT05TVU1FUiwgUkVBQ1RJVkVfVEVNUExBVEVfQ09OU1VNRVJ9IGZyb20gJy4vaW50ZXJmYWNlcy92aWV3JztcblxubGV0IGN1cnJlbnRDb25zdW1lcjogUmVhY3RpdmVMVmlld0NvbnN1bWVyfG51bGwgPSBudWxsO1xuZXhwb3J0IGludGVyZmFjZSBSZWFjdGl2ZUxWaWV3Q29uc3VtZXIgZXh0ZW5kcyBSZWFjdGl2ZU5vZGUge1xuICBsVmlldzogTFZpZXc7XG4gIHNsb3Q6IHR5cGVvZiBSRUFDVElWRV9URU1QTEFURV9DT05TVU1FUnx0eXBlb2YgUkVBQ1RJVkVfSE9TVF9CSU5ESU5HX0NPTlNVTUVSO1xuICBpc1J1bm5pbmc6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHRlbXBsYXRlIGNvbnN1bWVyIHBvaW50aW5nIGF0IHRoZSBzcGVjaWZpZWQgTFZpZXcuXG4gKiBTb21ldGltZXMsIGEgcHJldmlvdXNseSBjcmVhdGVkIGNvbnN1bWVyIG1heSBiZSByZXVzZWQsIGluIG9yZGVyIHRvIHNhdmUgb24gYWxsb2NhdGlvbnMuIEluIHRoYXRcbiAqIGNhc2UsIHRoZSBMVmlldyB3aWxsIGJlIHVwZGF0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWFjdGl2ZUxWaWV3Q29uc3VtZXIoXG4gICAgbFZpZXc6IExWaWV3LCBzbG90OiB0eXBlb2YgUkVBQ1RJVkVfVEVNUExBVEVfQ09OU1VNRVJ8dHlwZW9mIFJFQUNUSVZFX0hPU1RfQklORElOR19DT05TVU1FUik6XG4gICAgUmVhY3RpdmVMVmlld0NvbnN1bWVyIHtcbiAgcmV0dXJuIGxWaWV3W3Nsb3RdID8/IGdldE9yQ3JlYXRlQ3VycmVudExWaWV3Q29uc3VtZXIobFZpZXcsIHNsb3QpO1xufVxuXG5jb25zdCBSRUFDVElWRV9MVklFV19DT05TVU1FUl9OT0RFOiBPbWl0PFJlYWN0aXZlTFZpZXdDb25zdW1lciwgJ2xWaWV3J3wnc2xvdCc+ID0ge1xuICAuLi5SRUFDVElWRV9OT0RFLFxuICBjb25zdW1lcklzQWx3YXlzTGl2ZTogdHJ1ZSxcbiAgY29uc3VtZXJNYXJrZWREaXJ0eTogKG5vZGU6IFJlYWN0aXZlTFZpZXdDb25zdW1lcikgPT4ge1xuICAgIGlmIChuZ0Rldk1vZGUgJiYgbm9kZS5pc1J1bm5pbmcpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgQW5ndWxhciBkZXRlY3RlZCBhIHNpZ25hbCBiZWluZyBzZXQgd2hpY2ggbWFrZXMgdGhlIHRlbXBsYXRlIGZvciB0aGlzIGNvbXBvbmVudCBkaXJ0eWAgK1xuICAgICAgICAgIGAgd2hpbGUgaXQncyBiZWluZyBleGVjdXRlZCwgd2hpY2ggaXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgYW5kIHdpbGwgbGlrZWx5IHJlc3VsdGAgK1xuICAgICAgICAgIGAgaW4gRXhwcmVzc2lvbkNoYW5nZWRBZnRlckl0SGFzQmVlbkNoZWNrZWQgZXJyb3JzIG9yIGZ1dHVyZSB1cGRhdGVzIG5vdCB3b3JraW5nYCArXG4gICAgICAgICAgYCBlbnRpcmVseS5gKTtcbiAgICB9XG4gICAgbWFya1ZpZXdEaXJ0eShub2RlLmxWaWV3KTtcbiAgfSxcbiAgY29uc3VtZXJPblNpZ25hbFJlYWQodGhpczogUmVhY3RpdmVMVmlld0NvbnN1bWVyKTogdm9pZCB7XG4gICAgaWYgKGN1cnJlbnRDb25zdW1lciAhPT0gdGhpcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmxWaWV3W3RoaXMuc2xvdF0gPSBjdXJyZW50Q29uc3VtZXI7XG4gICAgY3VycmVudENvbnN1bWVyID0gbnVsbDtcbiAgfSxcbiAgaXNSdW5uaW5nOiBmYWxzZSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUxWaWV3Q29uc3VtZXIoKTogUmVhY3RpdmVMVmlld0NvbnN1bWVyIHtcbiAgcmV0dXJuIE9iamVjdC5jcmVhdGUoUkVBQ1RJVkVfTFZJRVdfQ09OU1VNRVJfTk9ERSk7XG59XG5cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlQ3VycmVudExWaWV3Q29uc3VtZXIoXG4gICAgbFZpZXc6IExWaWV3LCBzbG90OiB0eXBlb2YgUkVBQ1RJVkVfVEVNUExBVEVfQ09OU1VNRVJ8dHlwZW9mIFJFQUNUSVZFX0hPU1RfQklORElOR19DT05TVU1FUikge1xuICBjdXJyZW50Q29uc3VtZXIgPz89IGNyZWF0ZUxWaWV3Q29uc3VtZXIoKTtcbiAgY3VycmVudENvbnN1bWVyLmxWaWV3ID0gbFZpZXc7XG4gIGN1cnJlbnRDb25zdW1lci5zbG90ID0gc2xvdDtcbiAgcmV0dXJuIGN1cnJlbnRDb25zdW1lcjtcbn1cbiJdfQ==