/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Describes the state of defer block dependency loading.
 */
export var DeferDependenciesLoadingState;
(function (DeferDependenciesLoadingState) {
    /** Initial state, dependency loading is not yet triggered */
    DeferDependenciesLoadingState[DeferDependenciesLoadingState["NOT_STARTED"] = 0] = "NOT_STARTED";
    /** Dependency loading is in progress */
    DeferDependenciesLoadingState[DeferDependenciesLoadingState["IN_PROGRESS"] = 1] = "IN_PROGRESS";
    /** Dependency loading has completed successfully */
    DeferDependenciesLoadingState[DeferDependenciesLoadingState["COMPLETE"] = 2] = "COMPLETE";
    /** Dependency loading has failed */
    DeferDependenciesLoadingState[DeferDependenciesLoadingState["FAILED"] = 3] = "FAILED";
})(DeferDependenciesLoadingState || (DeferDependenciesLoadingState = {}));
/**
 * Describes the current state of this {#defer} block instance.
 *
 * @publicApi
 * @developerPreview
 */
export var DeferBlockState;
(function (DeferBlockState) {
    /** The {:placeholder} block content is rendered */
    DeferBlockState[DeferBlockState["Placeholder"] = 0] = "Placeholder";
    /** The {:loading} block content is rendered */
    DeferBlockState[DeferBlockState["Loading"] = 1] = "Loading";
    /** The main content block content is rendered */
    DeferBlockState[DeferBlockState["Complete"] = 2] = "Complete";
    /** The {:error} block content is rendered */
    DeferBlockState[DeferBlockState["Error"] = 3] = "Error";
})(DeferBlockState || (DeferBlockState = {}));
/**
 * Describes the initial state of this {#defer} block instance.
 *
 * Note: this state is internal only and *must* be represented
 * with a number lower than any value in the `DeferBlockState` enum.
 */
export var DeferBlockInternalState;
(function (DeferBlockInternalState) {
    /** Initial state. Nothing is rendered yet. */
    DeferBlockInternalState[DeferBlockInternalState["Initial"] = -1] = "Initial";
})(DeferBlockInternalState || (DeferBlockInternalState = {}));
/**
 * A slot in the `LDeferBlockDetails` array that contains a number
 * that represent a current block state that is being rendered.
 */
export const DEFER_BLOCK_STATE = 0;
/**
 * Options for configuring defer blocks behavior.
 * @publicApi
 * @developerPreview
 */
export var DeferBlockBehavior;
(function (DeferBlockBehavior) {
    /**
     * Manual triggering mode for defer blocks. Provides control over when defer blocks render
     * and which state they render. This is the default behavior in test environments.
     */
    DeferBlockBehavior[DeferBlockBehavior["Manual"] = 0] = "Manual";
    /**
     * Playthrough mode for defer blocks. This mode behaves like defer blocks would in a browser.
     */
    DeferBlockBehavior[DeferBlockBehavior["Playthrough"] = 1] = "Playthrough";
})(DeferBlockBehavior || (DeferBlockBehavior = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2ludGVyZmFjZXMvZGVmZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBc0JIOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksNkJBWVg7QUFaRCxXQUFZLDZCQUE2QjtJQUN2Qyw2REFBNkQ7SUFDN0QsK0ZBQVcsQ0FBQTtJQUVYLHdDQUF3QztJQUN4QywrRkFBVyxDQUFBO0lBRVgsb0RBQW9EO0lBQ3BELHlGQUFRLENBQUE7SUFFUixvQ0FBb0M7SUFDcEMscUZBQU0sQ0FBQTtBQUNSLENBQUMsRUFaVyw2QkFBNkIsS0FBN0IsNkJBQTZCLFFBWXhDO0FBa0VEOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFOLElBQVksZUFZWDtBQVpELFdBQVksZUFBZTtJQUN6QixtREFBbUQ7SUFDbkQsbUVBQWUsQ0FBQTtJQUVmLCtDQUErQztJQUMvQywyREFBVyxDQUFBO0lBRVgsaURBQWlEO0lBQ2pELDZEQUFZLENBQUE7SUFFWiw2Q0FBNkM7SUFDN0MsdURBQVMsQ0FBQTtBQUNYLENBQUMsRUFaVyxlQUFlLEtBQWYsZUFBZSxRQVkxQjtBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFOLElBQVksdUJBR1g7QUFIRCxXQUFZLHVCQUF1QjtJQUNqQyw4Q0FBOEM7SUFDOUMsNEVBQVksQ0FBQTtBQUNkLENBQUMsRUFIVyx1QkFBdUIsS0FBdkIsdUJBQXVCLFFBR2xDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBb0JuQzs7OztHQUlHO0FBQ0gsTUFBTSxDQUFOLElBQVksa0JBV1g7QUFYRCxXQUFZLGtCQUFrQjtJQUM1Qjs7O09BR0c7SUFDSCwrREFBTSxDQUFBO0lBRU47O09BRUc7SUFDSCx5RUFBVyxDQUFBO0FBQ2IsQ0FBQyxFQVhXLGtCQUFrQixLQUFsQixrQkFBa0IsUUFXN0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHR5cGUge0RlcGVuZGVuY3lUeXBlfSBmcm9tICcuL2RlZmluaXRpb24nO1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgc2hhcGUgb2YgYSBmdW5jdGlvbiBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyXG4gKiB0byBkb3dubG9hZCBkZXBlbmRlbmNpZXMgdGhhdCBjYW4gYmUgZGVmZXItbG9hZGVkLlxuICovXG5leHBvcnQgdHlwZSBEZXBlbmRlbmN5UmVzb2x2ZXJGbiA9ICgpID0+IEFycmF5PFByb21pc2U8RGVwZW5kZW5jeVR5cGU+PjtcblxuLyoqXG4gKiBFbnVtZXJhdGVzIGFsbCBgb25gIHRyaWdnZXJzIG9mIGEgZGVmZXIgYmxvY2suXG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIERlZmVyQmxvY2tUcmlnZ2VycyB7XG4gIE9uSWRsZSxcbiAgT25UaW1lcixcbiAgT25JbW1lZGlhdGUsXG4gIE9uSG92ZXIsXG4gIE9uSW50ZXJhY3Rpb24sXG4gIE9uVmlld3BvcnQsXG59XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBzdGF0ZSBvZiBkZWZlciBibG9jayBkZXBlbmRlbmN5IGxvYWRpbmcuXG4gKi9cbmV4cG9ydCBlbnVtIERlZmVyRGVwZW5kZW5jaWVzTG9hZGluZ1N0YXRlIHtcbiAgLyoqIEluaXRpYWwgc3RhdGUsIGRlcGVuZGVuY3kgbG9hZGluZyBpcyBub3QgeWV0IHRyaWdnZXJlZCAqL1xuICBOT1RfU1RBUlRFRCxcblxuICAvKiogRGVwZW5kZW5jeSBsb2FkaW5nIGlzIGluIHByb2dyZXNzICovXG4gIElOX1BST0dSRVNTLFxuXG4gIC8qKiBEZXBlbmRlbmN5IGxvYWRpbmcgaGFzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkgKi9cbiAgQ09NUExFVEUsXG5cbiAgLyoqIERlcGVuZGVuY3kgbG9hZGluZyBoYXMgZmFpbGVkICovXG4gIEZBSUxFRCxcbn1cblxuLyoqIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBhIGB7OmxvYWRpbmd9YCBibG9jayBhcyBpdCBpcyBzdG9yZWQgaW4gdGhlIGNvbXBvbmVudCBjb25zdGFudHMuICovXG5leHBvcnQgdHlwZSBEZWZlcnJlZExvYWRpbmdCbG9ja0NvbmZpZyA9IFttaW5pbXVtVGltZTogbnVtYmVyfG51bGwsIGFmdGVyVGltZTogbnVtYmVyfG51bGxdO1xuXG4vKiogQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGEgYHs6cGxhY2Vob2xkZXJ9YCBibG9jayBhcyBpdCBpcyBzdG9yZWQgaW4gdGhlIGNvbXBvbmVudCBjb25zdGFudHMuICovXG5leHBvcnQgdHlwZSBEZWZlcnJlZFBsYWNlaG9sZGVyQmxvY2tDb25maWcgPSBbYWZ0ZXJUaW1lOiBudW1iZXJ8bnVsbF07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBkYXRhIHNoYXJlZCBhY3Jvc3MgYWxsIGluc3RhbmNlcyBvZiBhIHsjZGVmZXJ9IGJsb2NrLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFREZWZlckJsb2NrRGV0YWlscyB7XG4gIC8qKlxuICAgKiBJbmRleCBpbiBhbiBMVmlldyBhbmQgVERhdGEgYXJyYXlzIHdoZXJlIGEgdGVtcGxhdGUgZm9yIHRoZSBwcmltYXJ5IGNvbnRlbnRcbiAgICogY2FuIGJlIGZvdW5kLlxuICAgKi9cbiAgcHJpbWFyeVRtcGxJbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBJbmRleCBpbiBhbiBMVmlldyBhbmQgVERhdGEgYXJyYXlzIHdoZXJlIGEgdGVtcGxhdGUgZm9yIHRoZSBgezpsb2FkaW5nfWBcbiAgICogYmxvY2sgY2FuIGJlIGZvdW5kLlxuICAgKi9cbiAgbG9hZGluZ1RtcGxJbmRleDogbnVtYmVyfG51bGw7XG5cbiAgLyoqXG4gICAqIEV4dHJhIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyAoc3VjaCBhcyBgYWZ0ZXJgIGFuZCBgbWluaW11bWApXG4gICAqIGZvciB0aGUgYHs6bG9hZGluZ31gIGJsb2NrLlxuICAgKi9cbiAgbG9hZGluZ0Jsb2NrQ29uZmlnOiBEZWZlcnJlZExvYWRpbmdCbG9ja0NvbmZpZ3xudWxsO1xuXG4gIC8qKlxuICAgKiBJbmRleCBpbiBhbiBMVmlldyBhbmQgVERhdGEgYXJyYXlzIHdoZXJlIGEgdGVtcGxhdGUgZm9yIHRoZSBgezpwbGFjZWhvbGRlcn1gXG4gICAqIGJsb2NrIGNhbiBiZSBmb3VuZC5cbiAgICovXG4gIHBsYWNlaG9sZGVyVG1wbEluZGV4OiBudW1iZXJ8bnVsbDtcblxuICAvKipcbiAgICogRXh0cmEgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzIChzdWNoIGFzIGBhZnRlcmAgYW5kIGBtaW5pbXVtYClcbiAgICogZm9yIHRoZSBgezpwbGFjZWhvbGRlcn1gIGJsb2NrLlxuICAgKi9cbiAgcGxhY2Vob2xkZXJCbG9ja0NvbmZpZzogRGVmZXJyZWRQbGFjZWhvbGRlckJsb2NrQ29uZmlnfG51bGw7XG5cbiAgLyoqXG4gICAqIEluZGV4IGluIGFuIExWaWV3IGFuZCBURGF0YSBhcnJheXMgd2hlcmUgYSB0ZW1wbGF0ZSBmb3IgdGhlIGB7OmVycm9yfWBcbiAgICogYmxvY2sgY2FuIGJlIGZvdW5kLlxuICAgKi9cbiAgZXJyb3JUbXBsSW5kZXg6IG51bWJlcnxudWxsO1xuXG4gIC8qKlxuICAgKiBDb21waWxlci1nZW5lcmF0ZWQgZnVuY3Rpb24gdGhhdCBsb2FkcyBhbGwgZGVwZW5kZW5jaWVzIGZvciBhIGB7I2RlZmVyfWAgYmxvY2suXG4gICAqL1xuICBkZXBlbmRlbmN5UmVzb2x2ZXJGbjogRGVwZW5kZW5jeVJlc29sdmVyRm58bnVsbDtcblxuICAvKipcbiAgICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSBvZiBkZWZlciBibG9jayBkZXBlbmRlbmNpZXMuXG4gICAqL1xuICBsb2FkaW5nU3RhdGU6IERlZmVyRGVwZW5kZW5jaWVzTG9hZGluZ1N0YXRlO1xuXG4gIC8qKlxuICAgKiBEZXBlbmRlbmN5IGxvYWRpbmcgUHJvbWlzZS4gVGhpcyBQcm9taXNlIGlzIGhlbHBmdWwgZm9yIGNhc2VzIHdoZW4gdGhlcmVcbiAgICogYXJlIG11bHRpcGxlIGluc3RhbmNlcyBvZiBhIGRlZmVyIGJsb2NrIChlLmcuIGlmIGl0IHdhcyB1c2VkIGluc2lkZSBvZiBhbiAqbmdGb3IpLFxuICAgKiB3aGljaCBhbGwgYXdhaXQgdGhlIHNhbWUgc2V0IG9mIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIGxvYWRpbmdQcm9taXNlOiBQcm9taXNlPHVua25vd24+fG51bGw7XG59XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoaXMgeyNkZWZlcn0gYmxvY2sgaW5zdGFuY2UuXG4gKlxuICogQHB1YmxpY0FwaVxuICogQGRldmVsb3BlclByZXZpZXdcbiAqL1xuZXhwb3J0IGVudW0gRGVmZXJCbG9ja1N0YXRlIHtcbiAgLyoqIFRoZSB7OnBsYWNlaG9sZGVyfSBibG9jayBjb250ZW50IGlzIHJlbmRlcmVkICovXG4gIFBsYWNlaG9sZGVyID0gMCxcblxuICAvKiogVGhlIHs6bG9hZGluZ30gYmxvY2sgY29udGVudCBpcyByZW5kZXJlZCAqL1xuICBMb2FkaW5nID0gMSxcblxuICAvKiogVGhlIG1haW4gY29udGVudCBibG9jayBjb250ZW50IGlzIHJlbmRlcmVkICovXG4gIENvbXBsZXRlID0gMixcblxuICAvKiogVGhlIHs6ZXJyb3J9IGJsb2NrIGNvbnRlbnQgaXMgcmVuZGVyZWQgKi9cbiAgRXJyb3IgPSAzLFxufVxuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgaW5pdGlhbCBzdGF0ZSBvZiB0aGlzIHsjZGVmZXJ9IGJsb2NrIGluc3RhbmNlLlxuICpcbiAqIE5vdGU6IHRoaXMgc3RhdGUgaXMgaW50ZXJuYWwgb25seSBhbmQgKm11c3QqIGJlIHJlcHJlc2VudGVkXG4gKiB3aXRoIGEgbnVtYmVyIGxvd2VyIHRoYW4gYW55IHZhbHVlIGluIHRoZSBgRGVmZXJCbG9ja1N0YXRlYCBlbnVtLlxuICovXG5leHBvcnQgZW51bSBEZWZlckJsb2NrSW50ZXJuYWxTdGF0ZSB7XG4gIC8qKiBJbml0aWFsIHN0YXRlLiBOb3RoaW5nIGlzIHJlbmRlcmVkIHlldC4gKi9cbiAgSW5pdGlhbCA9IC0xLFxufVxuXG4vKipcbiAqIEEgc2xvdCBpbiB0aGUgYExEZWZlckJsb2NrRGV0YWlsc2AgYXJyYXkgdGhhdCBjb250YWlucyBhIG51bWJlclxuICogdGhhdCByZXByZXNlbnQgYSBjdXJyZW50IGJsb2NrIHN0YXRlIHRoYXQgaXMgYmVpbmcgcmVuZGVyZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBERUZFUl9CTE9DS19TVEFURSA9IDA7XG5cbi8qKlxuICogRGVzY3JpYmVzIGluc3RhbmNlLXNwZWNpZmljIHsjZGVmZXJ9IGJsb2NrIGRhdGEuXG4gKlxuICogTm90ZTogY3VycmVudGx5IHRoZXJlIGlzIG9ubHkgdGhlIGBzdGF0ZWAgc2xvdCwgYnV0IG1vcmUgc2xvdHNcbiAqIHdvdWxkIGJlIGFkZGVkIGxhdGVyIHRvIGtlZXAgdHJhY2sgb2YgYGFmdGVyYCBhbmQgYG1heGltdW1gIGZlYXR1cmVzXG4gKiAod2hpY2ggd291bGQgcmVxdWlyZSBwZXItaW5zdGFuY2Ugc3RhdGUpLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExEZWZlckJsb2NrRGV0YWlscyBleHRlbmRzIEFycmF5PHVua25vd24+IHtcbiAgW0RFRkVSX0JMT0NLX1NUQVRFXTogRGVmZXJCbG9ja1N0YXRlfERlZmVyQmxvY2tJbnRlcm5hbFN0YXRlO1xufVxuXG4vKipcbiAqIEludGVybmFsIHN0cnVjdHVyZSB1c2VkIGZvciBjb25maWd1cmF0aW9uIG9mIGRlZmVyIGJsb2NrIGJlaGF2aW9yLlxuICogKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVmZXJCbG9ja0NvbmZpZyB7XG4gIGJlaGF2aW9yOiBEZWZlckJsb2NrQmVoYXZpb3I7XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgY29uZmlndXJpbmcgZGVmZXIgYmxvY2tzIGJlaGF2aW9yLlxuICogQHB1YmxpY0FwaVxuICogQGRldmVsb3BlclByZXZpZXdcbiAqL1xuZXhwb3J0IGVudW0gRGVmZXJCbG9ja0JlaGF2aW9yIHtcbiAgLyoqXG4gICAqIE1hbnVhbCB0cmlnZ2VyaW5nIG1vZGUgZm9yIGRlZmVyIGJsb2Nrcy4gUHJvdmlkZXMgY29udHJvbCBvdmVyIHdoZW4gZGVmZXIgYmxvY2tzIHJlbmRlclxuICAgKiBhbmQgd2hpY2ggc3RhdGUgdGhleSByZW5kZXIuIFRoaXMgaXMgdGhlIGRlZmF1bHQgYmVoYXZpb3IgaW4gdGVzdCBlbnZpcm9ubWVudHMuXG4gICAqL1xuICBNYW51YWwsXG5cbiAgLyoqXG4gICAqIFBsYXl0aHJvdWdoIG1vZGUgZm9yIGRlZmVyIGJsb2Nrcy4gVGhpcyBtb2RlIGJlaGF2ZXMgbGlrZSBkZWZlciBibG9ja3Mgd291bGQgaW4gYSBicm93c2VyLlxuICAgKi9cbiAgUGxheXRocm91Z2gsXG59XG4iXX0=