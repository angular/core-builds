/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { createContentQuery, createViewQuery } from '../query';
import { bindQueryToSignal } from '../query_reactive';
import { getCurrentQueryIndex, setCurrentQueryIndex } from '../state';
/**
 * Registers a QueryList, associated with a content query, for later refresh (part of a view
 * refresh).
 *
 * @param directiveIndex Current directive index
 * @param predicate The type for which the query will search
 * @param flags Flags associated with the query
 * @param read What to save in the query
 * @returns QueryList<T>
 *
 * @codeGenApi
 */
export function ɵɵcontentQuerySignal(target, directiveIndex, predicate, flags, read) {
    bindQueryToSignal(target, createContentQuery(directiveIndex, predicate, flags, read));
}
/**
 * Creates a new view query by initializing internal data structures and binding a new query to the
 * target signal.
 *
 * @param target The target signal to assign the query results to.
 * @param predicate The type or label that should match a given query
 * @param flags Flags associated with the query
 * @param read What to save in the query
 *
 * @codeGenApi
 */
export function ɵɵviewQuerySignal(target, predicate, flags, read) {
    bindQueryToSignal(target, createViewQuery(predicate, flags, read));
}
/**
 * Advances the current query index by a specified offset.
 *
 * Adjusting the current query index is necessary in cases where a given directive has a mix of
 * zone-based and signal-based queries. The signal-based queries don't require tracking of the
 * current index (those are refreshed on demand and not during change detection) so this instruction
 * is only necessary for backward-compatibility.
 *
 * @param index offset to apply to the current query index (defaults to 1)
 *
 * @codeGenApi
 */
export function ɵɵqueryAdvance(indexOffset = 1) {
    setCurrentQueryIndex(getCurrentQueryIndex() + indexOffset);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcmllc19zaWduYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9pbnN0cnVjdGlvbnMvcXVlcmllc19zaWduYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUtILE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxlQUFlLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDN0QsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFcEQsT0FBTyxFQUFDLG9CQUFvQixFQUFFLG9CQUFvQixFQUFDLE1BQU0sVUFBVSxDQUFDO0FBRXBFOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUNoQyxNQUFpQixFQUFFLGNBQXNCLEVBQUUsU0FBMEMsRUFDckYsS0FBaUIsRUFBRSxJQUFVO0lBQy9CLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUM3QixNQUF1QixFQUFFLFNBQTBDLEVBQUUsS0FBaUIsRUFDdEYsSUFBNkI7SUFDL0IsaUJBQWlCLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDckUsQ0FBQztBQUVEOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxjQUFzQixDQUFDO0lBQ3BELG9CQUFvQixDQUFDLG9CQUFvQixFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUM7QUFDN0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5cbmltcG9ydCB7UHJvdmlkZXJUb2tlbn0gZnJvbSAnLi4vLi4vZGknO1xuaW1wb3J0IHtRdWVyeUZsYWdzfSBmcm9tICcuLi9pbnRlcmZhY2VzL3F1ZXJ5JztcbmltcG9ydCB7Y3JlYXRlQ29udGVudFF1ZXJ5LCBjcmVhdGVWaWV3UXVlcnl9IGZyb20gJy4uL3F1ZXJ5JztcbmltcG9ydCB7YmluZFF1ZXJ5VG9TaWduYWx9IGZyb20gJy4uL3F1ZXJ5X3JlYWN0aXZlJztcbmltcG9ydCB7U2lnbmFsfSBmcm9tICcuLi9yZWFjdGl2aXR5L2FwaSc7XG5pbXBvcnQge2dldEN1cnJlbnRRdWVyeUluZGV4LCBzZXRDdXJyZW50UXVlcnlJbmRleH0gZnJvbSAnLi4vc3RhdGUnO1xuXG4vKipcbiAqIFJlZ2lzdGVycyBhIFF1ZXJ5TGlzdCwgYXNzb2NpYXRlZCB3aXRoIGEgY29udGVudCBxdWVyeSwgZm9yIGxhdGVyIHJlZnJlc2ggKHBhcnQgb2YgYSB2aWV3XG4gKiByZWZyZXNoKS5cbiAqXG4gKiBAcGFyYW0gZGlyZWN0aXZlSW5kZXggQ3VycmVudCBkaXJlY3RpdmUgaW5kZXhcbiAqIEBwYXJhbSBwcmVkaWNhdGUgVGhlIHR5cGUgZm9yIHdoaWNoIHRoZSBxdWVyeSB3aWxsIHNlYXJjaFxuICogQHBhcmFtIGZsYWdzIEZsYWdzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcXVlcnlcbiAqIEBwYXJhbSByZWFkIFdoYXQgdG8gc2F2ZSBpbiB0aGUgcXVlcnlcbiAqIEByZXR1cm5zIFF1ZXJ5TGlzdDxUPlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiDJtcm1Y29udGVudFF1ZXJ5U2lnbmFsPFQ+KFxuICAgIHRhcmdldDogU2lnbmFsPFQ+LCBkaXJlY3RpdmVJbmRleDogbnVtYmVyLCBwcmVkaWNhdGU6IFByb3ZpZGVyVG9rZW48dW5rbm93bj58c3RyaW5nW10sXG4gICAgZmxhZ3M6IFF1ZXJ5RmxhZ3MsIHJlYWQ/OiBhbnkpOiB2b2lkIHtcbiAgYmluZFF1ZXJ5VG9TaWduYWwodGFyZ2V0LCBjcmVhdGVDb250ZW50UXVlcnkoZGlyZWN0aXZlSW5kZXgsIHByZWRpY2F0ZSwgZmxhZ3MsIHJlYWQpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZpZXcgcXVlcnkgYnkgaW5pdGlhbGl6aW5nIGludGVybmFsIGRhdGEgc3RydWN0dXJlcyBhbmQgYmluZGluZyBhIG5ldyBxdWVyeSB0byB0aGVcbiAqIHRhcmdldCBzaWduYWwuXG4gKlxuICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IHNpZ25hbCB0byBhc3NpZ24gdGhlIHF1ZXJ5IHJlc3VsdHMgdG8uXG4gKiBAcGFyYW0gcHJlZGljYXRlIFRoZSB0eXBlIG9yIGxhYmVsIHRoYXQgc2hvdWxkIG1hdGNoIGEgZ2l2ZW4gcXVlcnlcbiAqIEBwYXJhbSBmbGFncyBGbGFncyBhc3NvY2lhdGVkIHdpdGggdGhlIHF1ZXJ5XG4gKiBAcGFyYW0gcmVhZCBXaGF0IHRvIHNhdmUgaW4gdGhlIHF1ZXJ5XG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIMm1ybV2aWV3UXVlcnlTaWduYWwoXG4gICAgdGFyZ2V0OiBTaWduYWw8dW5rbm93bj4sIHByZWRpY2F0ZTogUHJvdmlkZXJUb2tlbjx1bmtub3duPnxzdHJpbmdbXSwgZmxhZ3M6IFF1ZXJ5RmxhZ3MsXG4gICAgcmVhZD86IFByb3ZpZGVyVG9rZW48dW5rbm93bj4pOiB2b2lkIHtcbiAgYmluZFF1ZXJ5VG9TaWduYWwodGFyZ2V0LCBjcmVhdGVWaWV3UXVlcnkocHJlZGljYXRlLCBmbGFncywgcmVhZCkpO1xufVxuXG4vKipcbiAqIEFkdmFuY2VzIHRoZSBjdXJyZW50IHF1ZXJ5IGluZGV4IGJ5IGEgc3BlY2lmaWVkIG9mZnNldC5cbiAqXG4gKiBBZGp1c3RpbmcgdGhlIGN1cnJlbnQgcXVlcnkgaW5kZXggaXMgbmVjZXNzYXJ5IGluIGNhc2VzIHdoZXJlIGEgZ2l2ZW4gZGlyZWN0aXZlIGhhcyBhIG1peCBvZlxuICogem9uZS1iYXNlZCBhbmQgc2lnbmFsLWJhc2VkIHF1ZXJpZXMuIFRoZSBzaWduYWwtYmFzZWQgcXVlcmllcyBkb24ndCByZXF1aXJlIHRyYWNraW5nIG9mIHRoZVxuICogY3VycmVudCBpbmRleCAodGhvc2UgYXJlIHJlZnJlc2hlZCBvbiBkZW1hbmQgYW5kIG5vdCBkdXJpbmcgY2hhbmdlIGRldGVjdGlvbikgc28gdGhpcyBpbnN0cnVjdGlvblxuICogaXMgb25seSBuZWNlc3NhcnkgZm9yIGJhY2t3YXJkLWNvbXBhdGliaWxpdHkuXG4gKlxuICogQHBhcmFtIGluZGV4IG9mZnNldCB0byBhcHBseSB0byB0aGUgY3VycmVudCBxdWVyeSBpbmRleCAoZGVmYXVsdHMgdG8gMSlcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gybXJtXF1ZXJ5QWR2YW5jZShpbmRleE9mZnNldDogbnVtYmVyID0gMSk6IHZvaWQge1xuICBzZXRDdXJyZW50UXVlcnlJbmRleChnZXRDdXJyZW50UXVlcnlJbmRleCgpICsgaW5kZXhPZmZzZXQpO1xufVxuIl19