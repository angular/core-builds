/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { SIGNAL } from '@angular/core/primitives/signals';
import { validateAgainstEventProperties } from '../../sanitization/sanitization';
import { assertDefined, assertIndexInRange } from '../../util/assert';
import { EMPTY_ARRAY } from '../../util/empty';
import { bindingUpdated } from '../bindings';
import { isComponentHost } from '../interfaces/type_checks';
import { HEADER_OFFSET, RENDERER } from '../interfaces/view';
import { computed } from '../reactivity/computed';
import { getCurrentTNode, getLView, getTView, nextBindingIndex } from '../state';
import { renderStringify } from '../util/stringify_utils';
import { getNativeByTNode } from '../util/view_utils';
import { handleUnknownPropertyError, isPropertyValid } from './element_validation';
import { mapPropName, markDirtyIfOnPush, setNgReflectProperties, writeToDirectiveInput } from './shared';
/**
 * TODO
 *
 * @codeGenApi
 */
export function ɵɵpropertyCreate(slot, propName, expr, sanitizer) {
    const lView = getLView();
    const expressionSlot = HEADER_OFFSET + slot;
    const tView = getTView();
    const tNode = getCurrentTNode();
    assertDefined(tNode, `propertyCreate() must follow an actual element`);
    const inputData = tNode.inputs?.[propName] ?? EMPTY_ARRAY;
    let signalInputs = null;
    // PERF: the fact that we need to iterate over all the inputs here isn't great.
    // We might consider storing more info on TView
    let zoneTargets = null;
    for (let i = 0; i < inputData.length;) {
        const directiveIndex = inputData[i++];
        const privateName = inputData[i++];
        const def = tView.data[directiveIndex];
        if (!def.signals) {
            // TODO(pk): refactor - code flow with all those firstCreatePass checks becomes hard to follow
            if (tView.firstCreatePass) {
                (zoneTargets ??= []).push(directiveIndex, privateName);
            }
        }
        else {
            ngDevMode && assertIndexInRange(lView, directiveIndex);
            // PERF: megamorphic read on [privateName] access
            const inputSignal = lView[directiveIndex][privateName][SIGNAL];
            (signalInputs ??= []).push(inputSignal);
        }
    }
    zoneTargets ??= EMPTY_ARRAY;
    signalInputs ??= EMPTY_ARRAY;
    // PERF(pk): I could avoid wrapping into computed for the case of a single binding to a signal
    // based component
    expr = computed(expr);
    lView[expressionSlot] = expr;
    for (const inputSignal of signalInputs) {
        // TODO: Improve this by not allocating an object literal here. This exists just for testing.
        inputSignal.bind(inputSignal, { computation: expr });
        // TODO: figure out where to set `isInitialized`.
        inputSignal.isInitialized = true;
    }
    if (tView.firstCreatePass) {
        if (inputData.length === 0) {
            // Untargeted input -> DOM binding.
            (tView.virtualUpdate ??= []).push({
                slot: expressionSlot,
                instruction: () => propertyUpdateDom(tNode.index, propName, expressionSlot, sanitizer ?? null),
            });
        }
        else if (zoneTargets.length) {
            // Some binding targets were zone-based, so we need an update instruction to process them.
            (tView.virtualUpdate ??= []).push({
                slot: expressionSlot,
                instruction: () => propertyUpdateInput(tNode.index, propName, expressionSlot, zoneTargets),
            });
        }
        else {
            // The only target(s) were signal-based, so no update path is needed.
        }
    }
    return ɵɵpropertyCreate;
}
export function propertyUpdateDom(nodeSlot, propName, expressionSlot, sanitizer) {
    const lView = getLView();
    const expr = lView[expressionSlot];
    let value = expr();
    const bindingIndex = nextBindingIndex();
    if (!bindingUpdated(lView, bindingIndex, value)) {
        return;
    }
    const tView = getTView();
    const tNode = tView.data[nodeSlot];
    const element = getNativeByTNode(tNode, lView);
    propName = mapPropName(propName);
    if (ngDevMode) {
        validateAgainstEventProperties(propName);
        if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {
            handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);
        }
        ngDevMode.rendererSetProperty++;
    }
    // It is assumed that the sanitizer is only added when the compiler determines that the
    // property is risky, so sanitization can be done without further checks.
    value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;
    lView[RENDERER].setProperty(element, propName, value);
}
export function propertyUpdateInput(nodeIndex, propName, expressionSlot, targets) {
    const lView = getLView();
    const expr = lView[expressionSlot];
    const value = expr();
    const tView = getTView();
    const tNode = tView.data[nodeIndex];
    ngDevMode && assertDefined(tNode.inputs, `Expected tNode to have inputs`);
    const bindingIndex = nextBindingIndex();
    if (!bindingUpdated(lView, bindingIndex, value)) {
        return;
    }
    for (let i = 0; i < targets.length;) {
        const index = targets[i++];
        const privateName = targets[i++];
        ngDevMode && assertIndexInRange(lView, index);
        const instance = lView[index];
        const def = tView.data[index];
        writeToDirectiveInput(def, instance, propName, privateName, value);
    }
    const element = getNativeByTNode(tNode, lView);
    if (isComponentHost(tNode)) {
        markDirtyIfOnPush(lView, tNode.index);
    }
    if (ngDevMode) {
        setNgReflectProperties(lView, element, tNode.type, targets, value);
    }
}
export function ɵɵstringifyInterpolation(staticStrings, ...expressionValues) {
    // Build the updated content
    let content = staticStrings[0];
    for (let i = 1; i < staticStrings.length; i++) {
        content += renderStringify(expressionValues[i - 1]) + staticStrings[i];
    }
    return content;
}
//# sourceMappingURL=data:application/json;base64,