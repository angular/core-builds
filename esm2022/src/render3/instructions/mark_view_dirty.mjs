/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { isRootView } from '../interfaces/type_checks';
import { ENVIRONMENT, FLAGS } from '../interfaces/view';
import { isRefreshingViews } from '../state';
import { getLViewParent } from '../util/view_utils';
/**
 * Marks current view and all ancestors dirty.
 *
 * Returns the root view because it is found as a byproduct of marking the view tree
 * dirty, and can be used by methods that consume markViewDirty() to easily schedule
 * change detection. Otherwise, such methods would need to traverse up the view tree
 * an additional time to get the root view and schedule a tick on it.
 *
 * @param lView The starting LView to mark dirty
 * @returns the root LView
 */
export function markViewDirty(lView) {
    const dirtyBitsToUse = isRefreshingViews() ?
        64 /* LViewFlags.Dirty */ :
        // When we are not actively refreshing a view tree, it is absolutely
        // valid to update state and mark views dirty. We use the `RefreshView` flag in this
        // case to allow synchronously rerunning change detection. This applies today to
        // afterRender hooks as well as animation listeners which execute after detecting
        // changes in a view when the render factory flushes.
        1024 /* LViewFlags.RefreshView */ | 64 /* LViewFlags.Dirty */;
    lView[ENVIRONMENT].changeDetectionScheduler?.notify();
    while (lView) {
        lView[FLAGS] |= dirtyBitsToUse;
        const parent = getLViewParent(lView);
        // Stop traversing up as soon as you find a root view that wasn't attached to any container
        if (isRootView(lView) && !parent) {
            return lView;
        }
        // continue otherwise
        lView = parent;
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya192aWV3X2RpcnR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9pbnN0cnVjdGlvbnMvbWFya192aWV3X2RpcnR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNyRCxPQUFPLEVBQUMsV0FBVyxFQUFFLEtBQUssRUFBb0IsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDM0MsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRWxEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQVk7SUFDeEMsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO2tDQU12QixDQUFDO1FBQ2xCLG9FQUFvRTtRQUNwRSxvRkFBb0Y7UUFDcEYsZ0ZBQWdGO1FBQ2hGLGlGQUFpRjtRQUNqRixxREFBcUQ7UUFDckQsNkRBQXlDLENBQUM7SUFDOUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLHdCQUF3QixFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ3RELE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDYixLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksY0FBYyxDQUFDO1FBQy9CLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQywyRkFBMkY7UUFDM0YsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNqQyxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFDRCxxQkFBcUI7UUFDckIsS0FBSyxHQUFHLE1BQU8sQ0FBQztJQUNsQixDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7aXNSb290Vmlld30gZnJvbSAnLi4vaW50ZXJmYWNlcy90eXBlX2NoZWNrcyc7XG5pbXBvcnQge0VOVklST05NRU5ULCBGTEFHUywgTFZpZXcsIExWaWV3RmxhZ3N9IGZyb20gJy4uL2ludGVyZmFjZXMvdmlldyc7XG5pbXBvcnQge2lzUmVmcmVzaGluZ1ZpZXdzfSBmcm9tICcuLi9zdGF0ZSc7XG5pbXBvcnQge2dldExWaWV3UGFyZW50fSBmcm9tICcuLi91dGlsL3ZpZXdfdXRpbHMnO1xuXG4vKipcbiAqIE1hcmtzIGN1cnJlbnQgdmlldyBhbmQgYWxsIGFuY2VzdG9ycyBkaXJ0eS5cbiAqXG4gKiBSZXR1cm5zIHRoZSByb290IHZpZXcgYmVjYXVzZSBpdCBpcyBmb3VuZCBhcyBhIGJ5cHJvZHVjdCBvZiBtYXJraW5nIHRoZSB2aWV3IHRyZWVcbiAqIGRpcnR5LCBhbmQgY2FuIGJlIHVzZWQgYnkgbWV0aG9kcyB0aGF0IGNvbnN1bWUgbWFya1ZpZXdEaXJ0eSgpIHRvIGVhc2lseSBzY2hlZHVsZVxuICogY2hhbmdlIGRldGVjdGlvbi4gT3RoZXJ3aXNlLCBzdWNoIG1ldGhvZHMgd291bGQgbmVlZCB0byB0cmF2ZXJzZSB1cCB0aGUgdmlldyB0cmVlXG4gKiBhbiBhZGRpdGlvbmFsIHRpbWUgdG8gZ2V0IHRoZSByb290IHZpZXcgYW5kIHNjaGVkdWxlIGEgdGljayBvbiBpdC5cbiAqXG4gKiBAcGFyYW0gbFZpZXcgVGhlIHN0YXJ0aW5nIExWaWV3IHRvIG1hcmsgZGlydHlcbiAqIEByZXR1cm5zIHRoZSByb290IExWaWV3XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXJrVmlld0RpcnR5KGxWaWV3OiBMVmlldyk6IExWaWV3fG51bGwge1xuICBjb25zdCBkaXJ0eUJpdHNUb1VzZSA9IGlzUmVmcmVzaGluZ1ZpZXdzKCkgP1xuICAgICAgLy8gV2hlbiB3ZSBhcmUgYWN0aXZlbHkgcmVmcmVzaGluZyB2aWV3cywgd2Ugb25seSB1c2UgdGhlIGBEaXJ0eWAgYml0IHRvIG1hcmsgYSB2aWV3XG4gICAgICAvLyBmb3IgY2hlY2suIFRoaXMgYml0IGlzIGlnbm9yZWQgaW4gQ2hhbmdlRGV0ZWN0aW9uTW9kZS5UYXJnZXRlZCwgd2hpY2ggaXMgdXNlZCB0b1xuICAgICAgLy8gc3luY2hyb25vdXNseSByZXJ1biBjaGFuZ2UgZGV0ZWN0aW9uIG9uIGEgc3BlY2lmaWMgc2V0IG9mIHZpZXdzICh0aG9zZSB3aGljaCBoYXZlXG4gICAgICAvLyB0aGUgYFJlZnJlc2hWaWV3YCBmbGFnIGFuZCB0aG9zZSB3aXRoIGRpcnR5IHNpZ25hbCBjb25zdW1lcnMpLiBgTFZpZXdGbGFncy5EaXJ0eWBcbiAgICAgIC8vIGRvZXMgbm90IHN1cHBvcnQgcmUtZW50cmFudCBjaGFuZ2UgZGV0ZWN0aW9uIG9uIGl0cyBvd24uXG4gICAgICBMVmlld0ZsYWdzLkRpcnR5IDpcbiAgICAgIC8vIFdoZW4gd2UgYXJlIG5vdCBhY3RpdmVseSByZWZyZXNoaW5nIGEgdmlldyB0cmVlLCBpdCBpcyBhYnNvbHV0ZWx5XG4gICAgICAvLyB2YWxpZCB0byB1cGRhdGUgc3RhdGUgYW5kIG1hcmsgdmlld3MgZGlydHkuIFdlIHVzZSB0aGUgYFJlZnJlc2hWaWV3YCBmbGFnIGluIHRoaXNcbiAgICAgIC8vIGNhc2UgdG8gYWxsb3cgc3luY2hyb25vdXNseSByZXJ1bm5pbmcgY2hhbmdlIGRldGVjdGlvbi4gVGhpcyBhcHBsaWVzIHRvZGF5IHRvXG4gICAgICAvLyBhZnRlclJlbmRlciBob29rcyBhcyB3ZWxsIGFzIGFuaW1hdGlvbiBsaXN0ZW5lcnMgd2hpY2ggZXhlY3V0ZSBhZnRlciBkZXRlY3RpbmdcbiAgICAgIC8vIGNoYW5nZXMgaW4gYSB2aWV3IHdoZW4gdGhlIHJlbmRlciBmYWN0b3J5IGZsdXNoZXMuXG4gICAgICBMVmlld0ZsYWdzLlJlZnJlc2hWaWV3IHwgTFZpZXdGbGFncy5EaXJ0eTtcbiAgbFZpZXdbRU5WSVJPTk1FTlRdLmNoYW5nZURldGVjdGlvblNjaGVkdWxlcj8ubm90aWZ5KCk7XG4gIHdoaWxlIChsVmlldykge1xuICAgIGxWaWV3W0ZMQUdTXSB8PSBkaXJ0eUJpdHNUb1VzZTtcbiAgICBjb25zdCBwYXJlbnQgPSBnZXRMVmlld1BhcmVudChsVmlldyk7XG4gICAgLy8gU3RvcCB0cmF2ZXJzaW5nIHVwIGFzIHNvb24gYXMgeW91IGZpbmQgYSByb290IHZpZXcgdGhhdCB3YXNuJ3QgYXR0YWNoZWQgdG8gYW55IGNvbnRhaW5lclxuICAgIGlmIChpc1Jvb3RWaWV3KGxWaWV3KSAmJiAhcGFyZW50KSB7XG4gICAgICByZXR1cm4gbFZpZXc7XG4gICAgfVxuICAgIC8vIGNvbnRpbnVlIG90aGVyd2lzZVxuICAgIGxWaWV3ID0gcGFyZW50ITtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbiJdfQ==