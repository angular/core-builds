/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { assertInInjectionContext } from '../../di/contextual';
import { Injector } from '../../di/injector';
import { inject } from '../../di/injector_compatibility';
import { ɵɵdefineInjectable } from '../../di/interface/defs';
import { DestroyRef } from '../../linker/destroy_ref';
import { Watch } from '../../signals';
/**
 * Tracks all effects registered within a given application and runs them via `flush`.
 */
class EffectManager {
    constructor() {
        this.all = new Set();
        this.queue = new Map();
    }
    create(effectFn, destroyRef, allowSignalWrites) {
        const zone = Zone.current;
        const watch = new Watch(effectFn, (watch) => {
            if (!this.all.has(watch)) {
                return;
            }
            this.queue.set(watch, zone);
        }, allowSignalWrites);
        this.all.add(watch);
        // Effects start dirty.
        watch.notify();
        let unregisterOnDestroy;
        const destroy = () => {
            watch.cleanup();
            unregisterOnDestroy?.();
            this.all.delete(watch);
            this.queue.delete(watch);
        };
        unregisterOnDestroy = destroyRef?.onDestroy(destroy);
        return {
            destroy,
        };
    }
    flush() {
        if (this.queue.size === 0) {
            return;
        }
        for (const [watch, zone] of this.queue) {
            this.queue.delete(watch);
            zone.run(() => watch.run());
        }
    }
    get isQueueEmpty() {
        return this.queue.size === 0;
    }
    /** @nocollapse */
    static { this.ɵprov = ɵɵdefineInjectable({
        token: EffectManager,
        providedIn: 'root',
        factory: () => new EffectManager(),
    }); }
}
export { EffectManager };
/**
 * Create a global `Effect` for the given reactive function.
 *
 * @developerPreview
 */
export function effect(effectFn, options) {
    !options?.injector && assertInInjectionContext(effect);
    const injector = options?.injector ?? inject(Injector);
    const effectManager = injector.get(EffectManager);
    const destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;
    return effectManager.create(effectFn, destroyRef, !!options?.allowSignalWrites);
}
//# sourceMappingURL=data:application/json;base64,