/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ERRORED, producerAccessed, producerUpdateValueVersion, SIGNAL } from '@angular/core/primitives/signals';
import { INPUT_SIGNAL_NODE } from './input_signal';
export function input(opts) {
    const node = Object.create(INPUT_SIGNAL_NODE);
    opts?.transform && (node.transform = opts.transform);
    opts?.initialValue && (node.value = node.transform(opts.initialValue));
    function inputValueFn() {
        // Check if the value needs updating before returning it.
        producerUpdateValueVersion(node);
        // Record that someone looked at this signal.
        producerAccessed(node);
        if (node.value === ERRORED) {
            throw node.error;
        }
        return node.value;
    }
    inputValueFn[SIGNAL] = node;
    return inputValueFn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL3JlYWN0aXZpdHkvaW5wdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUUvRyxPQUFPLEVBQUMsaUJBQWlCLEVBQStCLE1BQU0sZ0JBQWdCLENBQUM7QUE4Qi9FLE1BQU0sVUFBVSxLQUFLLENBQWdCLElBQWtDO0lBRXJFLE1BQU0sSUFBSSxHQUFtQyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFOUUsSUFBSSxFQUFFLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JELElBQUksRUFBRSxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFFdkUsU0FBUyxZQUFZO1FBQ25CLHlEQUF5RDtRQUN6RCwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqQyw2Q0FBNkM7UUFDN0MsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkIsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLE9BQU8sRUFBRTtZQUMxQixNQUFNLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDbEI7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVBLFlBQW9CLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBRXJDLE9BQU8sWUFBMEMsQ0FBQztBQUNwRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7RVJST1JFRCwgcHJvZHVjZXJBY2Nlc3NlZCwgcHJvZHVjZXJVcGRhdGVWYWx1ZVZlcnNpb24sIFNJR05BTH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9wcmltaXRpdmVzL3NpZ25hbHMnO1xuXG5pbXBvcnQge0lOUFVUX1NJR05BTF9OT0RFLCBJbnB1dFNpZ25hbCwgSW5wdXRTaWduYWxOb2RlfSBmcm9tICcuL2lucHV0X3NpZ25hbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJpbWFyeUlucHV0T3B0aW9uczxSZWFkVCwgV3JpdGVUPiB7XG4gIGFsaWFzPzogc3RyaW5nO1xuICB0cmFuc2Zvcm0/OiAodmFsdWU6IFdyaXRlVCkgPT4gUmVhZFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRPcHRpb25zPFJlYWRULCBXcml0ZVQ+IGV4dGVuZHMgUHJpbWFyeUlucHV0T3B0aW9uczxSZWFkVCwgV3JpdGVUPiB7XG4gIGluaXRpYWxWYWx1ZT86IFdyaXRlVDtcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5wdXQoKTogSW5wdXRTaWduYWw8dW5kZWZpbmVkLCB1bmRlZmluZWQ+O1xuZXhwb3J0IGZ1bmN0aW9uIGlucHV0PFQ+KCk6IElucHV0U2lnbmFsPFR8dW5kZWZpbmVkLCBUPjtcbmV4cG9ydCBmdW5jdGlvbiBpbnB1dDxUPihcbiAgICBpbml0aWFsVmFsdWU6IFQmKHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4pLFxuICAgIG9wdHM/OiBQcmltYXJ5SW5wdXRPcHRpb25zPFQsIFQ+Jnt0cmFuc2Zvcm0/OiB1bmRlZmluZWR9KTogSW5wdXRTaWduYWw8VCwgVD47XG5leHBvcnQgZnVuY3Rpb24gaW5wdXQ8UmVhZFQsIFdyaXRlVCA9IFJlYWRUPihcbiAgICBpbml0aWFsVmFsdWU6IFdyaXRlVCYoc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiksXG4gICAgb3B0czogUHJpbWFyeUlucHV0T3B0aW9uczxSZWFkVCwgV3JpdGVUPik6IElucHV0U2lnbmFsPFJlYWRULCBXcml0ZVQ+O1xuZXhwb3J0IGZ1bmN0aW9uIGlucHV0PFQ+KG9wdHM6IElucHV0T3B0aW9uczxULCBUPiZcbiAgICAgICAgICAgICAgICAgICAgICAgICB7cmVxdWlyZWQ6IHRydWUsIHRyYW5zZm9ybT86IHVuZGVmaW5lZH0pOiBJbnB1dFNpZ25hbDxULCBUPjtcbmV4cG9ydCBmdW5jdGlvbiBpbnB1dDxSZWFkVCwgV3JpdGVUID0gUmVhZFQ+KG9wdHM6IElucHV0T3B0aW9uczxSZWFkVCwgV3JpdGVUPiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXF1aXJlZDogdHJ1ZX0pOiBJbnB1dFNpZ25hbDxSZWFkVCwgV3JpdGVUPjtcbmV4cG9ydCBmdW5jdGlvbiBpbnB1dDxUPihvcHRzOiBJbnB1dE9wdGlvbnM8VCwgVD4mXG4gICAgICAgICAgICAgICAgICAgICAgICAge2luaXRpYWxWYWx1ZTogVCwgdHJhbnNmb3JtPzogdW5kZWZpbmVkfSk6IElucHV0U2lnbmFsPFQsIFQ+O1xuZXhwb3J0IGZ1bmN0aW9uIGlucHV0PFJlYWRULCBXcml0ZVQgPSBSZWFkVD4ob3B0czogSW5wdXRPcHRpb25zPFJlYWRULCBXcml0ZVQ+JlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2luaXRpYWxWYWx1ZTogUmVhZFR9KTogSW5wdXRTaWduYWw8UmVhZFQsIFdyaXRlVD47XG5leHBvcnQgZnVuY3Rpb24gaW5wdXQ8UmVhZFQsIFdyaXRlVCA9IFJlYWRUPihvcHRzOiBJbnB1dE9wdGlvbnM8UmVhZFQsIFdyaXRlVD4pOlxuICAgIElucHV0U2lnbmFsPFJlYWRUfHVuZGVmaW5lZCwgV3JpdGVUPjtcbmV4cG9ydCBmdW5jdGlvbiBpbnB1dDxSZWFkVCwgV3JpdGVUPihvcHRzPzogSW5wdXRPcHRpb25zPFJlYWRULCBXcml0ZVQ+KTpcbiAgICBJbnB1dFNpZ25hbDxSZWFkVCwgV3JpdGVUPiB7XG4gIGNvbnN0IG5vZGU6IElucHV0U2lnbmFsTm9kZTxSZWFkVCwgV3JpdGVUPiA9IE9iamVjdC5jcmVhdGUoSU5QVVRfU0lHTkFMX05PREUpO1xuXG4gIG9wdHM/LnRyYW5zZm9ybSAmJiAobm9kZS50cmFuc2Zvcm0gPSBvcHRzLnRyYW5zZm9ybSk7XG4gIG9wdHM/LmluaXRpYWxWYWx1ZSAmJiAobm9kZS52YWx1ZSA9IG5vZGUudHJhbnNmb3JtKG9wdHMuaW5pdGlhbFZhbHVlKSk7XG5cbiAgZnVuY3Rpb24gaW5wdXRWYWx1ZUZuKCkge1xuICAgIC8vIENoZWNrIGlmIHRoZSB2YWx1ZSBuZWVkcyB1cGRhdGluZyBiZWZvcmUgcmV0dXJuaW5nIGl0LlxuICAgIHByb2R1Y2VyVXBkYXRlVmFsdWVWZXJzaW9uKG5vZGUpO1xuXG4gICAgLy8gUmVjb3JkIHRoYXQgc29tZW9uZSBsb29rZWQgYXQgdGhpcyBzaWduYWwuXG4gICAgcHJvZHVjZXJBY2Nlc3NlZChub2RlKTtcblxuICAgIGlmIChub2RlLnZhbHVlID09PSBFUlJPUkVEKSB7XG4gICAgICB0aHJvdyBub2RlLmVycm9yO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlLnZhbHVlO1xuICB9XG5cbiAgKGlucHV0VmFsdWVGbiBhcyBhbnkpW1NJR05BTF0gPSBub2RlO1xuXG4gIHJldHVybiBpbnB1dFZhbHVlRm4gYXMgSW5wdXRTaWduYWw8UmVhZFQsIFdyaXRlVD47XG59XG4iXX0=