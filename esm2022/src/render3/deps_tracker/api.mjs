/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.dev/license
 */
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9kZXBzX3RyYWNrZXIvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmRldi9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2UvdHlwZSc7XG5pbXBvcnQge05nTW9kdWxlVHlwZX0gZnJvbSAnLi4vLi4vbWV0YWRhdGEvbmdfbW9kdWxlX2RlZic7XG5pbXBvcnQge1xuICBDb21wb25lbnRUeXBlLFxuICBEZXBlbmRlbmN5VHlwZUxpc3QsXG4gIERpcmVjdGl2ZVR5cGUsXG4gIE5nTW9kdWxlU2NvcGVJbmZvRnJvbURlY29yYXRvcixcbiAgUGlwZVR5cGUsXG59IGZyb20gJy4uL2ludGVyZmFjZXMvZGVmaW5pdGlvbic7XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgc2V0IG9mIGRlcGVuZGVuY2llcyBvZiBhIHR5cGUgaW4gYSBjZXJ0YWluIGNvbnRleHQuXG4gKi9cbmludGVyZmFjZSBTY29wZURhdGEge1xuICBwaXBlczogU2V0PFBpcGVUeXBlPGFueT4+O1xuICBkaXJlY3RpdmVzOiBTZXQ8RGlyZWN0aXZlVHlwZTxhbnk+IHwgQ29tcG9uZW50VHlwZTxhbnk+IHwgVHlwZTxhbnk+PjtcblxuICAvKipcbiAgICogSWYgdHJ1ZSBpdCBpbmRpY2F0ZXMgdGhhdCBjYWxjdWxhdGluZyB0aGlzIHNjb3BlIHNvbWVob3cgd2FzIG5vdCBzdWNjZXNzZnVsLiBUaGUgY29uc3VtZXJzXG4gICAqIHNob3VsZCBpbnRlcnByZXQgdGhpcyBhcyBlbXB0eSBkZXBlbmRlbmNpZXMuIFRoZSBhcHBsaWNhdGlvbiBvZiB0aGlzIGZsYWcgaXMgd2hlbiBjYWxjdWxhdGluZ1xuICAgKiBzY29wZSByZWN1cnNpdmVseSwgdGhlIHByZXNlbmNlIG9mIHRoaXMgZmxhZyBpbiBhIHNjb3BlIGRlcGVuZGVuY3kgaW1wbGllcyB0aGF0IHRoZSBzY29wZSBpc1xuICAgKiBhbHNvIHBvaXNvbmVkIGFuZCB0aHVzIHdlIGNhbiByZXR1cm4gaW1tZWRpYXRlbHkgd2l0aG91dCBoYXZpbmcgdG8gY29udGludWUgdGhlIHJlY3Vyc2lvbi4gVGhlXG4gICAqIHJlYXNvbiBmb3IgdGhpcyBlcnJvciBpcyBkaXNwbGF5ZWQgYXMgYW4gZXJyb3IgbWVzc2FnZSBpbiB0aGUgY29uc29sZSBhcyBwZXIgSklUIGJlaGF2aW9yXG4gICAqIHRvZGF5LiBJbiBhZGRpdGlvbiB0byB0aGF0LCBpbiBsb2NhbCBjb21waWxhdGlvbiB0aGUgb3RoZXIgYnVpbGQvY29tcGlsYXRpb25zIHJ1biBpbiBwYXJhbGxlbFxuICAgKiB3aXRoIGxvY2FsIGNvbXBpbGF0aW9uIG1heSBvciBtYXkgbm90IHJldmVhbCBzb21lIGRldGFpbHMgYWJvdXQgdGhlIGVycm9yIGFzIHdlbGwuXG4gICAqL1xuICBpc1BvaXNvbmVkPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHNjb3BlIGRhdGEgZm9yIHN0YW5kYWxvbmUgY29tcG9uZW50cyBhcyBjYWxjdWxhdGVkIGR1cmluZyBydW50aW1lIGJ5IHRoZSBkZXBzXG4gKiB0cmFja2VyLlxuICovXG5pbnRlcmZhY2UgU3RhbmRhbG9uZUNvbXBTY29wZURhdGEgZXh0ZW5kcyBTY29wZURhdGEge1xuICAvLyBTdGFuZGFsb25lIGNvbXBvbmVudHMgaW5jbHVkZSB0aGUgaW1wb3J0ZWQgTmdNb2R1bGVzIGluIHRoZWlyIGRlcGVuZGVuY2llcyBpbiBvcmRlciB0b1xuICAvLyBkZXRlcm1pbmUgdGhlaXIgaW5qZWN0b3IgaW5mby4gVGhlIGZvbGxvd2luZyBmaWVsZCBzdG9yZXMgdGhlIHNldCBvZiBzdWNoIE5nTW9kdWxlcy5cbiAgbmdNb2R1bGVzOiBTZXQ8TmdNb2R1bGVUeXBlPGFueT4+O1xufVxuXG4vKiogUmVwcmVzZW50cyBzY29wZSBkYXRhIGZvciBOZ01vZHVsZSBhcyBjYWxjdWxhdGVkIGR1cmluZyBydW50aW1lIGJ5IHRoZSBkZXBzIHRyYWNrZXIuICovXG5leHBvcnQgaW50ZXJmYWNlIE5nTW9kdWxlU2NvcGUge1xuICBjb21waWxhdGlvbjogU2NvcGVEYXRhO1xuICBleHBvcnRlZDogU2NvcGVEYXRhO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgc2NvcGUgZGF0YSBmb3Igc3RhbmRhbG9uZSBjb21wb25lbnQgYXMgY2FsY3VsYXRlZCBkdXJpbmcgcnVudGltZSBieSB0aGUgZGVwcyB0cmFja2VyLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN0YW5kYWxvbmVDb21wb25lbnRTY29wZSB7XG4gIGNvbXBpbGF0aW9uOiBTdGFuZGFsb25lQ29tcFNjb3BlRGF0YTtcbn1cblxuLyoqIENvbXBvbmVudCBkZXBlbmRlbmNpZXMgaW5mbyBhcyBjYWxjdWxhdGVkIGR1cmluZyBydW50aW1lIGJ5IHRoZSBkZXBzIHRyYWNrZXIuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudERlcGVuZGVuY2llcyB7XG4gIGRlcGVuZGVuY2llczogRGVwZW5kZW5jeVR5cGVMaXN0O1xufVxuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIHJ1bnRpbWUgZGVwcyB0cmFja2VyIChSRFQpLlxuICpcbiAqIEFsbCBkb3duc3RyZWFtIHRvb2xzIHNob3VsZCBvbmx5IHVzZSB0aGVzZSBtZXRob2RzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIERlcHNUcmFja2VyQXBpIHtcbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBjb21wb25lbnQgZGVwZW5kZW5jaWVzLCBpLmUuLCBhIHNldCBvZiBjb21wb25lbnRzL2RpcmVjdGl2ZS9waXBlcyB0aGF0IGNvdWxkIGJlXG4gICAqIHByZXNlbnQgaW4gdGhlIGNvbXBvbmVudCdzIHRlbXBsYXRlIChUaGlzIHNldCBtaWdodCBjb250YWluIGRpcmVjdGl2ZXMvY29tcG9uZW50cy9waXBlcyBub3RcbiAgICogbmVjZXNzYXJpbHkgdXNlZCBpbiB0aGUgY29tcG9uZW50J3MgdGVtcGxhdGUgZGVwZW5kaW5nIG9uIHRoZSBpbXBsZW1lbnRhdGlvbikuXG4gICAqXG4gICAqIFN0YW5kYWxvbmUgY29tcG9uZW50cyBzaG91bGQgc3BlY2lmeSBgcmF3SW1wb3J0c2AgYXMgdGhpcyBpbmZvcm1hdGlvbiBpcyBub3QgYXZhaWxhYmxlIGZyb21cbiAgICogdGhlaXIgdHlwZS4gVGhlIGNvbnN1bWVyIChlLmcuLCB7QGxpbmsgZ2V0U3RhbmRhbG9uZURlZkZ1bmN0aW9uc30pIGlzIGV4cGVjdGVkIHRvIHBhc3MgdGhpc1xuICAgKiBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIFRoZSBpbXBsZW1lbnRhdGlvbiBpcyBleHBlY3RlZCB0byB1c2Ugc29tZSBjYWNoaW5nIG1lY2hhbmlzbSBpbiBvcmRlciB0byBvcHRpbWl6ZSB0aGUgcmVzb3VyY2VzXG4gICAqIG5lZWRlZCB0byBkbyB0aGlzIGNvbXB1dGF0aW9uLlxuICAgKi9cbiAgZ2V0Q29tcG9uZW50RGVwZW5kZW5jaWVzKFxuICAgIGNtcDogQ29tcG9uZW50VHlwZTxhbnk+LFxuICAgIHJhd0ltcG9ydHM/OiAoVHlwZTxhbnk+IHwgKCgpID0+IFR5cGU8YW55PikpW10sXG4gICk6IENvbXBvbmVudERlcGVuZGVuY2llcztcblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGFuIE5nTW9kdWxlIGludG8gdGhlIHRyYWNrZXIgd2l0aCB0aGUgZ2l2ZW4gc2NvcGUgaW5mby5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBmb3IgZXZlcnkgTmdNb2R1bGUgd2hldGhlciBpdCBpcyBjb21waWxlZCBpbiBsb2NhbCBtb2RlIG9yIG5vdC5cbiAgICogVGhpcyBpcyBuZWVkZWQgaW4gb3JkZXIgdG8gY29tcHV0ZSBjb21wb25lbnQncyBkZXBlbmRlbmNpZXMgYXMgc29tZSBkZXBlbmRlbmNpZXMgbWlnaHQgYmUgaW5cbiAgICogZGlmZmVyZW50IGNvbXBpbGF0aW9uIHVuaXRzIHdpdGggZGlmZmVyZW50IGNvbXBpbGF0aW9uIG1vZGUuXG4gICAqL1xuICByZWdpc3Rlck5nTW9kdWxlKHR5cGU6IFR5cGU8YW55Piwgc2NvcGVJbmZvOiBOZ01vZHVsZVNjb3BlSW5mb0Zyb21EZWNvcmF0b3IpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIHNjb3BlIGNhY2hlIGZvciBOZ01vZHVsZSBvciBzdGFuZGFsb25lIGNvbXBvbmVudC4gVGhpcyB3aWxsIGZvcmNlIHJlLWNhbGN1bGF0aW9uIG9mXG4gICAqIHRoZSBzY29wZSwgd2hpY2ggY291bGQgYmUgYW4gZXhwZW5zaXZlIG9wZXJhdGlvbiBhcyBpdCBpbnZvbHZlcyBhZ2dyZWdhdGluZyB0cmFuc2l0aXZlIGNsb3N1cmUuXG4gICAqXG4gICAqIFRoZSBtYWluIGFwcGxpY2F0aW9uIG9mIHRoaXMgbWV0aG9kIGlzIGZvciB0ZXN0IGJlZHMgd2hlcmUgd2Ugd2FudCB0byBjbGVhciB0aGUgY2FjaGUgdG9cbiAgICogZW5mb3JjZSBzY29wZSB1cGRhdGUgYWZ0ZXIgb3ZlcnJpZGluZy5cbiAgICovXG4gIGNsZWFyU2NvcGVDYWNoZUZvcih0eXBlOiBUeXBlPGFueT4pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzY29wZSBvZiBOZ01vZHVsZS4gTWFpbmx5IHRvIGJlIHVzZWQgYnkgSklUIGFuZCB0ZXN0IGJlZC5cbiAgICpcbiAgICogVGhlIHNjb3BlIHZhbHVlIGhlcmUgaXMgbWVtb2l6ZWQuIFRvIGVuZm9yY2UgYSBuZXcgY2FsY3VsYXRpb24gYnVzdCB0aGUgY2FjaGUgYnkgdXNpbmdcbiAgICogYGNsZWFyU2NvcGVDYWNoZUZvcmAgbWV0aG9kLlxuICAgKi9cbiAgZ2V0TmdNb2R1bGVTY29wZSh0eXBlOiBOZ01vZHVsZVR5cGU8YW55Pik6IE5nTW9kdWxlU2NvcGU7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHNjb3BlIG9mIHN0YW5kYWxvbmUgY29tcG9uZW50LiBNYWlubHkgdG8gYmUgdXNlZCBieSBKSVQuIFRoaXMgbWV0aG9kIHNob3VsZCBiZVxuICAgKiBjYWxsZWQgbGF6aWx5IGFmdGVyIHRoZSBpbml0aWFsIHBhcnNpbmcgc28gdGhhdCBhbGwgdGhlIGZvcndhcmQgcmVmcyBjYW4gYmUgcmVzb2x2ZWQuXG4gICAqXG4gICAqIEBwYXJhbSByYXdJbXBvcnRzIHRoZSBpbXBvcnRzIHN0YXRlbWVudCBhcyBhcHBlYXJzIG9uIHRoZSBjb21wb25lbnQgZGVjb3JhdGUgd2hpY2ggY29uc2lzdHMgb2ZcbiAgICogICAgIFR5cGUgYXMgd2VsbCBhcyBmb3J3YXJkIHJlZnMuXG4gICAqXG4gICAqIFRoZSBzY29wZSB2YWx1ZSBoZXJlIGlzIG1lbW9pemVkLiBUbyBlbmZvcmNlIGEgbmV3IGNhbGN1bGF0aW9uIGJ1c3QgdGhlIGNhY2hlIGJ5IHVzaW5nXG4gICAqIGBjbGVhclNjb3BlQ2FjaGVGb3JgIG1ldGhvZC5cbiAgICovXG4gIGdldFN0YW5kYWxvbmVDb21wb25lbnRTY29wZShcbiAgICB0eXBlOiBDb21wb25lbnRUeXBlPGFueT4sXG4gICAgcmF3SW1wb3J0czogKFR5cGU8YW55PiB8ICgoKSA9PiBUeXBlPGFueT4pKVtdLFxuICApOiBTdGFuZGFsb25lQ29tcG9uZW50U2NvcGU7XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgTmdNb2R1bGUgZGVjbGFyaW5nIHRoZSBjb21wb25lbnQgaXMgbm90IGxvYWRlZCBpbnRvIHRoZSBicm93c2VyIHlldC4gQWx3YXlzXG4gICAqIHJldHVybnMgZmFsc2UgZm9yIHN0YW5kYWxvbmUgY29tcG9uZW50cy5cbiAgICovXG4gIGlzT3JwaGFuQ29tcG9uZW50KGNtcDogQ29tcG9uZW50VHlwZTxhbnk+KTogYm9vbGVhbjtcbn1cbiJdfQ==