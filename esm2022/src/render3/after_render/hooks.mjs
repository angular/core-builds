/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.dev/license
 */
import { assertInInjectionContext } from '../../di';
import { Injector } from '../../di/injector';
import { inject } from '../../di/injector_compatibility';
import { DestroyRef } from '../../linker/destroy_ref';
import { performanceMarkFeature } from '../../util/performance';
import { assertNotInReactiveContext } from '../reactivity/asserts';
import { isPlatformBrowser } from '../util/misc_utils';
import { AfterRenderPhase } from './api';
import { AfterRenderImpl, AfterRenderManager, AfterRenderSequence, } from './manager';
export function afterRender(callbackOrSpec, options) {
    ngDevMode &&
        assertNotInReactiveContext(afterRender, 'Call `afterRender` outside of a reactive context. For example, schedule the render ' +
            'callback inside the component constructor`.');
    !options?.injector && assertInInjectionContext(afterRender);
    const injector = options?.injector ?? inject(Injector);
    if (!isPlatformBrowser(injector)) {
        return NOOP_AFTER_RENDER_REF;
    }
    performanceMarkFeature('NgAfterRender');
    return afterRenderImpl(callbackOrSpec, injector, options, /* once */ false);
}
export function afterNextRender(callbackOrSpec, options) {
    !options?.injector && assertInInjectionContext(afterNextRender);
    const injector = options?.injector ?? inject(Injector);
    if (!isPlatformBrowser(injector)) {
        return NOOP_AFTER_RENDER_REF;
    }
    performanceMarkFeature('NgAfterNextRender');
    return afterRenderImpl(callbackOrSpec, injector, options, /* once */ true);
}
function getHooks(callbackOrSpec, phase) {
    if (callbackOrSpec instanceof Function) {
        const hooks = [undefined, undefined, undefined, undefined];
        hooks[phase] = callbackOrSpec;
        return hooks;
    }
    else {
        return [
            callbackOrSpec.earlyRead,
            callbackOrSpec.write,
            callbackOrSpec.mixedReadWrite,
            callbackOrSpec.read,
        ];
    }
}
/**
 * Shared implementation for `afterRender` and `afterNextRender`.
 */
function afterRenderImpl(callbackOrSpec, injector, options, once) {
    const manager = injector.get(AfterRenderManager);
    // Lazily initialize the handler implementation, if necessary. This is so that it can be
    // tree-shaken if `afterRender` and `afterNextRender` aren't used.
    manager.impl ??= injector.get(AfterRenderImpl);
    const hooks = options?.phase ?? AfterRenderPhase.MixedReadWrite;
    const sequence = new AfterRenderSequence(manager.impl, getHooks(callbackOrSpec, hooks), once, injector.get(DestroyRef));
    manager.impl.register(sequence);
    return sequence;
}
/** `AfterRenderRef` that does nothing. */
const NOOP_AFTER_RENDER_REF = {
    destroy() { },
};
//# sourceMappingURL=data:application/json;base64,