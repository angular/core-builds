/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.dev/license
 */
import { ENVIRONMENT_INITIALIZER, Injector } from '../di';
import { inject } from '../di/injector_compatibility';
import { GLOBAL_EVENT_DELEGATION, GlobalEventDelegation, JSACTION_EVENT_CONTRACT, initGlobalEventDelegation, } from '../event_delegation_utils';
import { IS_GLOBAL_EVENT_DELEGATION_ENABLED } from '../hydration/tokens';
/**
 * Returns a set of providers required to setup support for event delegation.
 * @param multiContract - Experimental support to provide one event contract
 * when there are multiple binaries on the page.
 */
export function provideGlobalEventDelegation(multiContract = false) {
    return [
        {
            provide: IS_GLOBAL_EVENT_DELEGATION_ENABLED,
            useValue: true,
        },
        {
            provide: ENVIRONMENT_INITIALIZER,
            useValue: () => {
                const injector = inject(Injector);
                const eventContractDetails = injector.get(JSACTION_EVENT_CONTRACT);
                if (multiContract && window.__jsaction_contract) {
                    eventContractDetails.instance = window.__jsaction_contract;
                    return;
                }
                initGlobalEventDelegation(eventContractDetails, injector);
                window.__jsaction_contract = eventContractDetails.instance;
            },
            multi: true,
        },
        {
            provide: GLOBAL_EVENT_DELEGATION,
            useClass: GlobalEventDelegation,
        },
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRfZGVsZWdhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2V2ZW50X2Rpc3BhdGNoL2V2ZW50X2RlbGVnYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0gsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFFBQVEsRUFBQyxNQUFNLE9BQU8sQ0FBQztBQUN4RCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFFcEQsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixxQkFBcUIsRUFDckIsdUJBQXVCLEVBQ3ZCLHlCQUF5QixHQUMxQixNQUFNLDJCQUEyQixDQUFDO0FBRW5DLE9BQU8sRUFBQyxrQ0FBa0MsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBUXZFOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsNEJBQTRCLENBQUMsYUFBYSxHQUFHLEtBQUs7SUFDaEUsT0FBTztRQUNMO1lBQ0UsT0FBTyxFQUFFLGtDQUFrQztZQUMzQyxRQUFRLEVBQUUsSUFBSTtTQUNmO1FBQ0Q7WUFDRSxPQUFPLEVBQUUsdUJBQXVCO1lBQ2hDLFFBQVEsRUFBRSxHQUFHLEVBQUU7Z0JBQ2IsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNsQyxNQUFNLG9CQUFvQixHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztnQkFDbkUsSUFBSSxhQUFhLElBQUksTUFBTSxDQUFDLG1CQUFtQixFQUFFLENBQUM7b0JBQ2hELG9CQUFvQixDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUM7b0JBQzNELE9BQU87Z0JBQ1QsQ0FBQztnQkFDRCx5QkFBeUIsQ0FBQyxvQkFBb0IsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDMUQsTUFBTSxDQUFDLG1CQUFtQixHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQztZQUM3RCxDQUFDO1lBQ0QsS0FBSyxFQUFFLElBQUk7U0FDWjtRQUNEO1lBQ0UsT0FBTyxFQUFFLHVCQUF1QjtZQUNoQyxRQUFRLEVBQUUscUJBQXFCO1NBQ2hDO0tBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5kZXYvbGljZW5zZVxuICovXG5cbmltcG9ydCB7RXZlbnRDb250cmFjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9wcmltaXRpdmVzL2V2ZW50LWRpc3BhdGNoJztcbmltcG9ydCB7RU5WSVJPTk1FTlRfSU5JVElBTElaRVIsIEluamVjdG9yfSBmcm9tICcuLi9kaSc7XG5pbXBvcnQge2luamVjdH0gZnJvbSAnLi4vZGkvaW5qZWN0b3JfY29tcGF0aWJpbGl0eSc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICcuLi9kaS9pbnRlcmZhY2UvcHJvdmlkZXInO1xuaW1wb3J0IHtcbiAgR0xPQkFMX0VWRU5UX0RFTEVHQVRJT04sXG4gIEdsb2JhbEV2ZW50RGVsZWdhdGlvbixcbiAgSlNBQ1RJT05fRVZFTlRfQ09OVFJBQ1QsXG4gIGluaXRHbG9iYWxFdmVudERlbGVnYXRpb24sXG59IGZyb20gJy4uL2V2ZW50X2RlbGVnYXRpb25fdXRpbHMnO1xuXG5pbXBvcnQge0lTX0dMT0JBTF9FVkVOVF9ERUxFR0FUSU9OX0VOQUJMRUR9IGZyb20gJy4uL2h5ZHJhdGlvbi90b2tlbnMnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIF9fanNhY3Rpb25fY29udHJhY3Q6IEV2ZW50Q29udHJhY3QgfCB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2V0IG9mIHByb3ZpZGVycyByZXF1aXJlZCB0byBzZXR1cCBzdXBwb3J0IGZvciBldmVudCBkZWxlZ2F0aW9uLlxuICogQHBhcmFtIG11bHRpQ29udHJhY3QgLSBFeHBlcmltZW50YWwgc3VwcG9ydCB0byBwcm92aWRlIG9uZSBldmVudCBjb250cmFjdFxuICogd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgYmluYXJpZXMgb24gdGhlIHBhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlR2xvYmFsRXZlbnREZWxlZ2F0aW9uKG11bHRpQ29udHJhY3QgPSBmYWxzZSk6IFByb3ZpZGVyW10ge1xuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IElTX0dMT0JBTF9FVkVOVF9ERUxFR0FUSU9OX0VOQUJMRUQsXG4gICAgICB1c2VWYWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEVOVklST05NRU5UX0lOSVRJQUxJWkVSLFxuICAgICAgdXNlVmFsdWU6ICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5qZWN0b3IgPSBpbmplY3QoSW5qZWN0b3IpO1xuICAgICAgICBjb25zdCBldmVudENvbnRyYWN0RGV0YWlscyA9IGluamVjdG9yLmdldChKU0FDVElPTl9FVkVOVF9DT05UUkFDVCk7XG4gICAgICAgIGlmIChtdWx0aUNvbnRyYWN0ICYmIHdpbmRvdy5fX2pzYWN0aW9uX2NvbnRyYWN0KSB7XG4gICAgICAgICAgZXZlbnRDb250cmFjdERldGFpbHMuaW5zdGFuY2UgPSB3aW5kb3cuX19qc2FjdGlvbl9jb250cmFjdDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaW5pdEdsb2JhbEV2ZW50RGVsZWdhdGlvbihldmVudENvbnRyYWN0RGV0YWlscywgaW5qZWN0b3IpO1xuICAgICAgICB3aW5kb3cuX19qc2FjdGlvbl9jb250cmFjdCA9IGV2ZW50Q29udHJhY3REZXRhaWxzLmluc3RhbmNlO1xuICAgICAgfSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogR0xPQkFMX0VWRU5UX0RFTEVHQVRJT04sXG4gICAgICB1c2VDbGFzczogR2xvYmFsRXZlbnREZWxlZ2F0aW9uLFxuICAgIH0sXG4gIF07XG59XG4iXX0=