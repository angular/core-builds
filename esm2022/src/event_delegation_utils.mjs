/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-duplicate-imports
import { EventContract, EventContractContainer, EventDispatcher, isEarlyEventType, getActionCache, registerDispatcher, } from '@angular/core/primitives/event-dispatch';
import { Attribute } from '@angular/core/primitives/event-dispatch';
import { Injectable, InjectionToken, inject } from './di';
import { EVENT_REPLAY_ENABLED_DEFAULT, IS_EVENT_REPLAY_ENABLED } from './hydration/tokens';
import * as i0 from "./r3_symbols";
export function invokeRegisteredListeners(event) {
    const handlerFns = event.currentTarget?.__jsaction_fns?.get(event.type);
    if (!handlerFns) {
        return;
    }
    for (const handler of handlerFns) {
        handler(event);
    }
}
export function setJSActionAttributes(nativeElement, eventTypes) {
    if (!eventTypes.length) {
        return;
    }
    const parts = eventTypes.reduce((prev, curr) => prev + curr + ':;', '');
    const existingAttr = nativeElement.getAttribute(Attribute.JSACTION);
    nativeElement.setAttribute(Attribute.JSACTION, `${existingAttr ?? ''}${parts}`);
}
export const sharedStashFunction = (rEl, eventType, listenerFn) => {
    const el = rEl;
    const eventListenerMap = el.__jsaction_fns ?? new Map();
    const eventListeners = eventListenerMap.get(eventType) ?? [];
    eventListeners.push(listenerFn);
    eventListenerMap.set(eventType, eventListeners);
    el.__jsaction_fns = eventListenerMap;
};
export const removeListeners = (el) => {
    el.removeAttribute(Attribute.JSACTION);
    el.__jsaction_fns = undefined;
};
export const JSACTION_EVENT_CONTRACT = new InjectionToken(ngDevMode ? 'EVENT_CONTRACT_DETAILS' : '', {
    providedIn: 'root',
    factory: () => ({}),
});
export const GLOBAL_EVENT_DELEGATION = new InjectionToken(ngDevMode ? 'GLOBAL_EVENT_DELEGATION' : '');
/**
 * This class is the delegate for `EventDelegationPlugin`. It represents the
 * noop version of this class, with the enabled version set when
 * `provideGlobalEventDelegation` is called.
 */
export class GlobalEventDelegation {
    constructor() {
        this.eventContractDetails = inject(JSACTION_EVENT_CONTRACT);
    }
    ngOnDestroy() {
        this.eventContractDetails.instance?.cleanUp();
    }
    supports(eventType) {
        return isEarlyEventType(eventType);
    }
    addEventListener(element, eventType, handler) {
        // Note: contrary to the type, Window and Document can be passed in
        // as well.
        if (element.nodeType === Node.ELEMENT_NODE) {
            this.eventContractDetails.instance.addEvent(eventType);
            getActionCache(element)[eventType] = '';
            sharedStashFunction(element, eventType, handler);
        }
        else {
            element.addEventListener(eventType, handler);
        }
        return () => this.removeEventListener(element, eventType, handler);
    }
    removeEventListener(element, eventType, callback) {
        if (element.nodeType === Node.ELEMENT_NODE) {
            getActionCache(element)[eventType] = undefined;
        }
        else {
            element.removeEventListener(eventType, callback);
        }
    }
    static { this.ɵfac = function GlobalEventDelegation_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || GlobalEventDelegation)(); }; }
    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: GlobalEventDelegation, factory: GlobalEventDelegation.ɵfac }); }
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.setClassMetadata(GlobalEventDelegation, [{
        type: Injectable
    }], null, null); })();
export const initGlobalEventDelegation = (eventContractDetails, injector) => {
    if (injector.get(IS_EVENT_REPLAY_ENABLED, EVENT_REPLAY_ENABLED_DEFAULT)) {
        return;
    }
    const eventContract = (eventContractDetails.instance = new EventContract(new EventContractContainer(document.body)));
    const dispatcher = new EventDispatcher(invokeRegisteredListeners, /** clickModSupport */ false);
    registerDispatcher(eventContract, dispatcher);
};
//# sourceMappingURL=data:application/json;base64,