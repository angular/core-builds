/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { EventContractContainer } from './event_contract_container';
import { EventContract } from './eventcontract';
/**
 * Provides a factory function for bootstrapping an event contract on a
 * window object.
 * @param field The property on the window that the event contract will be placed on.
 * @param container The container that listens to events
 * @param appId A given identifier for an application. If there are multiple apps on the page
 *              then this is how contracts can be initialized for each one.
 * @param events An array of event names that should be listened to.
 * @param anyWindow The global window object that should receive the event contract.
 * @returns The `event` contract. This is both assigned to `anyWindow` and returned for testing.
 */
export function bootstrapEventContract(field, container, appId, events, anyWindow = window) {
    if (!anyWindow[field]) {
        anyWindow[field] = {};
    }
    const eventContract = new EventContract(new EventContractContainer(container));
    anyWindow[field][appId] = eventContract;
    for (const ev of events) {
        eventContract.addEvent(ev);
    }
    return eventContract;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXJfZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9wcmltaXRpdmVzL2V2ZW50LWRpc3BhdGNoL3NyYy9yZWdpc3Rlcl9ldmVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDbEUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTlDOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLEtBQWEsRUFDYixTQUFrQixFQUNsQixLQUFhLEVBQ2IsTUFBZ0IsRUFDaEIsWUFBaUIsTUFBTTtJQUV2QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDdEIsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBQ0QsTUFBTSxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQy9FLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxhQUFhLENBQUM7SUFDeEMsS0FBSyxNQUFNLEVBQUUsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUN4QixhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFDRCxPQUFPLGFBQWEsQ0FBQztBQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7RXZlbnRDb250cmFjdENvbnRhaW5lcn0gZnJvbSAnLi9ldmVudF9jb250cmFjdF9jb250YWluZXInO1xuaW1wb3J0IHtFdmVudENvbnRyYWN0fSBmcm9tICcuL2V2ZW50Y29udHJhY3QnO1xuXG4vKipcbiAqIFByb3ZpZGVzIGEgZmFjdG9yeSBmdW5jdGlvbiBmb3IgYm9vdHN0cmFwcGluZyBhbiBldmVudCBjb250cmFjdCBvbiBhXG4gKiB3aW5kb3cgb2JqZWN0LlxuICogQHBhcmFtIGZpZWxkIFRoZSBwcm9wZXJ0eSBvbiB0aGUgd2luZG93IHRoYXQgdGhlIGV2ZW50IGNvbnRyYWN0IHdpbGwgYmUgcGxhY2VkIG9uLlxuICogQHBhcmFtIGNvbnRhaW5lciBUaGUgY29udGFpbmVyIHRoYXQgbGlzdGVucyB0byBldmVudHNcbiAqIEBwYXJhbSBhcHBJZCBBIGdpdmVuIGlkZW50aWZpZXIgZm9yIGFuIGFwcGxpY2F0aW9uLiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgYXBwcyBvbiB0aGUgcGFnZVxuICogICAgICAgICAgICAgIHRoZW4gdGhpcyBpcyBob3cgY29udHJhY3RzIGNhbiBiZSBpbml0aWFsaXplZCBmb3IgZWFjaCBvbmUuXG4gKiBAcGFyYW0gZXZlbnRzIEFuIGFycmF5IG9mIGV2ZW50IG5hbWVzIHRoYXQgc2hvdWxkIGJlIGxpc3RlbmVkIHRvLlxuICogQHBhcmFtIGFueVdpbmRvdyBUaGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QgdGhhdCBzaG91bGQgcmVjZWl2ZSB0aGUgZXZlbnQgY29udHJhY3QuXG4gKiBAcmV0dXJucyBUaGUgYGV2ZW50YCBjb250cmFjdC4gVGhpcyBpcyBib3RoIGFzc2lnbmVkIHRvIGBhbnlXaW5kb3dgIGFuZCByZXR1cm5lZCBmb3IgdGVzdGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJvb3RzdHJhcEV2ZW50Q29udHJhY3QoXG4gIGZpZWxkOiBzdHJpbmcsXG4gIGNvbnRhaW5lcjogRWxlbWVudCxcbiAgYXBwSWQ6IHN0cmluZyxcbiAgZXZlbnRzOiBzdHJpbmdbXSxcbiAgYW55V2luZG93OiBhbnkgPSB3aW5kb3csXG4pIHtcbiAgaWYgKCFhbnlXaW5kb3dbZmllbGRdKSB7XG4gICAgYW55V2luZG93W2ZpZWxkXSA9IHt9O1xuICB9XG4gIGNvbnN0IGV2ZW50Q29udHJhY3QgPSBuZXcgRXZlbnRDb250cmFjdChuZXcgRXZlbnRDb250cmFjdENvbnRhaW5lcihjb250YWluZXIpKTtcbiAgYW55V2luZG93W2ZpZWxkXVthcHBJZF0gPSBldmVudENvbnRyYWN0O1xuICBmb3IgKGNvbnN0IGV2IG9mIGV2ZW50cykge1xuICAgIGV2ZW50Q29udHJhY3QuYWRkRXZlbnQoZXYpO1xuICB9XG4gIHJldHVybiBldmVudENvbnRyYWN0O1xufVxuIl19