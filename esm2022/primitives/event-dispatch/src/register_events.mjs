/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { EarlyEventContract } from './earlyeventcontract';
import { EventContractContainer } from './event_contract_container';
import { EventContract } from './eventcontract';
/**
 * Provides a factory function for bootstrapping an event contract on a
 * specified object (by default, exposed on the `window`).
 * @param field The property on the object that the event contract will be placed on.
 * @param container The container that listens to events
 * @param appId A given identifier for an application. If there are multiple apps on the page
 *              then this is how contracts can be initialized for each one.
 * @param events An array of event names that should be listened to.
 * @param earlyJsactionTracker The object that should receive the event contract.
 */
export function bootstrapEventContract(field, container, appId, events, earlyJsactionTracker = window) {
    if (!earlyJsactionTracker[field]) {
        earlyJsactionTracker[field] = {};
    }
    const eventContract = new EventContract(new EventContractContainer(container));
    earlyJsactionTracker[field][appId] = eventContract;
    for (const ev of events) {
        eventContract.addEvent(ev);
    }
}
/**
 * Provides a factory function for bootstrapping an event contract on a
 * specified object (by default, exposed on the `window`).
 * @param field The property on the object that the event contract will be placed on.
 * @param container The container that listens to events
 * @param appId A given identifier for an application. If there are multiple apps on the page
 *              then this is how contracts can be initialized for each one.
 * @param eventTypes An array of event names that should be listened to.
 * @param captureEventTypes An array of event names that should be listened to with capture.
 * @param earlyJsactionTracker The object that should receive the event contract.
 */
export function bootstrapEarlyEventContract(field, container, appId, eventTypes, captureEventTypes, earlyJsactionTracker = window) {
    if (!earlyJsactionTracker[field]) {
        earlyJsactionTracker[field] = {};
    }
    earlyJsactionTracker[field][appId] = {};
    const eventContract = new EarlyEventContract(earlyJsactionTracker[field][appId], container);
    eventContract.addEvents(eventTypes);
    eventContract.addEvents(captureEventTypes, true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXJfZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9wcmltaXRpdmVzL2V2ZW50LWRpc3BhdGNoL3NyYy9yZWdpc3Rlcl9ldmVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLGtCQUFrQixFQUE2QixNQUFNLHNCQUFzQixDQUFDO0FBQ3BGLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUk5Qzs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLEtBQWEsRUFDYixTQUFrQixFQUNsQixLQUFhLEVBQ2IsTUFBZ0IsRUFDaEIsdUJBQTRELE1BQXdEO0lBRXBILElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ2pDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsTUFBTSxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQy9FLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLGFBQWEsQ0FBQztJQUNuRCxLQUFLLE1BQU0sRUFBRSxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ3hCLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsQ0FBQztBQUNILENBQUM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBTSxVQUFVLDJCQUEyQixDQUN6QyxLQUFhLEVBQ2IsU0FBc0IsRUFDdEIsS0FBYSxFQUNiLFVBQW9CLEVBQ3BCLGlCQUEyQixFQUMzQix1QkFBeUUsTUFBcUU7SUFFOUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDakMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFDRCxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDeEMsTUFBTSxhQUFhLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM1RixhQUFhLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDLGFBQWEsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0Vhcmx5RXZlbnRDb250cmFjdCwgRWFybHlKc2FjdGlvbkRhdGFDb250YWluZXJ9IGZyb20gJy4vZWFybHlldmVudGNvbnRyYWN0JztcbmltcG9ydCB7RXZlbnRDb250cmFjdENvbnRhaW5lcn0gZnJvbSAnLi9ldmVudF9jb250cmFjdF9jb250YWluZXInO1xuaW1wb3J0IHtFdmVudENvbnRyYWN0fSBmcm9tICcuL2V2ZW50Y29udHJhY3QnO1xuXG5leHBvcnQgdHlwZSBFdmVudENvbnRyYWN0VHJhY2tlcjxUPiA9IHtba2V5OiBzdHJpbmddOiB7W2FwcElkOiBzdHJpbmddOiBUfX07XG5cbi8qKlxuICogUHJvdmlkZXMgYSBmYWN0b3J5IGZ1bmN0aW9uIGZvciBib290c3RyYXBwaW5nIGFuIGV2ZW50IGNvbnRyYWN0IG9uIGFcbiAqIHNwZWNpZmllZCBvYmplY3QgKGJ5IGRlZmF1bHQsIGV4cG9zZWQgb24gdGhlIGB3aW5kb3dgKS5cbiAqIEBwYXJhbSBmaWVsZCBUaGUgcHJvcGVydHkgb24gdGhlIG9iamVjdCB0aGF0IHRoZSBldmVudCBjb250cmFjdCB3aWxsIGJlIHBsYWNlZCBvbi5cbiAqIEBwYXJhbSBjb250YWluZXIgVGhlIGNvbnRhaW5lciB0aGF0IGxpc3RlbnMgdG8gZXZlbnRzXG4gKiBAcGFyYW0gYXBwSWQgQSBnaXZlbiBpZGVudGlmaWVyIGZvciBhbiBhcHBsaWNhdGlvbi4gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGFwcHMgb24gdGhlIHBhZ2VcbiAqICAgICAgICAgICAgICB0aGVuIHRoaXMgaXMgaG93IGNvbnRyYWN0cyBjYW4gYmUgaW5pdGlhbGl6ZWQgZm9yIGVhY2ggb25lLlxuICogQHBhcmFtIGV2ZW50cyBBbiBhcnJheSBvZiBldmVudCBuYW1lcyB0aGF0IHNob3VsZCBiZSBsaXN0ZW5lZCB0by5cbiAqIEBwYXJhbSBlYXJseUpzYWN0aW9uVHJhY2tlciBUaGUgb2JqZWN0IHRoYXQgc2hvdWxkIHJlY2VpdmUgdGhlIGV2ZW50IGNvbnRyYWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYm9vdHN0cmFwRXZlbnRDb250cmFjdChcbiAgZmllbGQ6IHN0cmluZyxcbiAgY29udGFpbmVyOiBFbGVtZW50LFxuICBhcHBJZDogc3RyaW5nLFxuICBldmVudHM6IHN0cmluZ1tdLFxuICBlYXJseUpzYWN0aW9uVHJhY2tlcjogRXZlbnRDb250cmFjdFRyYWNrZXI8RXZlbnRDb250cmFjdD4gPSB3aW5kb3cgYXMgdW5rbm93biBhcyBFdmVudENvbnRyYWN0VHJhY2tlcjxFdmVudENvbnRyYWN0Pixcbikge1xuICBpZiAoIWVhcmx5SnNhY3Rpb25UcmFja2VyW2ZpZWxkXSkge1xuICAgIGVhcmx5SnNhY3Rpb25UcmFja2VyW2ZpZWxkXSA9IHt9O1xuICB9XG4gIGNvbnN0IGV2ZW50Q29udHJhY3QgPSBuZXcgRXZlbnRDb250cmFjdChuZXcgRXZlbnRDb250cmFjdENvbnRhaW5lcihjb250YWluZXIpKTtcbiAgZWFybHlKc2FjdGlvblRyYWNrZXJbZmllbGRdW2FwcElkXSA9IGV2ZW50Q29udHJhY3Q7XG4gIGZvciAoY29uc3QgZXYgb2YgZXZlbnRzKSB7XG4gICAgZXZlbnRDb250cmFjdC5hZGRFdmVudChldik7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm92aWRlcyBhIGZhY3RvcnkgZnVuY3Rpb24gZm9yIGJvb3RzdHJhcHBpbmcgYW4gZXZlbnQgY29udHJhY3Qgb24gYVxuICogc3BlY2lmaWVkIG9iamVjdCAoYnkgZGVmYXVsdCwgZXhwb3NlZCBvbiB0aGUgYHdpbmRvd2ApLlxuICogQHBhcmFtIGZpZWxkIFRoZSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0IHRoYXQgdGhlIGV2ZW50IGNvbnRyYWN0IHdpbGwgYmUgcGxhY2VkIG9uLlxuICogQHBhcmFtIGNvbnRhaW5lciBUaGUgY29udGFpbmVyIHRoYXQgbGlzdGVucyB0byBldmVudHNcbiAqIEBwYXJhbSBhcHBJZCBBIGdpdmVuIGlkZW50aWZpZXIgZm9yIGFuIGFwcGxpY2F0aW9uLiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgYXBwcyBvbiB0aGUgcGFnZVxuICogICAgICAgICAgICAgIHRoZW4gdGhpcyBpcyBob3cgY29udHJhY3RzIGNhbiBiZSBpbml0aWFsaXplZCBmb3IgZWFjaCBvbmUuXG4gKiBAcGFyYW0gZXZlbnRUeXBlcyBBbiBhcnJheSBvZiBldmVudCBuYW1lcyB0aGF0IHNob3VsZCBiZSBsaXN0ZW5lZCB0by5cbiAqIEBwYXJhbSBjYXB0dXJlRXZlbnRUeXBlcyBBbiBhcnJheSBvZiBldmVudCBuYW1lcyB0aGF0IHNob3VsZCBiZSBsaXN0ZW5lZCB0byB3aXRoIGNhcHR1cmUuXG4gKiBAcGFyYW0gZWFybHlKc2FjdGlvblRyYWNrZXIgVGhlIG9iamVjdCB0aGF0IHNob3VsZCByZWNlaXZlIHRoZSBldmVudCBjb250cmFjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJvb3RzdHJhcEVhcmx5RXZlbnRDb250cmFjdChcbiAgZmllbGQ6IHN0cmluZyxcbiAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgYXBwSWQ6IHN0cmluZyxcbiAgZXZlbnRUeXBlczogc3RyaW5nW10sXG4gIGNhcHR1cmVFdmVudFR5cGVzOiBzdHJpbmdbXSxcbiAgZWFybHlKc2FjdGlvblRyYWNrZXI6IEV2ZW50Q29udHJhY3RUcmFja2VyPEVhcmx5SnNhY3Rpb25EYXRhQ29udGFpbmVyPiA9IHdpbmRvdyBhcyB1bmtub3duIGFzIEV2ZW50Q29udHJhY3RUcmFja2VyPEVhcmx5SnNhY3Rpb25EYXRhQ29udGFpbmVyPixcbikge1xuICBpZiAoIWVhcmx5SnNhY3Rpb25UcmFja2VyW2ZpZWxkXSkge1xuICAgIGVhcmx5SnNhY3Rpb25UcmFja2VyW2ZpZWxkXSA9IHt9O1xuICB9XG4gIGVhcmx5SnNhY3Rpb25UcmFja2VyW2ZpZWxkXVthcHBJZF0gPSB7fTtcbiAgY29uc3QgZXZlbnRDb250cmFjdCA9IG5ldyBFYXJseUV2ZW50Q29udHJhY3QoZWFybHlKc2FjdGlvblRyYWNrZXJbZmllbGRdW2FwcElkXSwgY29udGFpbmVyKTtcbiAgZXZlbnRDb250cmFjdC5hZGRFdmVudHMoZXZlbnRUeXBlcyk7XG4gIGV2ZW50Q29udHJhY3QuYWRkRXZlbnRzKGNhcHR1cmVFdmVudFR5cGVzLCB0cnVlKTtcbn1cbiJdfQ==