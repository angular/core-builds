{"version":3,"file":"event-dispatch.mjs","sources":["../../../../../../../packages/core/primitives/event-dispatch/src/accessibility.ts","../../../../../../../packages/core/primitives/event-dispatch/src/dom.ts","../../../../../../../packages/core/primitives/event-dispatch/src/event_type.ts","../../../../../../../packages/core/primitives/event-dispatch/src/key_code.ts","../../../../../../../packages/core/primitives/event-dispatch/src/event.ts","../../../../../../../packages/core/primitives/event-dispatch/src/event_info.ts","../../../../../../../packages/core/primitives/event-dispatch/src/custom_events.ts","../../../../../../../packages/core/primitives/event-dispatch/src/replay.ts","../../../../../../../packages/core/primitives/event-dispatch/src/restriction.ts","../../../../../../../packages/core/primitives/event-dispatch/src/base_dispatcher.ts","../../../../../../../packages/core/primitives/event-dispatch/src/char.ts","../../../../../../../packages/core/primitives/event-dispatch/src/dispatcher.ts","../../../../../../../packages/core/primitives/event-dispatch/src/event_contract_container.ts","../../../../../../../packages/core/primitives/event-dispatch/src/a11y_click.ts","../../../../../../../packages/core/primitives/event-dispatch/src/attribute.ts","../../../../../../../packages/core/primitives/event-dispatch/src/property.ts","../../../../../../../packages/core/primitives/event-dispatch/src/cache.ts","../../../../../../../packages/core/primitives/event-dispatch/src/event_contract_defines.ts","../../../../../../../packages/core/primitives/event-dispatch/src/eventcontract.ts","../../../../../../../packages/core/primitives/event-dispatch/src/register_events.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Defines special EventInfo and Event properties used when\n * A11Y_SUPPORT_IN_DISPATCHER is enabled.\n */\nexport enum Attribute {\n  /**\n   * An event-type set when the event contract detects a KEYDOWN event but\n   * doesn't know if the key press can be treated like a click. The dispatcher\n   * will use this event-type to parse the keypress and handle it accordingly.\n   */\n  MAYBE_CLICK_EVENT_TYPE = 'maybe_click',\n\n  /**\n   * A property added to a dispatched event that had the MAYBE_CLICK_EVENTTYPE\n   * event-type but could not be used as a click. The dispatcher sets this\n   * property for non-global dispatches before it retriggers the event and it\n   * signifies that the event contract should not dispatch this event globally.\n   */\n  SKIP_GLOBAL_DISPATCH = 'a11ysgd',\n\n  /**\n   * A property added to a dispatched event that had the MAYBE_CLICK_EVENTTYPE\n   * event-type but could not be used as a click. The dispatcher sets this\n   * property before it retriggers the event and it signifies that the event\n   * contract should not look at CLICK actions for KEYDOWN events.\n   */\n  SKIP_A11Y_CHECK = 'a11ysc',\n}\n\ndeclare global {\n  interface Event {\n    [Attribute.MAYBE_CLICK_EVENT_TYPE]?: boolean;\n    [Attribute.SKIP_GLOBAL_DISPATCH]?: boolean;\n    [Attribute.SKIP_A11Y_CHECK]?: boolean;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Determines if one node is contained within another. Adapted from\n * {@see goog.dom.contains}.\n * @param node Node that should contain otherNode.\n * @param otherNode Node being contained.\n * @return True if otherNode is contained within node.\n */\nexport function contains(node: Node, otherNode: Node | null): boolean {\n  if (otherNode === null) {\n    return false;\n  }\n\n  // We use browser specific methods for this if available since it is faster\n  // that way.\n\n  // IE DOM\n  if ('contains' in node && otherNode.nodeType === 1) {\n    return node.contains(otherNode);\n  }\n\n  // W3C DOM Level 3\n  if ('compareDocumentPosition' in node) {\n    return node === otherNode || Boolean(node.compareDocumentPosition(otherNode) & 16);\n  }\n\n  // W3C DOM Level 1\n  while (otherNode && node !== otherNode) {\n    otherNode = otherNode.parentNode;\n  }\n  return otherNode === node;\n}\n\n/**\n * Helper method for broadcastCustomEvent. Returns true if any member of\n * the set is an ancestor of element.\n */\nexport function hasAncestorInNodeList(element: Element, nodeList: NodeList): boolean {\n  for (let idx = 0; idx < nodeList.length; ++idx) {\n    const member = nodeList[idx];\n    if (member !== element && contains(member, element)) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/*\n * Names of events that are special to jsaction. These are not all\n * event types that are legal to use in either HTML or the addEvent()\n * API, but these are the ones that are treated specially. All other\n * DOM events can be used in either addEvent() or in the value of the\n * jsaction attribute. Beware of browser specific events or events\n * that don't bubble though: If they are not mentioned here, then\n * event contract doesn't work around their peculiarities.\n */\nexport const EventType = {\n  /**\n   * Mouse middle click, introduced in Chrome 55 and not yet supported on\n   * other browsers.\n   */\n  AUXCLICK: 'auxclick',\n\n  /**\n   * The change event fired by browsers when the `value` attribute of input,\n   * select, and textarea elements are changed.\n   */\n  CHANGE: 'change',\n\n  /**\n   * The click event. In addEvent() refers to all click events, in the\n   * jsaction attribute it refers to the unmodified click and Enter/Space\n   * keypress events.  In the latter case, a jsaction click will be triggered,\n   * for accessibility reasons.  See clickmod and clickonly, below.\n   */\n  CLICK: 'click',\n\n  /**\n   * Specifies the jsaction for a modified click event (i.e. a mouse\n   * click with the modifier key Cmd/Ctrl pressed). This event isn't\n   * separately enabled in addEvent(), because in the DOM, it's just a\n   * click event.\n   */\n  CLICKMOD: 'clickmod',\n\n  /**\n   * Specifies the jsaction for a click-only event.  Click-only doesn't take\n   * into account the case where an element with focus receives an Enter/Space\n   * keypress.  This event isn't separately enabled in addEvent().\n   */\n  CLICKONLY: 'clickonly',\n\n  /**\n   * The dblclick event.\n   */\n  DBLCLICK: 'dblclick',\n\n  /**\n   * Focus doesn't bubble, but you can use it in addEvent() and\n   * jsaction anyway. EventContract does the right thing under the\n   * hood.\n   */\n  FOCUS: 'focus',\n\n  /**\n   * This event only exists in IE. For addEvent() and jsaction, use\n   * focus instead; EventContract does the right thing even though\n   * focus doesn't bubble.\n   */\n  FOCUSIN: 'focusin',\n\n  /**\n   * Analog to focus.\n   */\n  BLUR: 'blur',\n\n  /**\n   * Analog to focusin.\n   */\n  FOCUSOUT: 'focusout',\n\n  /**\n   * Submit doesn't bubble, so it cannot be used with event\n   * contract. However, the browser helpfully fires a click event on\n   * the submit button of a form (even if the form is not submitted by\n   * a click on the submit button). So you should handle click on the\n   * submit button instead.\n   */\n  SUBMIT: 'submit',\n\n  /**\n   * The keydown event. In addEvent() and non-click jsaction it represents the\n   * regular DOM keydown event. It represents click actions in non-Gecko\n   * browsers.\n   */\n  KEYDOWN: 'keydown',\n\n  /**\n   * The keypress event. In addEvent() and non-click jsaction it represents the\n   * regular DOM keypress event. It represents click actions in Gecko browsers.\n   */\n  KEYPRESS: 'keypress',\n\n  /**\n   * The keyup event. In addEvent() and non-click jsaction it represents the\n   * regular DOM keyup event. It represents click actions in non-Gecko\n   * browsers.\n   */\n  KEYUP: 'keyup',\n\n  /**\n   * The mouseup event. Can either be used directly or used implicitly to\n   * capture mouseup events. In addEvent(), it represents a regular DOM\n   * mouseup event.\n   */\n  MOUSEUP: 'mouseup',\n\n  /**\n   * The mousedown event. Can either be used directly or used implicitly to\n   * capture mouseenter events. In addEvent(), it represents a regular DOM\n   * mouseover event.\n   */\n  MOUSEDOWN: 'mousedown',\n\n  /**\n   * The mouseover event. Can either be used directly or used implicitly to\n   * capture mouseenter events. In addEvent(), it represents a regular DOM\n   * mouseover event.\n   */\n  MOUSEOVER: 'mouseover',\n\n  /**\n   * The mouseout event. Can either be used directly or used implicitly to\n   * capture mouseover events. In addEvent(), it represents a regular DOM\n   * mouseout event.\n   */\n  MOUSEOUT: 'mouseout',\n\n  /**\n   * The mouseenter event. Does not bubble and fires individually on each\n   * element being entered within a DOM tree.\n   */\n  MOUSEENTER: 'mouseenter',\n\n  /**\n   * The mouseleave event. Does not bubble and fires individually on each\n   * element being entered within a DOM tree.\n   */\n  MOUSELEAVE: 'mouseleave',\n\n  /**\n   * The mousemove event.\n   */\n  MOUSEMOVE: 'mousemove',\n\n  /**\n   * The pointerup event. Can either be used directly or used implicitly to\n   * capture pointerup events. In addEvent(), it represents a regular DOM\n   * pointerup event.\n   */\n  POINTERUP: 'pointerup',\n\n  /**\n   * The pointerdown event. Can either be used directly or used implicitly to\n   * capture pointerenter events. In addEvent(), it represents a regular DOM\n   * mouseover event.\n   */\n  POINTERDOWN: 'pointerdown',\n\n  /**\n   * The pointerover event. Can either be used directly or used implicitly to\n   * capture pointerenter events. In addEvent(), it represents a regular DOM\n   * pointerover event.\n   */\n  POINTEROVER: 'pointerover',\n\n  /**\n   * The pointerout event. Can either be used directly or used implicitly to\n   * capture pointerover events. In addEvent(), it represents a regular DOM\n   * pointerout event.\n   */\n  POINTEROUT: 'pointerout',\n\n  /**\n   * The pointerenter event. Does not bubble and fires individually on each\n   * element being entered within a DOM tree.\n   */\n  POINTERENTER: 'pointerenter',\n\n  /**\n   * The pointerleave event. Does not bubble and fires individually on each\n   * element being entered within a DOM tree.\n   */\n  POINTERLEAVE: 'pointerleave',\n\n  /**\n   * The pointermove event.\n   */\n  POINTERMOVE: 'pointermove',\n\n  /**\n   * The pointercancel event.\n   */\n  POINTERCANCEL: 'pointercancel',\n\n  /**\n   * The gotpointercapture event is fired when\n   * Element.setPointerCapture(pointerId) is called on a mouse input, or\n   * implicitly when a touch input begins.\n   */\n  GOTPOINTERCAPTURE: 'gotpointercapture',\n\n  /**\n   * The lostpointercapture event is fired when\n   * Element.releasePointerCapture(pointerId) is called, or implicitly after a\n   * touch input ends.\n   */\n  LOSTPOINTERCAPTURE: 'lostpointercapture',\n\n  /**\n   * The error event. The error event doesn't bubble, but you can use it in\n   * addEvent() and jsaction anyway. EventContract does the right thing under\n   * the hood (except in IE8 which does not use error events).\n   */\n  ERROR: 'error',\n\n  /**\n   * The load event. The load event doesn't bubble, but you can use it in\n   * addEvent() and jsaction anyway. EventContract does the right thing\n   * under the hood.\n   */\n  LOAD: 'load',\n\n  /**\n   * The unload event.\n   */\n  UNLOAD: 'unload',\n\n  /**\n   * The touchstart event. Bubbles, will only ever fire in browsers with\n   * touch support.\n   */\n  TOUCHSTART: 'touchstart',\n\n  /**\n   * The touchend event. Bubbles, will only ever fire in browsers with\n   * touch support.\n   */\n  TOUCHEND: 'touchend',\n\n  /**\n   * The touchmove event. Bubbles, will only ever fire in browsers with\n   * touch support.\n   */\n  TOUCHMOVE: 'touchmove',\n\n  /**\n   * The input event.\n   */\n  INPUT: 'input',\n\n  /**\n   * The scroll event.\n   */\n  SCROLL: 'scroll',\n\n  /**\n   * The toggle event. The toggle event doesn't bubble, but you can use it in\n   * addEvent() and jsaction anyway. EventContract does the right thing\n   * under the hood.\n   */\n  TOGGLE: 'toggle',\n\n  /**\n   * A custom event. The actual custom event type is declared as the 'type'\n   * field in the event details. Supported in Firefox 6+, IE 9+, and all Chrome\n   * versions.\n   *\n   * This is an internal name. Users should use jsaction's fireCustomEvent to\n   * fire custom events instead of relying on this type to create them.\n   */\n  CUSTOM: '_custom',\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Special keycodes used by jsaction for the generic click action. */\nexport enum KeyCode {\n  /**\n   * If on a Macintosh with an extended keyboard, the Enter key located in the\n   * numeric pad has a different ASCII code.\n   */\n  MAC_ENTER = 3,\n\n  /** The Enter key. */\n  ENTER = 13,\n\n  /** The Space key. */\n  SPACE = 32,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as dom from './dom';\nimport {EventHandlerInfo} from './event_handler';\nimport {EventType} from './event_type';\nimport {KeyCode} from './key_code';\n\n/**\n * Gets a browser event type, if it would differ from the JSAction event type.\n */\nexport function getBrowserEventType(eventType: string) {\n  // Mouseenter and mouseleave events are not handled directly because they\n  // are not available everywhere. In browsers where they are available, they\n  // don't bubble and aren't visible at the container boundary. Instead, we\n  // synthesize the mouseenter and mouseleave events from mouseover and\n  // mouseout events, respectively. Cf. eventcontract.js.\n  if (eventType === EventType.MOUSEENTER) {\n    return EventType.MOUSEOVER;\n  } else if (eventType === EventType.MOUSELEAVE) {\n    return EventType.MOUSEOUT;\n  } else if (eventType === EventType.POINTERENTER) {\n    return EventType.POINTEROVER;\n  } else if (eventType === EventType.POINTERLEAVE) {\n    return EventType.POINTEROUT;\n  }\n  return eventType;\n}\n\n/**\n * Registers the event handler function with the given DOM element for\n * the given event type.\n *\n * @param element The element.\n * @param eventType The event type.\n * @param handler The handler function to install.\n * @return Information needed to uninstall the event handler eventually.\n */\nexport function addEventListener(\n  element: Element,\n  eventType: string,\n  handler: (event: Event) => void,\n): EventHandlerInfo {\n  // All event handlers are registered in the bubbling\n  // phase.\n  //\n  // All browsers support focus and blur, but these events only are propagated\n  // in the capture phase. Very legacy browsers do not support focusin or\n  // focusout.\n  //\n  // It would be a bad idea to register all event handlers in the\n  // capture phase because then regular onclick handlers would not be\n  // executed at all on events that trigger a jsaction. That's not\n  // entirely what we want, at least for now.\n  //\n  // Error and load events (i.e. on images) do not bubble so they are also\n  // handled in the capture phase.\n  let capture = false;\n\n  if (\n    eventType === EventType.FOCUS ||\n    eventType === EventType.BLUR ||\n    eventType === EventType.ERROR ||\n    eventType === EventType.LOAD ||\n    eventType === EventType.TOGGLE\n  ) {\n    capture = true;\n  }\n  element.addEventListener(eventType, handler, capture);\n\n  return {eventType, handler, capture};\n}\n\n/**\n * Removes the event handler for the given event from the element.\n * the given event type.\n *\n * @param element The element.\n * @param info The information needed to deregister the handler, as returned by\n *     addEventListener(), above.\n */\nexport function removeEventListener(element: Element, info: EventHandlerInfo) {\n  if (element.removeEventListener) {\n    element.removeEventListener(info.eventType, info.handler as EventListener, info.capture);\n    // `detachEvent` is an old DOM API.\n    // tslint:disable-next-line:no-any\n  } else if ((element as any).detachEvent) {\n    // `detachEvent` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (element as any).detachEvent(`on${info.eventType}`, info.handler);\n  }\n}\n\n/**\n * Cancels propagation of an event.\n * @param e The event to cancel propagation for.\n */\nexport function stopPropagation(e: Event) {\n  e.stopPropagation ? e.stopPropagation() : (e.cancelBubble = true);\n}\n\n/**\n * Prevents the default action of an event.\n * @param e The event to prevent the default action for.\n */\nexport function preventDefault(e: Event) {\n  e.preventDefault ? e.preventDefault() : (e.returnValue = false);\n}\n\n/**\n * Gets the target Element of the event. In Firefox, a text node may appear as\n * the target of the event, in which case we return the parent element of the\n * text node.\n * @param e The event to get the target of.\n * @return The target element.\n */\nexport function getTarget(e: Event): Element {\n  let el = e.target as Element;\n\n  // In Firefox, the event may have a text node as its target. We always\n  // want the parent Element the text node belongs to, however.\n  if (!el.getAttribute && el.parentNode) {\n    el = el.parentNode as Element;\n  }\n\n  return el;\n}\n\n/**\n * Whether we are on a Mac. Not pulling in useragent just for this.\n */\nlet isMac: boolean = typeof navigator !== 'undefined' && /Macintosh/.test(navigator.userAgent);\n\n/**\n * Determines and returns whether the given event (which is assumed to be a\n * click event) is a middle click.\n * NOTE: There is not a consistent way to identify middle click\n * http://www.unixpapa.com/js/mouse.html\n */\nfunction isMiddleClick(e: Event): boolean {\n  return (\n    // `which` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (e as any).which === 2 ||\n    // `which` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    ((e as any).which == null &&\n      // `button` is an old DOM API.\n      // tslint:disable-next-line:no-any\n      (e as any).button === 4) // middle click for IE\n  );\n}\n\n/**\n * Determines and returns whether the given event (which is assumed\n * to be a click event) is modified. A middle click is considered a modified\n * click to retain the default browser action, which opens a link in a new tab.\n * @param e The event.\n * @return Whether the given event is modified.\n */\nexport function isModifiedClickEvent(e: Event): boolean {\n  return (\n    // `metaKey` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (isMac && (e as any).metaKey) ||\n    // `ctrlKey` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (!isMac && (e as any).ctrlKey) ||\n    isMiddleClick(e) ||\n    // `shiftKey` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (e as any).shiftKey\n  );\n}\n\n/** Whether we are on WebKit (e.g., Chrome). */\nexport const isWebKit: boolean =\n  typeof navigator !== 'undefined' &&\n  !/Opera/.test(navigator.userAgent) &&\n  /WebKit/.test(navigator.userAgent);\n\n/** Whether we are on IE. */\nexport const isIe: boolean =\n  typeof navigator !== 'undefined' &&\n  (/MSIE/.test(navigator.userAgent) || /Trident/.test(navigator.userAgent));\n\n/** Whether we are on Gecko (e.g., Firefox). */\nexport const isGecko: boolean =\n  typeof navigator !== 'undefined' &&\n  !/Opera|WebKit/.test(navigator.userAgent) &&\n  /Gecko/.test(navigator.product);\n\n/**\n * Determines and returns whether the given element is a valid target for\n * keypress/keydown DOM events that act like regular DOM clicks.\n * @param el The element.\n * @return Whether the given element is a valid action key target.\n */\nexport function isValidActionKeyTarget(el: Element): boolean {\n  if (!('getAttribute' in el)) {\n    return false;\n  }\n  if (isTextControl(el)) {\n    return false;\n  }\n  if (isNativelyActivatable(el)) {\n    return false;\n  }\n  // `isContentEditable` is an old DOM API.\n  // tslint:disable-next-line:no-any\n  if ((el as any).isContentEditable) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Whether an event has a modifier key activated.\n * @param e The event.\n * @return True, if a modifier key is activated.\n */\nfunction hasModifierKey(e: Event): boolean {\n  return (\n    // `ctrlKey` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (e as any).ctrlKey ||\n    // `shiftKey` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (e as any).shiftKey ||\n    // `altKey` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (e as any).altKey ||\n    // `metaKey` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (e as any).metaKey\n  );\n}\n\n/**\n * Determines and returns whether the given event has a target that already\n * has event handlers attached because it is a native HTML control. Used to\n * determine if preventDefault should be called when isActionKeyEvent is true.\n * @param e The event.\n * @return If preventDefault should be called.\n */\nexport function shouldCallPreventDefaultOnNativeHtmlControl(e: Event): boolean {\n  const el = getTarget(e);\n  const tagName = el.tagName.toUpperCase();\n  const role = (el.getAttribute('role') || '').toUpperCase();\n\n  if (tagName === 'BUTTON' || role === 'BUTTON') {\n    return true;\n  }\n  if (!isNativeHTMLControl(el)) {\n    return false;\n  }\n  if (tagName === 'A') {\n    return false;\n  }\n  /**\n   * Fix for physical d-pads on feature phone platforms; the native event\n   * (ie. isTrusted: true) needs to fire to show the OPTION list. See\n   * b/135288469 for more info.\n   */\n  if (tagName === 'SELECT') {\n    return false;\n  }\n  if (processSpace(el)) {\n    return false;\n  }\n  if (isTextControl(el)) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Determines and returns whether the given event acts like a regular DOM click,\n * and should be handled instead of the click.  If this returns true, the caller\n * will call preventDefault() to prevent a possible duplicate event.\n * This is represented by a keypress (keydown on Gecko browsers) on Enter or\n * Space key.\n * @param e The event.\n * @return True, if the event emulates a DOM click.\n */\nexport function isActionKeyEvent(e: Event): boolean {\n  let key =\n    // `which` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (e as any).which ||\n    // `keyCode` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (e as any).keyCode;\n  if (!key && (e as KeyboardEvent).key) {\n    key = ACTION_KEY_TO_KEYCODE[(e as KeyboardEvent).key];\n  }\n  if (isWebKit && key === KeyCode.MAC_ENTER) {\n    key = KeyCode.ENTER;\n  }\n  if (key !== KeyCode.ENTER && key !== KeyCode.SPACE) {\n    return false;\n  }\n  const el = getTarget(e);\n  if (e.type !== EventType.KEYDOWN || !isValidActionKeyTarget(el) || hasModifierKey(e)) {\n    return false;\n  }\n\n  // For <input type=\"checkbox\">, we must only handle the browser's native click\n  // event, so that the browser can toggle the checkbox.\n  if (processSpace(el) && key === KeyCode.SPACE) {\n    return false;\n  }\n\n  // If this element is non-focusable, ignore stray keystrokes (b/18337209)\n  // Sscreen readers can move without tab focus, so any tabIndex is focusable.\n  // See B/21809604\n  if (!isFocusable(el)) {\n    return false;\n  }\n\n  const type = (\n    el.getAttribute('role') ||\n    (el as HTMLInputElement).type ||\n    el.tagName\n  ).toUpperCase();\n  const isSpecificTriggerKey = IDENTIFIER_TO_KEY_TRIGGER_MAPPING[type] % key === 0;\n  const isDefaultTriggerKey = !(type in IDENTIFIER_TO_KEY_TRIGGER_MAPPING) && key === KeyCode.ENTER;\n  const hasType = el.tagName.toUpperCase() !== 'INPUT' || !!(el as HTMLInputElement).type;\n  return (isSpecificTriggerKey || isDefaultTriggerKey) && hasType;\n}\n\n/**\n * Checks whether a DOM element can receive keyboard focus.\n * This code is based on goog.dom.isFocusable, but simplified since we shouldn't\n * care about visibility if we're already handling a keyboard event.\n */\nfunction isFocusable(el: Element): boolean {\n  return (\n    (el.tagName in NATIVELY_FOCUSABLE_ELEMENTS || hasSpecifiedTabIndex(el)) &&\n    !(el as HTMLInputElement).disabled\n  );\n}\n\n/**\n * @param element Element to check.\n * @return Whether the element has a specified tab index.\n */\nfunction hasSpecifiedTabIndex(element: Element): boolean {\n  // IE returns 0 for an unset tabIndex, so we must use getAttributeNode(),\n  // which returns an object with a 'specified' property if tabIndex is\n  // specified.  This works on other browsers, too.\n  const attrNode = element.getAttributeNode('tabindex'); // Must be lowercase!\n  return attrNode != null && attrNode.specified;\n}\n\n/** Element tagnames that are focusable by default. */\nconst NATIVELY_FOCUSABLE_ELEMENTS: {[key: string]: number} = {\n  'A': 1,\n  'INPUT': 1,\n  'TEXTAREA': 1,\n  'SELECT': 1,\n  'BUTTON': 1,\n};\n\n/** @return True, if the Space key was pressed. */\nexport function isSpaceKeyEvent(e: Event): boolean {\n  const key =\n    // `which` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (e as any).which ||\n    // `keyCode` is an old DOM API.\n    // tslint:disable-next-line:no-any\n    (e as any).keyCode;\n  const el = getTarget(e);\n  const elementName = ((el as HTMLInputElement).type || el.tagName).toUpperCase();\n  return key === KeyCode.SPACE && elementName !== 'CHECKBOX';\n}\n\n/**\n * Determines whether the event corresponds to a non-bubbling mouse\n * event type (mouseenter, mouseleave, pointerenter, and pointerleave).\n *\n * During mouseover (mouseenter) and pointerover (pointerenter), the\n * relatedTarget is the element being entered from. During mouseout (mouseleave)\n * and pointerout (pointerleave), the relatedTarget is the element being exited\n * to.\n *\n * In both cases, if relatedTarget is outside target, then the corresponding\n * special event has occurred, otherwise it hasn't.\n *\n * @param e The mouseover/mouseout event.\n * @param type The type of the mouse special event.\n * @param element The element on which the jsaction for the\n *     mouseenter/mouseleave event is defined.\n * @return True if the event is a mouseenter/mouseleave event.\n */\nexport function isMouseSpecialEvent(e: Event, type: string, element: Element): boolean {\n  // `relatedTarget` is an old DOM API.\n  // tslint:disable-next-line:no-any\n  const related = (e as any).relatedTarget as Node;\n\n  return (\n    ((e.type === EventType.MOUSEOVER && type === EventType.MOUSEENTER) ||\n      (e.type === EventType.MOUSEOUT && type === EventType.MOUSELEAVE) ||\n      (e.type === EventType.POINTEROVER && type === EventType.POINTERENTER) ||\n      (e.type === EventType.POINTEROUT && type === EventType.POINTERLEAVE)) &&\n    (!related || (related !== element && !dom.contains(element, related)))\n  );\n}\n\n/**\n * Creates a new EventLike object for a mouseenter/mouseleave event that's\n * derived from the original corresponding mouseover/mouseout event.\n * @param e The event.\n * @param target The element on which the jsaction for the mouseenter/mouseleave\n *     event is defined.\n * @return A modified event-like object copied from the event object passed into\n *     this function.\n */\nexport function createMouseSpecialEvent(e: Event, target: Element): Event {\n  // We have to create a copy of the event object because we need to mutate\n  // its fields. We do this for the special mouse events because the event\n  // target needs to be retargeted to the action element rather than the real\n  // element (since we are simulating the special mouse events with mouseover/\n  // mouseout).\n  //\n  // Since we're making a copy anyways, we might as well attempt to convert\n  // this event into a pseudo-real mouseenter/mouseleave event by adjusting\n  // its type.\n  //\n  // tslint:disable-next-line:no-any\n  const copy: {-readonly [P in keyof Event]?: Event[P]} = {};\n  for (const property in e) {\n    if (property === 'srcElement' || property === 'target') {\n      continue;\n    }\n    const key = property as keyof Event;\n    // Making a copy requires iterating through all properties of `Event`.\n    // tslint:disable-next-line:no-dict-access-on-struct-type\n    const value = e[key];\n    if (typeof value === 'function') {\n      continue;\n    }\n    // Value should be the expected type, but the value of `key` is not known\n    // statically.\n    // tslint:disable-next-line:no-any\n    copy[key] = value as any;\n  }\n  if (e.type === EventType.MOUSEOVER) {\n    copy['type'] = EventType.MOUSEENTER;\n  } else if (e.type === EventType.MOUSEOUT) {\n    copy['type'] = EventType.MOUSELEAVE;\n  } else if (e.type === EventType.POINTEROVER) {\n    copy['type'] = EventType.POINTERENTER;\n  } else {\n    copy['type'] = EventType.POINTERLEAVE;\n  }\n  copy['target'] = copy['srcElement'] = target;\n  copy['bubbles'] = false;\n  return copy as Event;\n}\n\n/**\n * Returns touch data extracted from the touch event: clientX, clientY, screenX\n * and screenY. If the event has no touch information at all, the returned\n * value is null.\n *\n * The fields of this Object are unquoted.\n *\n * @param event A touch event.\n */\nexport function getTouchData(\n  event: TouchEvent,\n): {clientX: number; clientY: number; screenX: number; screenY: number} | null {\n  const touch =\n    (event.changedTouches && event.changedTouches[0]) || (event.touches && event.touches[0]);\n  if (!touch) {\n    return null;\n  }\n  return {\n    clientX: touch.clientX,\n    clientY: touch.clientY,\n    screenX: touch.screenX,\n    screenY: touch.screenY,\n  };\n}\n\ndeclare interface SyntheticMouseEvent extends Event {\n  // Redeclared from Event to indicate that it is not readonly.\n  defaultPrevented: boolean;\n  originalEventType: string;\n  _propagationStopped?: boolean;\n}\n\n/**\n * Creates a new EventLike object for a \"click\" event that's derived from the\n * original corresponding \"touchend\" event for a fast-click implementation.\n *\n * It takes a touch event, adds common fields found in a click event and\n * changes the type to 'click', so that the resulting event looks more like\n * a real click event.\n *\n * @param event A touch event.\n * @return A modified event-like object copied from the event object passed into\n *     this function.\n */\nexport function recreateTouchEventAsClick(event: TouchEvent): MouseEvent {\n  const click: {-readonly [P in keyof MouseEvent]?: MouseEvent[P]} & Partial<SyntheticMouseEvent> =\n    {};\n  click['originalEventType'] = event.type;\n  click['type'] = EventType.CLICK;\n  for (const property in event) {\n    if (property === 'type' || property === 'srcElement') {\n      continue;\n    }\n    const key = property as keyof TouchEvent;\n    // Making a copy requires iterating through all properties of `TouchEvent`.\n    // tslint:disable-next-line:no-dict-access-on-struct-type\n    const value = event[key];\n    if (typeof value === 'function') {\n      continue;\n    }\n    // Value should be the expected type, but the value of `key` is not known\n    // statically.\n    // tslint:disable-next-line:no-any\n    click[key as keyof MouseEvent] = value as any;\n  }\n\n  // Ensure that the event has the most recent timestamp. This timestamp\n  // may be used in the future to validate or cancel subsequent click events.\n  click['timeStamp'] = Date.now();\n\n  // Emulate preventDefault and stopPropagation behavior\n  click['defaultPrevented'] = false;\n  click['preventDefault'] = syntheticPreventDefault;\n  click['_propagationStopped'] = false;\n  click['stopPropagation'] = syntheticStopPropagation;\n\n  // Emulate click coordinates using touch info\n  const touch = getTouchData(event);\n  if (touch) {\n    click['clientX'] = touch.clientX;\n    click['clientY'] = touch.clientY;\n    click['screenX'] = touch.screenX;\n    click['screenY'] = touch.screenY;\n  }\n  return click as MouseEvent;\n}\n\n/**\n * An implementation of \"preventDefault\" for a synthesized event. Simply\n * sets \"defaultPrevented\" property to true.\n */\nfunction syntheticPreventDefault(this: Event) {\n  (this as SyntheticMouseEvent).defaultPrevented = true;\n}\n\n/**\n * An implementation of \"stopPropagation\" for a synthesized event. It simply\n * sets a synthetic non-standard \"_propagationStopped\" property to true.\n */\nfunction syntheticStopPropagation(this: Event) {\n  (this as SyntheticMouseEvent)._propagationStopped = true;\n}\n\n/**\n * Mapping of KeyboardEvent.key values to\n * KeyCode values.\n */\nconst ACTION_KEY_TO_KEYCODE: {[key: string]: number} = {\n  'Enter': KeyCode.ENTER,\n  ' ': KeyCode.SPACE,\n};\n\n/**\n * Mapping of HTML element identifiers (ARIA role, type, or tagName) to the\n * keys (enter and/or space) that should activate them. A value of zero means\n * that both should activate them.\n */\nexport const IDENTIFIER_TO_KEY_TRIGGER_MAPPING: {[key: string]: number} = {\n  'A': KeyCode.ENTER,\n  'BUTTON': 0,\n  'CHECKBOX': KeyCode.SPACE,\n  'COMBOBOX': KeyCode.ENTER,\n  'FILE': 0,\n  'GRIDCELL': KeyCode.ENTER,\n  'LINK': KeyCode.ENTER,\n  'LISTBOX': KeyCode.ENTER,\n  'MENU': 0,\n  'MENUBAR': 0,\n  'MENUITEM': 0,\n  'MENUITEMCHECKBOX': 0,\n  'MENUITEMRADIO': 0,\n  'OPTION': 0,\n  'RADIO': KeyCode.SPACE,\n  'RADIOGROUP': KeyCode.SPACE,\n  'RESET': 0,\n  'SUBMIT': 0,\n  'SWITCH': KeyCode.SPACE,\n  'TAB': 0,\n  'TREE': KeyCode.ENTER,\n  'TREEITEM': KeyCode.ENTER,\n};\n\n/**\n * Returns whether or not to process space based on the type of the element;\n * checks to make sure that type is not null.\n * @param element The element.\n * @return Whether or not to process space based on type.\n */\nfunction processSpace(element: Element): boolean {\n  const type = (element.getAttribute('type') || element.tagName).toUpperCase();\n  return type in PROCESS_SPACE;\n}\n\n/**\n * Returns whether or not the given element is a text control.\n * @param el The element.\n * @return Whether or not the given element is a text control.\n */\nfunction isTextControl(el: Element): boolean {\n  const type = (el.getAttribute('type') || el.tagName).toUpperCase();\n  return type in TEXT_CONTROLS;\n}\n\n/**\n * Returns if the given element is a native HTML control.\n * @param el The element.\n * @return If the given element is a native HTML control.\n */\nexport function isNativeHTMLControl(el: Element): boolean {\n  return el.tagName.toUpperCase() in NATIVE_HTML_CONTROLS;\n}\n\n/**\n * Returns if the given element is natively activatable. Browsers emit click\n * events for natively activatable elements, even when activated via keyboard.\n * For these elements, we don't need to raise a11y click events.\n * @param el The element.\n * @return If the given element is a native HTML control.\n */\nfunction isNativelyActivatable(el: Element): boolean {\n  return (\n    el.tagName.toUpperCase() === 'BUTTON' ||\n    (!!(el as HTMLInputElement).type && (el as HTMLInputElement).type.toUpperCase() === 'FILE')\n  );\n}\n\n/**\n * HTML <input> types (not ARIA roles) which will auto-trigger a click event for\n * the Space key, with side-effects. We will not call preventDefault if space is\n * pressed, nor will we raise a11y click events.  For all other elements, we can\n * suppress the default event (which has no desired side-effects) and handle the\n * keydown ourselves.\n */\nconst PROCESS_SPACE: {[key: string]: boolean} = {\n  'CHECKBOX': true,\n  'FILE': true,\n  'OPTION': true,\n  'RADIO': true,\n};\n\n/** TagNames and Input types for which to not process enter/space as click. */\nconst TEXT_CONTROLS: {[key: string]: boolean} = {\n  'COLOR': true,\n  'DATE': true,\n  'DATETIME': true,\n  'DATETIME-LOCAL': true,\n  'EMAIL': true,\n  'MONTH': true,\n  'NUMBER': true,\n  'PASSWORD': true,\n  'RANGE': true,\n  'SEARCH': true,\n  'TEL': true,\n  'TEXT': true,\n  'TEXTAREA': true,\n  'TIME': true,\n  'URL': true,\n  'WEEK': true,\n};\n\n/** TagNames that are native HTML controls. */\nconst NATIVE_HTML_CONTROLS: {[key: string]: boolean} = {\n  'A': true,\n  'AREA': true,\n  'BUTTON': true,\n  'DIALOG': true,\n  'IMG': true,\n  'INPUT': true,\n  'LINK': true,\n  'MENU': true,\n  'OPTGROUP': true,\n  'OPTION': true,\n  'PROGRESS': true,\n  'SELECT': true,\n  'TEXTAREA': true,\n};\n\n/** Exported for testing. */\nexport const testing = {\n  setIsMac(value: boolean) {\n    isMac = value;\n  },\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Records information about the action that should handle a given `Event`.\n */\nexport interface ActionInfo {\n  name: string;\n  element: Element;\n}\n\ntype ActionInfoInternal = [name: string, element: Element];\n\n/**\n * Records information for later handling of events. This type is\n * shared, and instances of it are passed, between the eventcontract\n * and the dispatcher jsbinary. Therefore, the fields of this type are\n * referenced by string literals rather than property literals\n * throughout the code.\n *\n * 'targetElement' is the element the action occurred on, 'actionElement'\n * is the element that has the jsaction handler.\n *\n * A null 'actionElement' identifies an EventInfo instance that didn't match a\n * jsaction attribute.  This allows us to execute global event handlers with the\n * appropriate event type (including a11y clicks and custom events).\n * The declare portion of this interface creates a set of externs that make sure\n * renaming doesn't happen for EventInfo. This is important since EventInfo\n * is shared across multiple binaries.\n */\nexport declare interface EventInfo {\n  eventType: string;\n  event: Event;\n  targetElement: Element;\n  /** The element that is the container for this Event. */\n  eic: Element;\n  timeStamp: number;\n  /**\n   * The action parsed from the JSAction element.\n   */\n  eia?: ActionInfoInternal;\n  /**\n   * Whether this `Event` is a replay event, meaning no dispatcher was\n   * installed when this `Event` was originally dispatched.\n   */\n  eirp?: boolean;\n  /**\n   * Whether this `Event` represents a `keydown` event that should be processed\n   * as a `click`. Only used when a11y click events is on.\n   */\n  eiack?: boolean;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function getEventType(eventInfo: EventInfo) {\n  return eventInfo.eventType;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function setEventType(eventInfo: EventInfo, eventType: string) {\n  eventInfo.eventType = eventType;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function getEvent(eventInfo: EventInfo) {\n  return eventInfo.event;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function setEvent(eventInfo: EventInfo, event: Event) {\n  eventInfo.event = event;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function getTargetElement(eventInfo: EventInfo) {\n  return eventInfo.targetElement;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function setTargetElement(eventInfo: EventInfo, targetElement: Element) {\n  eventInfo.targetElement = targetElement;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function getContainer(eventInfo: EventInfo) {\n  return eventInfo.eic;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function setContainer(eventInfo: EventInfo, container: Element) {\n  eventInfo.eic = container;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function getTimestamp(eventInfo: EventInfo) {\n  return eventInfo.timeStamp;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function setTimestamp(eventInfo: EventInfo, timestamp: number) {\n  eventInfo.timeStamp = timestamp;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function getAction(eventInfo: EventInfo) {\n  return eventInfo.eia;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function setAction(eventInfo: EventInfo, actionName: string, actionElement: Element) {\n  eventInfo.eia = [actionName, actionElement];\n}\n\n/** Added for readability when accessing stable property names. */\nexport function unsetAction(eventInfo: EventInfo) {\n  eventInfo.eia = undefined;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function getActionName(actionInfo: ActionInfoInternal) {\n  return actionInfo[0];\n}\n\n/** Added for readability when accessing stable property names. */\nexport function getActionElement(actionInfo: ActionInfoInternal) {\n  return actionInfo[1];\n}\n\n/** Added for readability when accessing stable property names. */\nexport function getIsReplay(eventInfo: EventInfo) {\n  return eventInfo.eirp;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function setIsReplay(eventInfo: EventInfo, replay: boolean) {\n  eventInfo.eirp = replay;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function getA11yClickKey(eventInfo: EventInfo) {\n  return eventInfo.eiack;\n}\n\n/** Added for readability when accessing stable property names. */\nexport function setA11yClickKey(eventInfo: EventInfo, a11yClickKey: boolean) {\n  eventInfo.eiack = a11yClickKey;\n}\n\n/** Clones an `EventInfo` */\nexport function cloneEventInfo(eventInfo: EventInfo): EventInfo {\n  return {\n    eventType: eventInfo.eventType,\n    event: eventInfo.event,\n    targetElement: eventInfo.targetElement,\n    eic: eventInfo.eic,\n    eia: eventInfo.eia,\n    timeStamp: eventInfo.timeStamp,\n    eirp: eventInfo.eirp,\n    eiack: eventInfo.eiack,\n  };\n}\n\n/**\n * Utility function for creating an `EventInfo`.\n *\n * This can be used from code-size sensitive compilation units, as taking\n * parameters vs. an `Object` literal reduces code size.\n */\nexport function createEventInfoFromParameters(\n  eventType: string,\n  event: Event,\n  targetElement: Element,\n  container: Element,\n  timestamp: number,\n  action?: ActionInfoInternal,\n  isReplay?: boolean,\n  a11yClickKey?: boolean,\n): EventInfo {\n  return {\n    eventType,\n    event,\n    targetElement,\n    eic: container,\n    timeStamp: timestamp,\n    eia: action,\n    eirp: isReplay,\n    eiack: a11yClickKey,\n  };\n}\n\n/**\n * Utility function for creating an `EventInfo`.\n *\n * This should be used in compilation units that are less sensitive to code\n * size.\n */\nexport function createEventInfo({\n  eventType,\n  event,\n  targetElement,\n  container,\n  timestamp,\n  action,\n  isReplay,\n  a11yClickKey,\n}: {\n  eventType: string;\n  event: Event;\n  targetElement: Element;\n  container: Element;\n  timestamp: number;\n  action?: ActionInfo;\n  isReplay?: boolean;\n  a11yClickKey?: boolean;\n}): EventInfo {\n  return {\n    eventType,\n    event,\n    targetElement,\n    eic: container,\n    timeStamp: timestamp,\n    eia: action ? [action.name, action.element] : undefined,\n    eirp: isReplay,\n    eiack: a11yClickKey,\n  };\n}\n\n/**\n * Utility class around an `EventInfo`.\n *\n * This should be used in compilation units that are less sensitive to code\n * size.\n */\nexport class EventInfoWrapper {\n  constructor(readonly eventInfo: EventInfo) {}\n\n  getEventType() {\n    return getEventType(this.eventInfo);\n  }\n\n  setEventType(eventType: string) {\n    setEventType(this.eventInfo, eventType);\n  }\n\n  getEvent() {\n    return getEvent(this.eventInfo);\n  }\n\n  setEvent(event: Event) {\n    setEvent(this.eventInfo, event);\n  }\n\n  getTargetElement() {\n    return getTargetElement(this.eventInfo);\n  }\n\n  setTargetElement(targetElement: Element) {\n    setTargetElement(this.eventInfo, targetElement);\n  }\n\n  getContainer() {\n    return getContainer(this.eventInfo);\n  }\n\n  setContainer(container: Element) {\n    setContainer(this.eventInfo, container);\n  }\n  getTimestamp() {\n    return getTimestamp(this.eventInfo);\n  }\n\n  setTimestamp(timestamp: number) {\n    setTimestamp(this.eventInfo, timestamp);\n  }\n\n  getAction() {\n    const action = getAction(this.eventInfo);\n    if (!action) return undefined;\n    return {\n      name: action[0],\n      element: action[1],\n    };\n  }\n\n  setAction(action: ActionInfo | undefined) {\n    if (!action) {\n      unsetAction(this.eventInfo);\n      return;\n    }\n    setAction(this.eventInfo, action.name, action.element);\n  }\n\n  getIsReplay() {\n    return getIsReplay(this.eventInfo);\n  }\n\n  setIsReplay(replay: boolean) {\n    setIsReplay(this.eventInfo, replay);\n  }\n\n  clone() {\n    return new EventInfoWrapper(cloneEventInfo(this.eventInfo));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventType} from './/event_type';\n\n// We use '_type' for the event contract, which lives in a separate\n// compilation unit.\ndeclare interface UnrenamedCustomEventDetail {\n  _type: string;\n}\n\n/** The detail interface provided for custom events. */\nexport interface CustomEventDetail<T> {\n  type: string;\n  data?: T;\n  triggeringEvent?: Event;\n}\n\n/**\n * Create a custom event with the specified data.\n * @param type The type of the action, e.g., 'submit'.\n * @param data An optional data payload.\n * @param triggeringEvent The event that triggers this custom event. This can be\n *     accessed from the custom event's action flow like so:\n *     actionFlow.event().detail.triggeringEvent.\n * @return The new custom event.\n */\nexport function createCustomEvent<T>(type: string, data?: T, triggeringEvent?: Event): Event {\n  let event: CustomEvent<CustomEventDetail<T> & UnrenamedCustomEventDetail>;\n  const unrenamedDetail: UnrenamedCustomEventDetail = {\n    '_type': type,\n  };\n  const renamedDetail: CustomEventDetail<T> = {\n    type,\n    data,\n    triggeringEvent,\n  };\n  const detail = {...unrenamedDetail, ...renamedDetail};\n  try {\n    // We don't use the CustomEvent constructor directly since it isn't\n    // supported in IE 9 or 10 and initCustomEvent below works just fine.\n    event = document.createEvent('CustomEvent');\n    event.initCustomEvent(EventType.CUSTOM, true, false, detail);\n  } catch (e) {\n    // If custom events aren't supported, fall back to custom-named HTMLEvent.\n    // Fallback used by Android Gingerbread, FF4-5.\n\n    // Hack to emulate `CustomEvent`, `HTMLEvents` doesn't satisfy `CustomEvent`\n    // type.\n    // tslint:disable-next-line:no-any\n    event = document.createEvent('HTMLEvents') as any;\n    event.initEvent(EventType.CUSTOM, true, false);\n    // Hack to emulate `CustomEvent`, `detail` is readonly on `CustomEvent`.\n    // tslint:disable-next-line:no-any\n    (event as any)['detail'] = detail;\n  }\n\n  return event;\n}\n\n/**\n * Fires a custom event with an optional payload. Only intended to be consumed\n * by jsaction itself. Supported in Firefox 6+, IE 9+, and all Chrome versions.\n *\n * @param target The target element.\n * @param type The type of the action, e.g., 'submit'.\n * @param data An optional data payload.\n * @param triggeringEvent An optional data for the Event triggered this custom\n *     event.\n */\nexport function fireCustomEvent<T>(\n  target: Element,\n  type: string,\n  data?: T,\n  triggeringEvent?: Event,\n) {\n  const event = createCustomEvent(type, data, triggeringEvent);\n  target.dispatchEvent(event);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview Functions for replaying events by the jsaction\n * Dispatcher.\n * All ts-ignores in this file are due to APIs that are no longer in the browser.\n */\n\nimport {createCustomEvent} from './/custom_events';\nimport * as jsactionEvent from './/event';\nimport {EventType} from './/event_type';\n\ntype Writeable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Replays an event.\n */\nexport function replayEvent(event: Event, targetElement: Element, eventType?: string) {\n  triggerEvent(targetElement, createEvent(event, eventType));\n}\n\n/**\n * Checks if a given event was triggered by the keyboard.\n * @param eventType The event type.\n * @return Whether it's a keyboard event.\n */\nfunction isKeyboardEvent(eventType: string): boolean {\n  return (\n    eventType === EventType.KEYPRESS ||\n    eventType === EventType.KEYDOWN ||\n    eventType === EventType.KEYUP\n  );\n}\n\n/**\n * Checks if a given event was triggered by the mouse.\n * @param eventType The event type.\n * @return Whether it's a mouse event.\n */\nfunction isMouseEvent(eventType: string): boolean {\n  // TODO: Verify if Drag events should be bound here.\n  return (\n    eventType === EventType.CLICK ||\n    eventType === EventType.DBLCLICK ||\n    eventType === EventType.MOUSEDOWN ||\n    eventType === EventType.MOUSEOVER ||\n    eventType === EventType.MOUSEOUT ||\n    eventType === EventType.MOUSEMOVE\n  );\n}\n\n/**\n * Checks if a given event is a general UI event.\n * @param eventType The event type.\n * @return Whether it's a focus event.\n */\nfunction isUiEvent(eventType: string): boolean {\n  // Almost nobody supports the W3C method of creating FocusEvents.\n  // For now, we're going to use the UIEvent as a super-interface.\n  return (\n    eventType === EventType.FOCUS ||\n    eventType === EventType.BLUR ||\n    eventType === EventType.FOCUSIN ||\n    eventType === EventType.FOCUSOUT ||\n    eventType === EventType.SCROLL\n  );\n}\n\n/**\n * Create a whitespace-delineated list of modifier keys that should be\n * considered to be active on the event's key. See details at\n * https://developer.mozilla.org/en/DOM/KeyboardEvent.\n * @param alt Alt pressed.\n * @param ctrl Control pressed.\n * @param meta Command pressed (OSX only).\n * @param shift Shift pressed.\n * @return The constructed modifier keys string.\n */\nfunction createKeyboardModifiersList(\n  alt: boolean,\n  ctrl: boolean,\n  meta: boolean,\n  shift: boolean,\n): string {\n  const keys = [];\n  if (alt) {\n    keys.push('Alt');\n  }\n  if (ctrl) {\n    keys.push('Control');\n  }\n  if (meta) {\n    keys.push('Meta');\n  }\n  if (shift) {\n    keys.push('Shift');\n  }\n  return keys.join(' ');\n}\n\n/**\n * Creates a UI event object for replaying through the DOM.\n * @param original The event to create a new event from.\n * @param opt_eventType The type this event is being handled as by jsaction.\n *     e.g. blur events are handled as focusout\n * @return The event object.\n */\nexport function createUiEvent(original: Event, opt_eventType?: string): Event {\n  let event: Writeable<UIEvent> & {originalTimestamp?: DOMHighResTimeStamp};\n  if (document.createEvent) {\n    const originalUiEvent = original as UIEvent;\n    // Event creation as per W3C event model specification.  This codepath\n    // is used by most non-IE browsers and also by IE 9 and later.\n    event = document.createEvent('UIEvent');\n    // On IE and Opera < 12, we must provide non-undefined values to\n    // initEvent, otherwise it will fail.\n    event.initUIEvent(\n      opt_eventType || originalUiEvent.type,\n      originalUiEvent.bubbles !== undefined ? originalUiEvent.bubbles : true,\n      originalUiEvent.cancelable || false,\n      originalUiEvent.view || window,\n      (original as CustomEvent).detail || 0,\n    );\n    // detail\n  } else {\n    // Older versions of IE (up to version 8) do not support the\n    // W3C event model. Use the IE specific function instead.\n    // Suppressing errors for ts-migration.\n    //   TS2339: Property 'createEventObject' does not exist on type 'Document'.\n    // @ts-ignore\n    event = document.createEventObject();\n    event.type = opt_eventType || original.type;\n    event.bubbles = original.bubbles !== undefined ? original.bubbles : true;\n    event.cancelable = original.cancelable || false;\n    event.view = (original as Writeable<UIEvent>).view || window;\n    event.detail = (original as CustomEvent).detail || 0;\n  }\n  // Some focus events also have a nullable relatedTarget value which isn't\n  // directly supported in the initUIEvent() method.\n  (event as Writeable<FocusEvent>).relatedTarget = (original as FocusEvent).relatedTarget || null;\n  event.originalTimestamp = original.timeStamp;\n  return event;\n}\n\n/**\n * Creates a keyboard event object for replaying through the DOM.\n * @param original The event to create a new event from.\n * @param opt_eventType The type this event is being handled as by jsaction.\n *     E.g. a keypress is handled as click in some cases.\n * @return The event object.\n * @suppress {strictMissingProperties} Two definitions of initKeyboardEvent.\n */\nexport function createKeyboardEvent(original: Event, opt_eventType?: string): Event {\n  let event;\n  const keyboardEvent = original as KeyboardEvent;\n  if (document.createEvent) {\n    // Event creation as per W3C event model specification.  This codepath\n    // is used by most non-IE browsers and also by IE 9 and later.\n    event = document.createEvent('KeyboardEvent');\n    if (event.initKeyboardEvent) {\n      if (jsactionEvent.isIe) {\n        // IE9+\n        // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ff975945(v=vs.85)\n        const modifiers = createKeyboardModifiersList(\n          keyboardEvent.altKey,\n          keyboardEvent.ctrlKey,\n          keyboardEvent.metaKey,\n          keyboardEvent.shiftKey,\n        );\n        event.initKeyboardEvent(\n          opt_eventType || keyboardEvent.type,\n          true,\n          true,\n          window,\n          keyboardEvent.key,\n          keyboardEvent.location,\n          // Suppressing errors for ts-migration.\n          //   TS2345: Argument of type 'string' is not assignable to\n          //   parameter of type 'boolean | undefined'.\n          // @ts-ignore\n          modifiers,\n          keyboardEvent.repeat,\n          // @ts-ignore This doesn't exist\n          keyboardEvent.locale,\n        );\n      } else {\n        // W3C DOM Level 3 Events model.\n        // https://www.w3.org/TR/uievents/#idl-interface-KeyboardEvent-initializers\n        event.initKeyboardEvent(\n          opt_eventType || original.type,\n          true,\n          true,\n          window,\n          keyboardEvent.key,\n          keyboardEvent.location,\n          keyboardEvent.ctrlKey,\n          keyboardEvent.altKey,\n          keyboardEvent.shiftKey,\n          keyboardEvent.metaKey,\n        );\n        Object.defineProperty(event, 'repeat', {\n          get: () => (original as KeyboardEvent).repeat,\n          enumerable: true,\n        });\n        // Add missing 'locale' which is not part of the spec.\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=168971\n        Object.defineProperty(event, 'locale', {\n          // Suppressing errors for ts-migration.\n          //   TS2339: Property 'locale' does not exist on type 'Event'.\n          // @ts-ignore\n          get: () => original.locale,\n          enumerable: true,\n        });\n        // Apple WebKit has a non-standard altGraphKey that is not implemented\n        // here.\n        // https://developer.apple.com/documentation/webkitjs/keyboardevent/1633753-initkeyboardevent\n      }\n      // Blink and Webkit had a bug that causes the `charCode`, `keyCode`, and\n      // `which` properties to always be unset when synthesizing a keyboard\n      // event. Details at: https://bugs.webkit.org/show_bug.cgi?id=16735. With\n      // these properties being deprecated, the bug has evolved into affecting\n      // the `key` property. We work around it by redefining the `key` and\n      // deprecated properties; a simple assignment here would fail because the\n      // native properties are readonly.\n      if (jsactionEvent.isWebKit) {\n        if (keyboardEvent.key && event.key === '') {\n          Object.defineProperty(event, 'key', {\n            get: () => keyboardEvent.key,\n            enumerable: true,\n          });\n        }\n      }\n      // Re-implement the deprecated `charCode`, `keyCode` and `which` which\n      // are also an issue on IE9+.\n      if (jsactionEvent.isWebKit || jsactionEvent.isIe || jsactionEvent.isGecko) {\n        Object.defineProperty(event, 'charCode', {\n          get: () => (original as KeyboardEvent).charCode,\n          enumerable: true,\n        });\n        const keyCodeGetter = () => (original as KeyboardEvent).keyCode;\n        Object.defineProperty(event, 'keyCode', {\n          get: keyCodeGetter,\n          enumerable: true,\n        });\n        Object.defineProperty(event, 'which', {\n          get: keyCodeGetter,\n          enumerable: true,\n        });\n      }\n    } else {\n      // Gecko only supports an older/deprecated version from DOM Level 2. See\n      // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyEvent\n      // for details.\n      // @ts-ignore ditto\n      event.initKeyEvent(\n        opt_eventType || original.type,\n        true,\n        true,\n        window,\n        // Suppressing errors for ts-migration.\n        //   TS2339: Property 'ctrlKey' does not exist on type 'Event'.\n        // @ts-ignore\n        original.ctrlKey,\n        // Suppressing errors for ts-migration.\n        //   TS2339: Property 'altKey' does not exist on type 'Event'.\n        // @ts-ignore\n        original.altKey,\n        // Suppressing errors for ts-migration.\n        //   TS2339: Property 'shiftKey' does not exist on type 'Event'.\n        // @ts-ignore\n        original.shiftKey,\n        // Suppressing errors for ts-migration.\n        //   TS2339: Property 'metaKey' does not exist on type 'Event'.\n        // @ts-ignore\n        original.metaKey,\n        // Suppressing errors for ts-migration.\n        //   TS2339: Property 'keyCode' does not exist on type 'Event'.\n        // @ts-ignore\n        original.keyCode,\n        // Suppressing errors for ts-migration.\n        //   TS2339: Property 'charCode' does not exist on type 'Event'.\n        // @ts-ignore\n        original.charCode,\n      );\n    }\n  } else {\n    // Older versions of IE (up to version 8) do not support the\n    // W3C event model. Use the IE specific function instead.\n    // Suppressing errors for ts-migration.\n    // @ts-ignore\n    event = document.createEventObject();\n    event.type = opt_eventType || original.type;\n    const originalKeyboardEvent = original as KeyboardEvent;\n    event.repeat = originalKeyboardEvent.repeat;\n    event.ctrlKey = originalKeyboardEvent.ctrlKey;\n    event.altKey = originalKeyboardEvent.altKey;\n    event.shiftKey = originalKeyboardEvent.shiftKey;\n    event.metaKey = originalKeyboardEvent.metaKey;\n    event.key = originalKeyboardEvent.key;\n    event.keyCode = originalKeyboardEvent.keyCode;\n    event.charCode = originalKeyboardEvent.charCode;\n  }\n  event.originalTimestamp = original.timeStamp;\n  return event;\n}\n\n/**\n * Creates a mouse event object for replaying through the DOM.\n * @param original The event to create a new event from.\n * @param opt_eventType The type this event is being handled as by jsaction.\n *     E.g. a keypress is handled as click in some cases.\n * @return The event object.\n */\nexport function createMouseEvent(original: Event, opt_eventType?: string): MouseEvent {\n  let event;\n  const originalMouseEvent = original as MouseEvent;\n  if (document.createEvent) {\n    // Event creation as per W3C event model specification.  This codepath\n    // is used by most non-IE browsers and also by IE 9 and later.\n    event = document.createEvent('MouseEvent');\n    // On IE and Opera < 12, we must provide non-undefined values to\n    // initMouseEvent, otherwise it will fail.\n    event.initMouseEvent(\n      opt_eventType || original.type,\n      true, // canBubble\n      true, // cancelable\n      window,\n      (original as CustomEvent).detail || 1,\n      originalMouseEvent.screenX || 0,\n      originalMouseEvent.screenY || 0,\n      originalMouseEvent.clientX || 0,\n      originalMouseEvent.clientY || 0,\n      originalMouseEvent.ctrlKey || false,\n      originalMouseEvent.altKey || false,\n      originalMouseEvent.shiftKey || false,\n      originalMouseEvent.metaKey || false,\n      originalMouseEvent.button || 0,\n      originalMouseEvent.relatedTarget || null,\n    );\n  } else {\n    // Older versions of IE (up to version 8) do not support the\n    // W3C event model. Use the IE specific function instead.\n    // @ts-ignore\n    event = document.createEventObject();\n    event.type = opt_eventType || original.type;\n    event.clientX = originalMouseEvent.clientX;\n    event.clientY = originalMouseEvent.clientY;\n    event.button = originalMouseEvent.button;\n    event.detail = (original as CustomEvent).detail;\n    event.ctrlKey = originalMouseEvent.ctrlKey;\n    event.altKey = originalMouseEvent.altKey;\n    event.shiftKey = originalMouseEvent.shiftKey;\n    event.metaKey = originalMouseEvent.metaKey;\n  }\n  event.originalTimestamp = original.timeStamp;\n  return event;\n}\n\n/**\n * Creates a generic event object for replaying through the DOM.\n * @param original The event to create a new event from.\n * @param opt_eventType The type this event is being handled as by jsaction.\n *     E.g. a keypress is handled as click in some cases.\n * @return The event object.\n */\nfunction createGenericEvent(original: Event, opt_eventType?: string): Event {\n  let event;\n  if (document.createEvent) {\n    // Event creation as per W3C event model specification.  This codepath\n    // is used by most non-IE browsers and also by IE 9 and later.\n    event = document.createEvent('Event');\n    event.initEvent(opt_eventType || original.type, true, true);\n  } else {\n    // Older versions of IE (up to version 8) do not support the\n    // W3C event model. Use the IE specific function instead.\n    // Suppressing errors for ts-migration.\n    //   TS2339: Property 'createEventObject' does not exist on type 'Document'.\n    // @ts-ignore\n    event = document.createEventObject();\n    event.type = opt_eventType || original.type;\n  }\n  event.originalTimestamp = original.timeStamp;\n  return event;\n}\n\n/**\n * Creates an event object for replaying through the DOM.\n * NOTE: This function is visible just for testing.  Please don't use\n * it outside JsAction internal testing.\n * TODO: Add support for FocusEvent and WheelEvent.\n * @param base The event to create a new event from.\n * @param opt_eventType The type this event is being handled as by jsaction.\n *     E.g. a keypress is handled as click in some cases.\n * @return The event object.\n */\nexport function createEvent(base: unknown, opt_eventType?: string): Event {\n  const original = base as Event;\n  let event;\n  let eventType;\n  if (original.type === EventType.CUSTOM) {\n    eventType = EventType.CUSTOM;\n  } else {\n    eventType = opt_eventType || original.type;\n  }\n\n  if (isKeyboardEvent(eventType)) {\n    event = createKeyboardEvent(original, opt_eventType);\n  } else if (isMouseEvent(eventType)) {\n    event = createMouseEvent(original, opt_eventType);\n  } else if (isUiEvent(eventType)) {\n    event = createUiEvent(original, opt_eventType);\n  } else if (eventType === EventType.CUSTOM) {\n    event = createCustomEvent(\n      opt_eventType!,\n      (original as CustomEvent)['detail']['data'],\n      (original as CustomEvent)['detail']['triggeringEvent'],\n    );\n    (event as {originalTimestamp?: number | null} | null)!.originalTimestamp = original.timeStamp;\n  } else {\n    // This ensures we don't send an undefined event object to the replayer.\n    event = createGenericEvent(original, opt_eventType);\n  }\n  return event;\n}\n\n/**\n * Sends an event for replay to the DOM.\n * @param target The target for the event.\n * @param event The event object.\n * @return The return value of the event replay, i.e., whether preventDefault()\n *     was called on it.\n */\nexport function triggerEvent(target: EventTarget, event: Event): boolean {\n  if (target.dispatchEvent) {\n    return target.dispatchEvent(event);\n  } else {\n    // Suppressing errors for ts-migration.\n    //   TS2339: Property 'fireEvent' does not exist on type 'Element'.\n    // @ts-ignore\n    return (target as Element).fireEvent('on' + event.type, event);\n  }\n}\n\n/** Do not use outiside of testing. */\nexport const testing = {\n  createKeyboardModifiersList,\n  createGenericEvent,\n  isKeyboardEvent,\n  isMouseEvent,\n  isUiEvent,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview An enum to control who can call certain jsaction APIs.\n */\n\nexport enum Restriction {\n  I_AM_THE_JSACTION_FRAMEWORK = 1,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute as AccessibilityAttribute} from './accessibility';\nimport * as eventLib from './event';\nimport {EventInfo, EventInfoWrapper} from './event_info';\nimport {EventType} from './event_type';\nimport {UnrenamedEventContract} from './eventcontract';\nimport {replayEvent} from './replay';\nimport {Restriction} from './restriction';\n/**\n * A replayer is a function that is called when there are queued events,\n * either from the `EventContract` or when there are no detected handlers.\n */\nexport type Replayer = (eventInfoWrappers: EventInfoWrapper[]) => void;\n/**\n * A handler is dispatched to during normal handling.\n */\nexport type EventInfoWrapperHandler = (eventInfoWrapper: EventInfoWrapper) => void;\n/**\n * Receives a DOM event, determines the jsaction associated with the source\n * element of the DOM event, and invokes the handler associated with the\n * jsaction.\n */\nexport class BaseDispatcher {\n  /** The queue of events. */\n  private readonly queuedEventInfoWrappers: EventInfoWrapper[] = [];\n  /** The replayer function to be called when there are queued events. */\n  private eventReplayer?: Replayer;\n  /** Whether the event replay is scheduled. */\n  private eventReplayScheduled = false;\n\n  /**\n   * Options are:\n   *   1. `eventReplayer`: When the event contract dispatches replay events\n   *      to the Dispatcher, the Dispatcher collects them and in the next tick\n   *      dispatches them to the `eventReplayer`.\n   * @param dispatchDelegate A function that should handle dispatching an `EventInfoWrapper` to handlers.\n   */\n  constructor(\n    private readonly dispatchDelegate: (\n      eventInfoWrapper: EventInfoWrapper,\n      isGlobalDispatch?: boolean,\n    ) => void,\n    {eventReplayer = undefined}: {eventReplayer?: Replayer} = {},\n  ) {\n    this.eventReplayer = eventReplayer;\n  }\n\n  /**\n   * Receives an event or the event queue from the EventContract. The event\n   * queue is copied and it attempts to replay.\n   * If event info is passed in it looks for an action handler that can handle\n   * the given event.  If there is no handler registered queues the event and\n   * checks if a loader is registered for the given namespace. If so, calls it.\n   *\n   * Alternatively, if in global dispatch mode, calls all registered global\n   * handlers for the appropriate event type.\n   *\n   * The three functionalities of this call are deliberately not split into\n   * three methods (and then declared as an abstract interface), because the\n   * interface is used by EventContract, which lives in a different jsbinary.\n   * Therefore the interface between the three is defined entirely in terms that\n   * are invariant under jscompiler processing (Function and Array, as opposed\n   * to a custom type with method names).\n   *\n   * @param eventInfo The info for the event that triggered this call or the\n   *     queue of events from EventContract.\n   * @param isGlobalDispatch If true, dispatches a global event instead of a\n   *     regular jsaction handler.\n   * @return An `EventInfo` for the `EventContract` to handle again if the\n   *    `Dispatcher` tried to resolve an a11y event as a click but failed.\n   */\n  dispatch(eventInfo: EventInfo, isGlobalDispatch?: boolean): EventInfo | void {\n    const eventInfoWrapper = new EventInfoWrapper(eventInfo);\n    if (eventInfoWrapper.getIsReplay()) {\n      if (isGlobalDispatch || !this.eventReplayer) {\n        return;\n      }\n      const resolved = resolveA11yEvent(eventInfoWrapper, isGlobalDispatch);\n      if (!resolved) {\n        // Send the event back through the `EventContract` by dispatching to\n        // the browser.\n        replayEvent(\n          eventInfoWrapper.getEvent(),\n          eventInfoWrapper.getTargetElement(),\n          eventInfoWrapper.getEventType(),\n        );\n        return;\n      }\n      this.queueEventInfoWrapper(eventInfoWrapper);\n      this.scheduleEventReplay();\n      return;\n    }\n    const resolved = resolveA11yEvent(eventInfoWrapper, isGlobalDispatch);\n    if (!resolved) {\n      // Reset action information.\n      eventInfoWrapper.setAction(undefined);\n      return eventInfoWrapper.eventInfo;\n    }\n    this.dispatchDelegate(eventInfoWrapper, isGlobalDispatch);\n  }\n\n  /** Queue an `EventInfoWrapper` for replay. */\n  queueEventInfoWrapper(eventInfoWrapper: EventInfoWrapper) {\n    this.queuedEventInfoWrappers.push(eventInfoWrapper);\n  }\n\n  /**\n   * Replays queued events, if any. The replaying will happen in its own\n   * stack once the current flow cedes control. This is done to mimic\n   * browser event handling.\n   */\n  scheduleEventReplay() {\n    if (\n      this.eventReplayScheduled ||\n      !this.eventReplayer ||\n      this.queuedEventInfoWrappers.length === 0\n    ) {\n      return;\n    }\n    this.eventReplayScheduled = true;\n    Promise.resolve().then(() => {\n      this.eventReplayScheduled = false;\n      this.eventReplayer!(this.queuedEventInfoWrappers);\n    });\n  }\n}\n\n/**\n * If a 'MAYBE_CLICK_EVENT_TYPE' event was dispatched, updates the eventType\n * to either click or keydown based on whether the keydown action can be\n * treated as a click. For MAYBE_CLICK_EVENT_TYPE events that are just\n * keydowns, we set flags on the event object so that the event contract\n * does't try to dispatch it as a MAYBE_CLICK_EVENT_TYPE again.\n *\n * @param isGlobalDispatch Whether the eventInfo is meant to be dispatched to\n *     the global handlers.\n * @return Returns false if the a11y event could not be resolved and should\n *    be re-dispatched.\n */\nfunction resolveA11yEvent(eventInfoWrapper: EventInfoWrapper, isGlobalDispatch = false): boolean {\n  if (eventInfoWrapper.getEventType() !== AccessibilityAttribute.MAYBE_CLICK_EVENT_TYPE) {\n    return true;\n  }\n  if (isA11yClickEvent(eventInfoWrapper, isGlobalDispatch)) {\n    if (shouldPreventDefault(eventInfoWrapper)) {\n      eventLib.preventDefault(eventInfoWrapper.getEvent());\n    }\n    // If the keydown event can be treated as a click, we change the eventType\n    // to 'click' so that the dispatcher can retrieve the right handler for\n    // it. Even though EventInfo['action'] corresponds to the click action,\n    // the global handler and any custom 'getHandler' implementations may rely\n    // on the eventType instead.\n    eventInfoWrapper.setEventType(EventType.CLICK);\n  } else {\n    // Otherwise, if the keydown can't be treated as a click, we need to\n    // retrigger it because now we need to look for 'keydown' actions instead.\n    eventInfoWrapper.setEventType(EventType.KEYDOWN);\n    if (!isGlobalDispatch) {\n      // This prevents the event contract from setting the\n      // AccessibilityAttribute.MAYBE_CLICK_EVENT_TYPE type for Keydown\n      // events.\n      eventInfoWrapper.getEvent()[AccessibilityAttribute.SKIP_A11Y_CHECK] = true;\n      // Since globally dispatched events will get handled by the dispatcher,\n      // don't have the event contract dispatch it again.\n      eventInfoWrapper.getEvent()[AccessibilityAttribute.SKIP_GLOBAL_DISPATCH] = true;\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns true if the default action for this event should be prevented\n * before the event handler is envoked.\n */\nfunction shouldPreventDefault(eventInfoWrapper: EventInfoWrapper): boolean {\n  const actionElement = eventInfoWrapper.getAction()?.element;\n  // For parity with no-a11y-support behavior.\n  if (!actionElement) {\n    return false;\n  }\n  // Prevent scrolling if the Space key was pressed\n  if (eventLib.isSpaceKeyEvent(eventInfoWrapper.getEvent())) {\n    return true;\n  }\n  // or prevent the browser's default action for native HTML controls.\n  if (eventLib.shouldCallPreventDefaultOnNativeHtmlControl(eventInfoWrapper.getEvent())) {\n    return true;\n  }\n  // Prevent browser from following <a> node links if a jsaction is present\n  // and we are dispatching the action now. Note that the targetElement may be\n  // a child of an anchor that has a jsaction attached. For that reason, we\n  // need to check the actionElement rather than the targetElement.\n  if (actionElement.tagName === 'A') {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns true if the given key event can be treated as a 'click'.\n *\n * @param isGlobalDispatch Whether the eventInfo is meant to be dispatched to\n *     the global handlers.\n */\nfunction isA11yClickEvent(eventInfoWrapper: EventInfoWrapper, isGlobalDispatch?: boolean): boolean {\n  return (\n    (isGlobalDispatch || eventInfoWrapper.getAction() !== undefined) &&\n    eventLib.isActionKeyEvent(eventInfoWrapper.getEvent())\n  );\n}\n\n/**\n * Registers deferred functionality for an EventContract and a Jsaction\n * Dispatcher.\n */\nexport function registerDispatcher(\n  eventContract: UnrenamedEventContract,\n  dispatcher: BaseDispatcher,\n) {\n  eventContract.ecrd((eventInfo: EventInfo, globalDispatch?: boolean) => {\n    return dispatcher.dispatch(eventInfo, globalDispatch);\n  }, Restriction.I_AM_THE_JSACTION_FRAMEWORK);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const Char = {\n  /**\n   * The separator between the namespace and the action name in the\n   * jsaction attribute value.\n   */\n  NAMESPACE_ACTION_SEPARATOR: '.',\n\n  /**\n   * The separator between the event name and action in the jsaction\n   * attribute value.\n   */\n  EVENT_ACTION_SEPARATOR: ':',\n\n  /**\n   * The separator between the logged oi attribute values in the &oi=\n   * URL parameter value.\n   */\n  OI_SEPARATOR: '.',\n\n  /**\n   * The separator between the key and the value pairs in the &cad=\n   * URL parameter value.\n   */\n  CAD_KEY_VALUE_SEPARATOR: ':',\n\n  /**\n   * The separator between the key-value pairs in the &cad= URL\n   * parameter value.\n   */\n  CAD_SEPARATOR: ',',\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseDispatcher, EventInfoWrapperHandler} from './base_dispatcher';\nimport {Char} from './char';\nimport * as eventLib from './event';\nimport {EventInfo, EventInfoWrapper} from './event_info';\nimport {EventType} from './event_type';\nimport {UnrenamedEventContract} from './eventcontract';\nimport {Restriction} from './restriction';\n\nexport type {EventInfoWrapperHandler as EventInfoHandler} from './base_dispatcher';\n\n/**\n * A global handler is dispatched to before normal handler dispatch. Returning\n * false will `preventDefault` on the event.\n */\nexport type GlobalHandler = (event: Event) => boolean | void;\n\n/**\n * A replayer is a function that is called when there are queued events,\n * either from the `EventContract` or when there are no detected handlers.\n */\nexport type Replayer = (eventInfoWrappers: EventInfoWrapper[], dispatcher: Dispatcher) => void;\n\n/**\n * Receives a DOM event, determines the jsaction associated with the source\n * element of the DOM event, and invokes the handler associated with the\n * jsaction.\n */\nexport class Dispatcher {\n  private readonly baseDispatcher: BaseDispatcher;\n\n  /** Whether to stop propagation for an `EventInfo`. */\n  private readonly stopPropagation: boolean;\n\n  /**\n   * The actions that are registered for this Dispatcher instance.\n   * This should be the primary one used once migration off of registerHandlers\n   * is done.\n   */\n  private readonly actions: {[key: string]: EventInfoWrapperHandler} = {};\n\n  /** A map of global event handlers, where each key is an event type. */\n  private readonly globalHandlers = new Map<string, Set<GlobalHandler>>();\n\n  /** The event replayer. */\n  private eventReplayer?: Replayer;\n\n  /**\n   * Receives a DOM event, determines the jsaction associated with the source\n   * element of the DOM event, and invokes the handler associated with the\n   * jsaction.\n   *\n   * @param getHandler A function that knows how to get the handler for a\n   *     given event info.\n   */\n  constructor(\n    private readonly getHandler?: (\n      eventInfoWrapper: EventInfoWrapper,\n    ) => EventInfoWrapperHandler | void,\n    {\n      stopPropagation = false,\n      eventReplayer = undefined,\n    }: {stopPropagation?: boolean; eventReplayer?: Replayer} = {},\n  ) {\n    this.baseDispatcher = new BaseDispatcher(\n      (eventInfoWrapper: EventInfoWrapper, isGlobalDispatch?: boolean) => {\n        this.dispatchToHandler(eventInfoWrapper, isGlobalDispatch);\n      },\n      {\n        eventReplayer: (eventInfoWrappers) => {\n          this.eventReplayer?.(eventInfoWrappers, this);\n        },\n      },\n    );\n    this.stopPropagation = stopPropagation;\n  }\n\n  /**\n   * Receives an event or the event queue from the EventContract. The event\n   * queue is copied and it attempts to replay.\n   * If event info is passed in it looks for an action handler that can handle\n   * the given event.  If there is no handler registered queues the event and\n   * checks if a loader is registered for the given namespace. If so, calls it.\n   *\n   * Alternatively, if in global dispatch mode, calls all registered global\n   * handlers for the appropriate event type.\n   *\n   * The three functionalities of this call are deliberately not split into\n   * three methods (and then declared as an abstract interface), because the\n   * interface is used by EventContract, which lives in a different jsbinary.\n   * Therefore the interface between the three is defined entirely in terms that\n   * are invariant under jscompiler processing (Function and Array, as opposed\n   * to a custom type with method names).\n   *\n   * @param eventInfo The info for the event that triggered this call or the\n   *     queue of events from EventContract.\n   * @param isGlobalDispatch If true, dispatches a global event instead of a\n   *     regular jsaction handler.\n   * @return An `EventInfo` for the `EventContract` to handle again if the\n   *    `Dispatcher` tried to resolve an a11y event as a click but failed.\n   */\n  dispatch(eventInfo: EventInfo, isGlobalDispatch?: boolean): EventInfo | void {\n    return this.baseDispatcher.dispatch(eventInfo, isGlobalDispatch);\n  }\n\n  /**\n   * Dispatches an `EventInfoWrapper`.\n   */\n  private dispatchToHandler(eventInfoWrapper: EventInfoWrapper, isGlobalDispatch?: boolean) {\n    if (isGlobalDispatch) {\n      // Skip everything related to jsaction handlers, and execute the global\n      // handlers.\n      const ev = eventInfoWrapper.getEvent();\n      const eventTypeHandlers = this.globalHandlers.get(eventInfoWrapper.getEventType());\n      let shouldPreventDefault = false;\n      if (eventTypeHandlers) {\n        for (const handler of eventTypeHandlers) {\n          if (handler(ev) === false) {\n            shouldPreventDefault = true;\n          }\n        }\n      }\n      if (shouldPreventDefault) {\n        eventLib.preventDefault(ev);\n      }\n      return;\n    }\n\n    if (this.stopPropagation) {\n      stopPropagation(eventInfoWrapper);\n    }\n\n    const action = eventInfoWrapper.getAction()!;\n\n    let handler: EventInfoWrapperHandler | void = undefined;\n    if (this.getHandler) {\n      handler = this.getHandler(eventInfoWrapper);\n    }\n\n    if (!handler) {\n      handler = this.actions[action.name];\n    }\n\n    if (handler) {\n      handler(eventInfoWrapper);\n      return;\n    }\n\n    // No handler was found.\n    this.baseDispatcher.queueEventInfoWrapper(eventInfoWrapper);\n  }\n\n  /**\n   * Registers multiple methods all bound to the same object\n   * instance. This is a common case: an application module binds\n   * multiple of its methods under public names to the event contract of\n   * the application. So we provide a shortcut for it.\n   * Attempts to replay the queued events after registering the handlers.\n   *\n   * @param namespace The namespace of the jsaction name.\n   *\n   * @param instance The object to bind the methods to. If this is null, then\n   *     the functions are not bound, but directly added under the public names.\n   *\n   * @param methods A map from public name to functions that will be bound to\n   *     instance and registered as action under the public name. I.e. the\n   *     property names are the public names. The property values are the\n   *     methods of instance.\n   */\n  registerEventInfoHandlers<T>(\n    namespace: string,\n    instance: T | null,\n    methods: {[key: string]: EventInfoWrapperHandler},\n  ) {\n    for (const [name, method] of Object.entries(methods)) {\n      const handler = instance ? method.bind(instance) : method;\n      if (namespace) {\n        // Include a '.' separator between namespace name and action name.\n        // In the case that no namespace name is provided, the jsaction name\n        // consists of the action name only (no period).\n        const fullName = namespace + Char.NAMESPACE_ACTION_SEPARATOR + name;\n        this.actions[fullName] = handler;\n      } else {\n        this.actions[name] = handler;\n      }\n    }\n\n    this.baseDispatcher.scheduleEventReplay();\n  }\n\n  /**\n   * Unregisters an action.  Provided as an easy way to reverse the effects of\n   * registerHandlers.\n   * @param namespace The namespace of the jsaction name.\n   * @param name The action name to unbind.\n   */\n  unregisterHandler(namespace: string, name: string) {\n    const fullName = namespace ? namespace + Char.NAMESPACE_ACTION_SEPARATOR + name : name;\n    delete this.actions[fullName];\n  }\n\n  /** Registers a global event handler. */\n  registerGlobalHandler(eventType: string, handler: GlobalHandler) {\n    if (!this.globalHandlers.has(eventType)) {\n      this.globalHandlers.set(eventType, new Set<GlobalHandler>([handler]));\n    } else {\n      this.globalHandlers.get(eventType)!.add(handler);\n    }\n  }\n\n  /** Unregisters a global event handler. */\n  unregisterGlobalHandler(eventType: string, handler: GlobalHandler) {\n    if (this.globalHandlers.has(eventType)) {\n      this.globalHandlers.get(eventType)!.delete(handler);\n    }\n  }\n\n  /**\n   * Checks whether there is an action registered under the given\n   * name. This returns true if there is a namespace handler, even\n   * if it can not yet handle the event.\n   *\n   * @param name Action name.\n   * @return Whether the name is registered.\n   * @see #canDispatch\n   */\n  hasAction(name: string): boolean {\n    return this.actions.hasOwnProperty(name);\n  }\n\n  /**\n   * Whether this dispatcher can dispatch the event. This can be used by\n   * event replayer to check whether the dispatcher can replay an event.\n   */\n  canDispatch(eventInfoWrapper: EventInfoWrapper): boolean {\n    const action = eventInfoWrapper.getAction();\n    if (!action) {\n      return false;\n    }\n    return this.hasAction(action.name);\n  }\n\n  /**\n   * Sets the event replayer, enabling queued events to be replayed when actions\n   * are bound. To replay events, you must register the dispatcher to the\n   * contract after setting the `EventReplayer`. The event replayer takes as\n   * parameters the queue of events and the dispatcher (used to check whether\n   * actions have handlers registered and can be replayed). The event replayer\n   * is also responsible for dequeuing events.\n   *\n   * Example: An event replayer that replays only the last event.\n   *\n   *   const dispatcher = new Dispatcher();\n   *   // ...\n   *   dispatcher.setEventReplayer((queue, dispatcher) => {\n   *     const lastEventInfoWrapper = queue[queue.length -1];\n   *     if (dispatcher.canDispatch(lastEventInfoWrapper.getAction())) {\n   *       jsaction.replay.replayEvent(\n   *           lastEventInfoWrapper.getEvent(),\n   *           lastEventInfoWrapper.getTargetElement(),\n   *           lastEventInfoWrapper.getEventType(),\n   *       );\n   *       queue.length = 0;\n   *     }\n   *   });\n   *\n   * @param eventReplayer It allows elements to be replayed and dequeuing.\n   */\n  setEventReplayer(eventReplayer: Replayer) {\n    this.eventReplayer = eventReplayer;\n  }\n}\n\n/** Stop propagation for an `EventInfo`. */\nexport function stopPropagation(eventInfoWrapper: EventInfoWrapper) {\n  if (\n    eventLib.isGecko &&\n    (eventInfoWrapper.getTargetElement().tagName === 'INPUT' ||\n      eventInfoWrapper.getTargetElement().tagName === 'TEXTAREA') &&\n    eventInfoWrapper.getEventType() === EventType.FOCUS\n  ) {\n    /**\n     * Do nothing since stopping propagation on a focus event on an input\n     * element in Firefox makes the text cursor disappear:\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=509684\n     */\n    return;\n  }\n\n  const event = eventInfoWrapper.getEvent();\n  // There are some cases where users of the `Dispatcher` will call dispatch\n  // with a fake event that does not support `stopPropagation`.\n  if (!event.stopPropagation) {\n    return;\n  }\n  event.stopPropagation();\n}\n\n/**\n * Registers deferred functionality for an EventContract and a Jsaction\n * Dispatcher.\n */\nexport function registerDispatcher(eventContract: UnrenamedEventContract, dispatcher: Dispatcher) {\n  eventContract.ecrd((eventInfo: EventInfo, globalDispatch?: boolean) => {\n    return dispatcher.dispatch(eventInfo, globalDispatch);\n  }, Restriction.I_AM_THE_JSACTION_FRAMEWORK);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as eventLib from './event';\nimport {EventHandlerInfo} from './event_handler';\n\n/**\n * An `EventContractContainerManager` provides the common interface for managing\n * containers.\n */\nexport interface EventContractContainerManager {\n  addEventListener(\n    eventType: string,\n    getHandler: (element: Element) => (event: Event) => void,\n  ): void;\n\n  cleanUp(): void;\n}\n\n/**\n * Whether the user agent is running on iOS.\n */\nconst isIos = typeof navigator !== 'undefined' && /iPhone|iPad|iPod/.test(navigator.userAgent);\n\n/**\n * A class representing a container node and all the event handlers\n * installed on it. Used so that handlers can be cleaned up if the\n * container is removed from the contract.\n */\nexport class EventContractContainer implements EventContractContainerManager {\n  /**\n   * Array of event handlers and their corresponding event types that are\n   * installed on this container.\n   *\n   */\n  private handlerInfos: EventHandlerInfo[] = [];\n\n  /**\n   * @param element The container Element.\n   */\n  constructor(readonly element: Element) {}\n\n  /**\n   * Installs the provided installer on the element owned by this container,\n   * and maintains a reference to resulting handler in order to remove it\n   * later if desired.\n   */\n  addEventListener(eventType: string, getHandler: (element: Element) => (event: Event) => void) {\n    // In iOS, event bubbling doesn't happen automatically in any DOM element,\n    // unless it has an onclick attribute or DOM event handler attached to it.\n    // This breaks JsAction in some cases. See \"Making Elements Clickable\"\n    // section at http://goo.gl/2VoGnB.\n    //\n    // A workaround for this issue is to change the CSS cursor style to 'pointer'\n    // for the container element, which magically turns on event bubbling. This\n    // solution is described in the comments section at http://goo.gl/6pEO1z.\n    //\n    // We use a navigator.userAgent check here as this problem is present both\n    // on Mobile Safari and thin WebKit wrappers, such as Chrome for iOS.\n    if (isIos) {\n      (this.element as HTMLElement).style.cursor = 'pointer';\n    }\n    this.handlerInfos.push(\n      eventLib.addEventListener(this.element, eventType, getHandler(this.element)),\n    );\n  }\n\n  /**\n   * Removes all the handlers installed on this container.\n   */\n  cleanUp() {\n    for (let i = 0; i < this.handlerInfos.length; i++) {\n      eventLib.removeEventListener(this.element, this.handlerInfos[i]);\n    }\n\n    this.handlerInfos = [];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as eventLib from './event';\nimport * as eventInfoLib from './event_info';\nimport {EventType} from './event_type';\n\n/**\n * Update `EventInfo` to be `eventType = 'click'` and sets `a11yClickKey` if it\n * is a a11y click.\n */\nexport function updateEventInfoForA11yClick(eventInfo: eventInfoLib.EventInfo) {\n  if (!eventLib.isActionKeyEvent(eventInfoLib.getEvent(eventInfo))) {\n    return;\n  }\n  eventInfoLib.setA11yClickKey(eventInfo, true);\n  // A 'click' triggered by a DOM keypress should be mapped to the 'click'\n  // jsaction.\n  eventInfoLib.setEventType(eventInfo, EventType.CLICK);\n}\n\n/**\n * Call `preventDefault` on an a11y click if it is space key or to prevent the\n * browser's default action for native HTML controls.\n */\nexport function preventDefaultForA11yClick(eventInfo: eventInfoLib.EventInfo) {\n  if (\n    !eventInfoLib.getA11yClickKey(eventInfo) ||\n    (!eventLib.isSpaceKeyEvent(eventInfoLib.getEvent(eventInfo)) &&\n      !eventLib.shouldCallPreventDefaultOnNativeHtmlControl(eventInfoLib.getEvent(eventInfo)))\n  ) {\n    return;\n  }\n  eventLib.preventDefault(eventInfoLib.getEvent(eventInfo));\n}\n\n/**\n * Sets the `action` to `clickonly` for a click event that is not an a11y click\n * and if there is not already a click action.\n */\nexport function populateClickOnlyAction(\n  actionElement: Element,\n  eventInfo: eventInfoLib.EventInfo,\n  actionMap: {[key: string]: string},\n) {\n  if (\n    // If there's already an action, don't attempt to set a CLICKONLY\n    eventInfoLib.getAction(eventInfo) ||\n    // Only attempt CLICKONLY if the type is CLICK\n    eventInfoLib.getEventType(eventInfo) !== EventType.CLICK ||\n    // a11y clicks are never CLICKONLY\n    eventInfoLib.getA11yClickKey(eventInfo) ||\n    actionMap[EventType.CLICKONLY] === undefined\n  ) {\n    return;\n  }\n  eventInfoLib.setEventType(eventInfo, EventType.CLICKONLY);\n  eventInfoLib.setAction(eventInfo, actionMap[EventType.CLICKONLY], actionElement);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport enum Attribute {\n  /**\n   * The jsaction attribute defines a mapping of a DOM event to a\n   * generic event (aka jsaction), to which the actual event handlers\n   * that implement the behavior of the application are bound. The\n   * value is a semicolon separated list of colon separated pairs of\n   * an optional DOM event name and a jsaction name. If the optional\n   * DOM event name is omitted, 'click' is assumed. The jsaction names\n   * are dot separated pairs of a namespace and a simple jsaction\n   * name. If the namespace is absent, it is taken from the closest\n   * ancestor element with a jsnamespace attribute, if there is\n   * any. If there is no ancestor with a jsnamespace attribute, the\n   * simple name is assumed to be the jsaction name.\n   *\n   * Used by EventContract.\n   */\n  JSACTION = 'jsaction',\n\n  /**\n   * The jsnamespace attribute provides the namespace part of the\n   * jaction names occurring in the jsaction attribute where it's\n   * missing.\n   *\n   * Used by EventContract.\n   */\n  JSNAMESPACE = 'jsnamespace',\n\n  /**\n   * The oi attribute is a log impression tag for impression logging\n   * and action tracking. For an element that carries a jsaction\n   * attribute, the element is identified for the purpose of\n   * impression logging and click tracking by the dot separated path\n   * of all oi attributes in the chain of ancestors of the element.\n   *\n   * Used by ActionFlow.\n   */\n  OI = 'oi',\n\n  /**\n   * The ved attribute is an encoded ClickTrackingCGI proto to track\n   * visual elements.\n   *\n   * Used by ActionFlow.\n   */\n  VED = 'ved',\n\n  /**\n   * The vet attribute is the visual element type used to identify tracked\n   * visual elements.\n   */\n  VET = 'vet',\n\n  /**\n   * Support for iteration on reprocessing.\n   *\n   * Used by ActionFlow.\n   */\n  JSINSTANCE = 'jsinstance',\n\n  /**\n   * All click jsactions that happen on the element that carries this\n   * attribute or its descendants are automatically logged.\n   * Impressions of jsactions on these elements are tracked too, if\n   * requested by the impression() method of ActionFlow.\n   *\n   * Used by ActionFlow.\n   */\n  JSTRACK = 'jstrack',\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** All properties that are used by jsaction. */\nexport enum Property {\n  /**\n   * The parsed value of the jsaction attribute is stored in this\n   * property on the DOM node. The parsed value is an Object. The\n   * property names of the object are the events; the values are the\n   * names of the actions. This property is attached even on nodes\n   * that don't have a jsaction attribute as an optimization, because\n   * property lookup is faster than attribute access.\n   */\n  JSACTION = '__jsaction',\n\n  /**\n   * The parsed value of the jsnamespace attribute is stored in this\n   * property on the DOM node.\n   */\n  JSNAMESPACE = '__jsnamespace',\n\n  /** The value of the oi attribute as a property, for faster access. */\n  OI = '__oi',\n\n  /**\n   * The owner property references an a logical owner for a DOM node. JSAction\n   * will follow this reference instead of parentNode when traversing the DOM\n   * to find jsaction attributes. This allows overlaying a logical structure\n   * over a document where the DOM structure can't reflect that structure.\n   */\n  OWNER = '__owner',\n}\n\ndeclare global {\n  interface Node {\n    [Property.JSACTION]?: string;\n    [Property.JSNAMESPACE]?: string;\n    [Property.OI]?: string;\n    [Property.OWNER]?: ParentNode;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Property} from './property';\n\n/**\n * Map from jsaction annotation to a parsed map from event name to action name.\n */\nconst parseCache: {[key: string]: {[key: string]: string}} = {};\n\n/**\n * Reads the jsaction parser cache from the given DOM Element.\n *\n * @param element .\n * @return Map from event to qualified name of the jsaction bound to it.\n */\nexport function get(element: Element): {[key: string]: string} {\n  // @ts-ignore\n  return element[Property.JSACTION];\n}\n\n/**\n * Writes the jsaction parser cache to the given DOM Element.\n *\n * @param element .\n * @param actionMap Map from event to qualified name of the jsaction bound to\n *     it.\n */\nexport function set(element: Element, actionMap: {[key: string]: string}) {\n  // @ts-ignore\n  element[Property.JSACTION] = actionMap;\n}\n\n/**\n * Looks up the parsed action map from the source jsaction attribute value.\n *\n * @param text Unparsed jsaction attribute value.\n * @return Parsed jsaction attribute value, if already present in the cache.\n */\nexport function getParsed(text: string): {[key: string]: string} | undefined {\n  return parseCache[text];\n}\n\n/**\n * Inserts the parse result for the given source jsaction value into the cache.\n *\n * @param text Unparsed jsaction attribute value.\n * @param parsed Attribute value parsed into the action map.\n */\nexport function setParsed(text: string, parsed: {[key: string]: string}) {\n  parseCache[text] = parsed;\n}\n\n/**\n * Clears the jsaction parser cache from the given DOM Element.\n *\n * @param element .\n */\nexport function clear(element: Element) {\n  if (Property.JSACTION in element) {\n    delete element[Property.JSACTION];\n  }\n}\n\n/**\n * Reads the cached jsaction namespace from the given DOM\n * Element. Undefined means there is no cached value; null is a cached\n * jsnamespace attribute that's absent.\n *\n * @param element .\n * @return .\n */\nexport function getNamespace(element: Element): string | null | undefined {\n  // @ts-ignore\n  return element[Property.JSNAMESPACE];\n}\n\n/**\n * Writes the cached jsaction namespace to the given DOM Element. Null\n * represents a jsnamespace attribute that's absent.\n *\n * @param element .\n * @param jsnamespace .\n */\nexport function setNamespace(element: Element, jsnamespace: string | null) {\n  // @ts-ignore\n  element[Property.JSNAMESPACE] = jsnamespace;\n}\n\n/**\n * Clears the cached jsaction namespace from the given DOM Element.\n *\n * @param element .\n */\nexport function clearNamespace(element: Element) {\n  if (Property.JSNAMESPACE in element) {\n    delete element[Property.JSNAMESPACE];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @define Support for jsnamespace attribute.  This flag can be overridden in a\n * build rule to trim down the EventContract's binary size.\n */\nexport const JSNAMESPACE_SUPPORT = true;\n\n/**\n * @define Handles a11y click casting in the dispatcher rather than\n * the event contract. When enabled, it will enable\n * EventContract.A11Y_CLICK_SUPPORT as well as both are required for this\n * functionality.\n */\nexport const A11Y_SUPPORT_IN_DISPATCHER = false;\n\n/**\n * @define Support for accessible click actions.  This flag can be overridden in\n * a build rule.\n */\nconst A11Y_CLICK_SUPPORT_FLAG_ENABLED = false;\n\n/**\n * Enables a11y click casting when either A11Y_CLICK_SUPPORT_FLAG_ENABLED or\n * A11Y_SUPPORT_IN_DISPATCHER.\n */\nexport const A11Y_CLICK_SUPPORT = A11Y_CLICK_SUPPORT_FLAG_ENABLED || A11Y_SUPPORT_IN_DISPATCHER;\n\n/**\n * @define Support for the non-bubbling mouseenter and mouseleave events.  This\n * flag can be overridden in a build rule.\n */\nexport const MOUSE_SPECIAL_SUPPORT = false;\n\n/**\n * @define Call stopPropagation on handled events. When integrating with\n * non-jsaction event handler based code, you will likely want to turn this flag\n * off. While most event handlers will continue to work, jsaction binds focus\n * and blur events in the capture phase and thus with stopPropagation, none of\n * your non-jsaction-handlers will ever see it.\n */\nexport const STOP_PROPAGATION = true;\n\n/**\n * @define Support for custom events, which are type EventType.CUSTOM. These are\n * native DOM events with an additional type field and an optional payload.\n */\nexport const CUSTOM_EVENT_SUPPORT = false;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview Implements the local event handling contract. This\n * allows DOM objects in a container that enters into this contract to\n * define event handlers which are executed in a local context.\n *\n * One EventContract instance can manage the contract for multiple\n * containers, which are added using the addContainer() method.\n *\n * Events can be registered using the addEvent() method.\n *\n * A Dispatcher is added using the registerDispatcher() method. Until there is\n * a dispatcher, events are queued. The idea is that the EventContract\n * class is inlined in the HTML of the top level page and instantiated\n * right after the start of <body>. The Dispatcher class is contained\n * in the external deferred js, and instantiated and registered with\n * EventContract when the external javascript in the page loads. The\n * external javascript will also register the jsaction handlers, which\n * then pick up the queued events at the time of registration.\n *\n * Since this class is meant to be inlined in the main page HTML, the\n * size of the binary compiled from this file MUST be kept as small as\n * possible and thus its dependencies to a minimum.\n */\n\nimport * as a11yClickLib from './a11y_click';\nimport {Attribute as AccessibilityAttribute} from './accessibility';\nimport {Attribute} from './attribute';\nimport * as cache from './cache';\nimport {Char} from './char';\nimport {EarlyJsactionData} from './earlyeventcontract';\nimport * as eventLib from './event';\nimport {EventContractContainerManager} from './event_contract_container';\nimport {\n  A11Y_CLICK_SUPPORT,\n  A11Y_SUPPORT_IN_DISPATCHER,\n  CUSTOM_EVENT_SUPPORT,\n  JSNAMESPACE_SUPPORT,\n  MOUSE_SPECIAL_SUPPORT,\n  STOP_PROPAGATION,\n} from './event_contract_defines';\nimport * as eventInfoLib from './event_info';\nimport {EventType} from './event_type';\nimport {Property} from './property';\nimport {Restriction} from './restriction';\n\n/**\n * The API of an EventContract that is safe to call from any compilation unit.\n */\nexport declare interface UnrenamedEventContract {\n  // Alias for Jsction EventContract registerDispatcher.\n  ecrd(dispatcher: Dispatcher, restriction: Restriction): void;\n  // Unrenamed function. Abbreviation for `eventContract.addA11yClickSupport`.\n  ecaacs?: (\n    updateEventInfoForA11yClick: typeof a11yClickLib.updateEventInfoForA11yClick,\n    preventDefaultForA11yClick: typeof a11yClickLib.preventDefaultForA11yClick,\n    populateClickOnlyAction: typeof a11yClickLib.populateClickOnlyAction,\n  ) => void;\n}\n\n/** A function that is called to handle events captured by the EventContract. */\nexport type Dispatcher = (\n  eventInfo: eventInfoLib.EventInfo,\n  globalDispatch?: boolean,\n) => eventInfoLib.EventInfo | void;\n\n/**\n * A function that handles an event dispatched from the browser.\n *\n * eventType: May differ from `event.type` if JSAction uses a\n * short-hand name or is patching over an non-bubbling event with a bubbling\n * variant.\n * event: The native browser event.\n * container: The container for this dispatch.\n */\ntype EventHandler = (eventType: string, event: Event, container: Element) => void;\n\nconst DEFAULT_EVENT_TYPE: string = EventType.CLICK;\n\n/**\n * Since maps from event to action are immutable we can use a single map\n * to represent the empty map.\n */\nconst EMPTY_ACTION_MAP: {[key: string]: string} = {};\n\n/**\n * This regular expression matches a semicolon.\n */\nconst REGEXP_SEMICOLON = /\\s*;\\s*/;\n\n/**\n * EventContract intercepts events in the bubbling phase at the\n * boundary of a container element, and maps them to generic actions\n * which are specified using the custom jsaction attribute in\n * HTML. Behavior of the application is then specified in terms of\n * handler for such actions, cf. jsaction.Dispatcher in dispatcher.js.\n *\n * This has several benefits: (1) No DOM event handlers need to be\n * registered on the specific elements in the UI. (2) The set of\n * events that the application has to handle can be specified in terms\n * of the semantics of the application, rather than in terms of DOM\n * events. (3) Invocation of handlers can be delayed and handlers can\n * be delay loaded in a generic way.\n */\nexport class EventContract implements UnrenamedEventContract {\n  static CUSTOM_EVENT_SUPPORT = CUSTOM_EVENT_SUPPORT;\n  static STOP_PROPAGATION = STOP_PROPAGATION;\n  static A11Y_SUPPORT_IN_DISPATCHER = A11Y_SUPPORT_IN_DISPATCHER;\n  static A11Y_CLICK_SUPPORT = A11Y_CLICK_SUPPORT;\n  static MOUSE_SPECIAL_SUPPORT = MOUSE_SPECIAL_SUPPORT;\n  static JSNAMESPACE_SUPPORT = JSNAMESPACE_SUPPORT;\n\n  private containerManager: EventContractContainerManager | null;\n\n  /**\n   * The DOM events which this contract covers. Used to prevent double\n   * registration of event types. The value of the map is the\n   * internally created DOM event handler function that handles the\n   * DOM events. See addEvent().\n   *\n   */\n  private eventHandlers: {[key: string]: EventHandler} = {};\n\n  private browserEventTypeToExtraEventTypes: {[key: string]: string[]} = {};\n\n  /**\n   * The dispatcher function. Events are passed to this function for\n   * handling once it was set using the registerDispatcher() method. This is\n   * done because the function is passed from another jsbinary, so passing the\n   * instance and invoking the method here would require to leave the method\n   * unobfuscated.\n   */\n  private dispatcher: Dispatcher | null = null;\n\n  /**\n   * The list of suspended `EventInfo` that will be dispatched\n   * as soon as the `Dispatcher` is registered.\n   */\n  private queuedEventInfos: eventInfoLib.EventInfo[] | null = [];\n\n  /** Whether a11y click support has been loaded or not. */\n  private hasA11yClickSupport = false;\n  /** Whether to add an a11y click listener. */\n  private addA11yClickListener = EventContract.A11Y_SUPPORT_IN_DISPATCHER;\n\n  private updateEventInfoForA11yClick?: (eventInfo: eventInfoLib.EventInfo) => void = undefined;\n\n  private preventDefaultForA11yClick?: (eventInfo: eventInfoLib.EventInfo) => void = undefined;\n\n  private populateClickOnlyAction?: (\n    actionElement: Element,\n    eventInfo: eventInfoLib.EventInfo,\n    actionMap: {[key: string]: string},\n  ) => void = undefined;\n\n  ecaacs?: (\n    updateEventInfoForA11yClick: typeof a11yClickLib.updateEventInfoForA11yClick,\n    preventDefaultForA11yClick: typeof a11yClickLib.preventDefaultForA11yClick,\n    populateClickOnlyAction: typeof a11yClickLib.populateClickOnlyAction,\n  ) => void;\n\n  constructor(containerManager: EventContractContainerManager) {\n    this.containerManager = containerManager;\n    if (EventContract.CUSTOM_EVENT_SUPPORT) {\n      this.addEvent(EventType.CUSTOM);\n    }\n    if (EventContract.A11Y_CLICK_SUPPORT) {\n      // Add a11y click support to the `EventContract`.\n      this.addA11yClickSupport();\n    }\n  }\n\n  private handleEvent(eventType: string, event: Event, container: Element) {\n    const eventInfo = eventInfoLib.createEventInfoFromParameters(\n      /* eventType= */ eventType,\n      /* event= */ event,\n      /* targetElement= */ event.target as Element,\n      /* container= */ container,\n      /* timestamp= */ Date.now(),\n    );\n    this.handleEventInfo(eventInfo);\n  }\n\n  /**\n   * Handle an `EventInfo`.\n   * @param allowRehandling Used in the case of a11y click casting to prevent\n   * us from trying to rehandle in an infinite loop.\n   */\n  private handleEventInfo(eventInfo: eventInfoLib.EventInfo, allowRehandling = true) {\n    if (!this.dispatcher) {\n      // All events are queued when the dispatcher isn't yet loaded.\n      eventInfoLib.setIsReplay(eventInfo, true);\n      this.queuedEventInfos?.push(eventInfo);\n    }\n    if (\n      EventContract.CUSTOM_EVENT_SUPPORT &&\n      eventInfoLib.getEventType(eventInfo) === EventType.CUSTOM\n    ) {\n      const detail = (eventInfoLib.getEvent(eventInfo) as CustomEvent).detail;\n      // For custom events, use a secondary dispatch based on the internal\n      // custom type of the event.\n      if (!detail || !detail['_type']) {\n        // This should never happen.\n        return;\n      }\n      eventInfoLib.setEventType(eventInfo, detail['_type']);\n    }\n\n    this.populateAction(eventInfo);\n\n    if (\n      this.dispatcher &&\n      !eventInfoLib.getEvent(eventInfo)[AccessibilityAttribute.SKIP_GLOBAL_DISPATCH]\n    ) {\n      const globalEventInfo: eventInfoLib.EventInfo = eventInfoLib.cloneEventInfo(eventInfo);\n\n      // In some cases, `populateAction` will rewrite `click` events to\n      // `clickonly`. Revert back to a regular click, otherwise we won't be able\n      // to execute global event handlers registered on click events.\n      if (eventInfoLib.getEventType(globalEventInfo) === EventType.CLICKONLY) {\n        eventInfoLib.setEventType(globalEventInfo, EventType.CLICK);\n      }\n\n      this.dispatcher(globalEventInfo, /* dispatch global event */ true);\n    }\n\n    const action = eventInfoLib.getAction(eventInfo);\n    if (!action && !checkDispatcherForA11yClick(eventInfo)) {\n      return;\n    }\n\n    if (this.dispatcher) {\n      if (\n        action &&\n        shouldPreventDefaultBeforeDispatching(eventInfoLib.getActionElement(action), eventInfo)\n      ) {\n        eventLib.preventDefault(eventInfoLib.getEvent(eventInfo));\n      }\n\n      const unresolvedEventInfo = this.dispatcher(eventInfo);\n      if (unresolvedEventInfo && allowRehandling) {\n        // The dispatcher only returns an event for MAYBE_CLICK_EVENT_TYPE\n        // events that can't be casted to a click. We run it through the\n        // handler again to find keydown actions for it.\n        this.handleEventInfo(unresolvedEventInfo, /* allowRehandling= */ false);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Searches for a jsaction that the DOM event maps to and creates an\n   * object containing event information used for dispatching by\n   * jsaction.Dispatcher. This method populates the `action` and `actionElement`\n   * fields of the EventInfo object passed in by finding the first\n   * jsaction attribute above the target Node of the event, and below\n   * the container Node, that specifies a jsaction for the event\n   * type. If no such jsaction is found, then action is undefined.\n   *\n   * @param eventInfo `EventInfo` to set `action` and `actionElement` if an\n   *    action is found on any `Element` in the path of the `Event`.\n   */\n  private populateAction(eventInfo: eventInfoLib.EventInfo) {\n    // We distinguish modified and plain clicks in order to support the\n    // default browser behavior of modified clicks on links; usually to\n    // open the URL of the link in new tab or new window on ctrl/cmd\n    // click. A DOM 'click' event is mapped to the jsaction 'click'\n    // event iff there is no modifier present on the event. If there is\n    // a modifier, it's mapped to 'clickmod' instead.\n    //\n    // It's allowed to omit the event in the jsaction attribute. In that\n    // case, 'click' is assumed. Thus the following two are equivalent:\n    //\n    //   <a href=\"someurl\" jsaction=\"gna.fu\">\n    //   <a href=\"someurl\" jsaction=\"click:gna.fu\">\n    //\n    // For unmodified clicks, EventContract invokes the jsaction\n    // 'gna.fu'. For modified clicks, EventContract won't find a\n    // suitable action and leave the event to be handled by the\n    // browser.\n    //\n    // In order to also invoke a jsaction handler for a modifier click,\n    // 'clickmod' needs to be used:\n    //\n    //   <a href=\"someurl\" jsaction=\"clickmod:gna.fu\">\n    //\n    // EventContract invokes the jsaction 'gna.fu' for modified\n    // clicks. Unmodified clicks are left to the browser.\n    //\n    // In order to set up the event contract to handle both clickonly and\n    // clickmod, only addEvent(EventType.CLICK) is necessary.\n    //\n    // In order to set up the event contract to handle click,\n    // addEvent() is necessary for CLICK, KEYDOWN, and KEYPRESS event types.  If\n    // a11y click support is enabled, addEvent() will set up the appropriate key\n    // event handler automatically.\n    if (\n      eventInfoLib.getEventType(eventInfo) === EventType.CLICK &&\n      eventLib.isModifiedClickEvent(eventInfoLib.getEvent(eventInfo))\n    ) {\n      eventInfoLib.setEventType(eventInfo, EventType.CLICKMOD);\n    } else if (this.hasA11yClickSupport) {\n      this.updateEventInfoForA11yClick!(eventInfo);\n    } else if (\n      EventContract.A11Y_SUPPORT_IN_DISPATCHER &&\n      eventInfoLib.getEventType(eventInfo) === EventType.KEYDOWN &&\n      !eventInfoLib.getEvent(eventInfo)[AccessibilityAttribute.SKIP_A11Y_CHECK]\n    ) {\n      // We use a string literal as this value needs to be referenced in the\n      // dispatcher's binary.\n      eventInfoLib.setEventType(eventInfo, AccessibilityAttribute.MAYBE_CLICK_EVENT_TYPE);\n    }\n\n    // Walk to the parent node, unless the node has a different owner in\n    // which case we walk to the owner. Attempt to walk to host of a\n    // shadow root if needed.\n    let actionElement: Element | null = eventInfoLib.getTargetElement(eventInfo);\n    while (actionElement && actionElement !== eventInfoLib.getContainer(eventInfo)) {\n      this.populateActionOnElement(actionElement, eventInfo);\n\n      if (eventInfoLib.getAction(eventInfo)) {\n        // An event is handled by at most one jsaction. Thus we stop at the\n        // first matching jsaction specified in a jsaction attribute up the\n        // ancestor chain of the event target node.\n        break;\n      }\n      if (actionElement[Property.OWNER]) {\n        actionElement = actionElement[Property.OWNER] as Element;\n        continue;\n      }\n      if (actionElement.parentNode?.nodeName !== '#document-fragment') {\n        actionElement = actionElement.parentNode as Element | null;\n      } else {\n        actionElement = (actionElement.parentNode as ShadowRoot | null)?.host ?? null;\n      }\n    }\n\n    const action = eventInfoLib.getAction(eventInfo);\n    if (!action) {\n      // No action found.\n      return;\n    }\n\n    if (this.hasA11yClickSupport) {\n      this.preventDefaultForA11yClick!(eventInfo);\n    }\n\n    // We attempt to handle the mouseenter/mouseleave events here by\n    // detecting whether the mouseover/mouseout events correspond to\n    // entering/leaving an element.\n    if (\n      EventContract.MOUSE_SPECIAL_SUPPORT &&\n      (eventInfoLib.getEventType(eventInfo) === EventType.MOUSEENTER ||\n        eventInfoLib.getEventType(eventInfo) === EventType.MOUSELEAVE ||\n        eventInfoLib.getEventType(eventInfo) === EventType.POINTERENTER ||\n        eventInfoLib.getEventType(eventInfo) === EventType.POINTERLEAVE)\n    ) {\n      // We attempt to handle the mouseenter/mouseleave events here by\n      // detecting whether the mouseover/mouseout events correspond to\n      // entering/leaving an element.\n      if (\n        eventLib.isMouseSpecialEvent(\n          eventInfoLib.getEvent(eventInfo),\n          eventInfoLib.getEventType(eventInfo),\n          eventInfoLib.getActionElement(action),\n        )\n      ) {\n        // If both mouseover/mouseout and mouseenter/mouseleave events are\n        // enabled, two separate handlers for mouseover/mouseout are\n        // registered. Both handlers will see the same event instance\n        // so we create a copy to avoid interfering with the dispatching of\n        // the mouseover/mouseout event.\n        const copiedEvent = eventLib.createMouseSpecialEvent(\n          eventInfoLib.getEvent(eventInfo),\n          eventInfoLib.getActionElement(action),\n        );\n        eventInfoLib.setEvent(eventInfo, copiedEvent);\n        // Since the mouseenter/mouseleave events do not bubble, the target\n        // of the event is technically the `actionElement` (the node with the\n        // `jsaction` attribute)\n        eventInfoLib.setTargetElement(eventInfo, eventInfoLib.getActionElement(action));\n      } else {\n        eventInfoLib.unsetAction(eventInfo);\n      }\n    }\n  }\n\n  /**\n   * Accesses the jsaction map on a node and retrieves the name of the\n   * action the given event is mapped to, if any. It parses the\n   * attribute value and stores it in a property on the node for\n   * subsequent retrieval without re-parsing and re-accessing the\n   * attribute. In order to fully qualify jsaction names using a\n   * namespace, the DOM is searched starting at the current node and\n   * going through ancestor nodes until a jsnamespace attribute is\n   * found.\n   *\n   * @param actionElement The DOM node to retrieve the jsaction map from.\n   * @param eventInfo `EventInfo` to set `action` and `actionElement` if an\n   *    action is found on the `actionElement`.\n   */\n  private populateActionOnElement(actionElement: Element, eventInfo: eventInfoLib.EventInfo) {\n    const actionMap = parseActions(actionElement, eventInfoLib.getContainer(eventInfo));\n\n    const actionName = actionMap[eventInfoLib.getEventType(eventInfo)];\n    if (actionName !== undefined) {\n      eventInfoLib.setAction(eventInfo, actionName, actionElement);\n    }\n\n    if (this.hasA11yClickSupport) {\n      this.populateClickOnlyAction!(actionElement, eventInfo, actionMap);\n    }\n    if (EventContract.A11Y_SUPPORT_IN_DISPATCHER) {\n      if (\n        eventInfoLib.getEventType(eventInfo) === AccessibilityAttribute.MAYBE_CLICK_EVENT_TYPE &&\n        actionMap[EventType.CLICK] !== undefined\n      ) {\n        // We'll take the first CLICK action we find and have the dispatcher\n        // check if the keydown event can be used as a CLICK. If not, the\n        // dispatcher will retrigger the event so that we can find a keydown\n        // event instead.\n        // When we get MAYBE_CLICK_EVENT_TYPE as an eventType, we want to\n        // retrieve the action corresponding to CLICK, but still keep the\n        // eventInfoLib.getEventType(eventInfo, ) as MAYBE_CLICK_EVENT_TYPE. The\n        // dispatcher uses this event type to determine if it should get the\n        // handler for the action.\n        eventInfoLib.setAction(eventInfo, actionMap[EventType.CLICK], actionElement);\n      } else {\n        a11yClickLib.populateClickOnlyAction(actionElement, eventInfo, actionMap);\n      }\n    }\n  }\n\n  /**\n   * Enables jsaction handlers to be called for the event type given by\n   * name.\n   *\n   * If the event is already registered, this does nothing.\n   *\n   * @param prefixedEventType If supplied, this event is used in\n   *     the actual browser event registration instead of the name that is\n   *     exposed to jsaction. Use this if you e.g. want users to be able\n   *     to subscribe to jsaction=\"transitionEnd:foo\" while the underlying\n   *     event is webkitTransitionEnd in one browser and mozTransitionEnd\n   *     in another.\n   */\n  addEvent(eventType: string, prefixedEventType?: string) {\n    if (eventType in this.eventHandlers || !this.containerManager) {\n      return;\n    }\n\n    if (\n      !EventContract.MOUSE_SPECIAL_SUPPORT &&\n      (eventType === EventType.MOUSEENTER ||\n        eventType === EventType.MOUSELEAVE ||\n        eventType === EventType.POINTERENTER ||\n        eventType === EventType.POINTERLEAVE)\n    ) {\n      return;\n    }\n\n    const eventHandler = (eventType: string, event: Event, container: Element) => {\n      this.handleEvent(eventType, event, container);\n    };\n\n    // Store the callback to allow us to replay events.\n    this.eventHandlers[eventType] = eventHandler;\n\n    const browserEventType = eventLib.getBrowserEventType(prefixedEventType || eventType);\n\n    if (browserEventType !== eventType) {\n      const eventTypes = this.browserEventTypeToExtraEventTypes[browserEventType] || [];\n      eventTypes.push(eventType);\n      this.browserEventTypeToExtraEventTypes[browserEventType] = eventTypes;\n    }\n\n    this.containerManager.addEventListener(browserEventType, (element: Element) => {\n      return (event: Event) => {\n        eventHandler(eventType, event, element);\n      };\n    });\n\n    // Automatically install a keypress/keydown event handler if support for\n    // accessible clicks is turned on.\n    if (this.addA11yClickListener && eventType === EventType.CLICK) {\n      this.addEvent(EventType.KEYDOWN);\n    }\n  }\n\n  /**\n   * Gets the queued early events and replay them using the appropriate handler\n   * in the provided event contract. Once all the events are replayed, it cleans\n   * up the early contract.\n   */\n  replayEarlyEvents() {\n    // Check if the early contract is present and prevent calling this function\n    // more than once.\n    const earlyJsactionData: EarlyJsactionData | undefined = window._ejsa;\n    if (!earlyJsactionData) {\n      return;\n    }\n\n    // Replay the early contract events.\n    const earlyEventInfos: eventInfoLib.EventInfo[] = earlyJsactionData.q;\n    for (let idx = 0; idx < earlyEventInfos.length; idx++) {\n      const earlyEventInfo: eventInfoLib.EventInfo = earlyEventInfos[idx];\n      const eventTypes = this.getEventTypesForBrowserEventType(earlyEventInfo.eventType);\n      for (let i = 0; i < eventTypes.length; i++) {\n        const eventInfo = eventInfoLib.cloneEventInfo(earlyEventInfo);\n        // EventInfo eventType maps to JSAction's internal event type,\n        // rather than the browser event type.\n        eventInfoLib.setEventType(eventInfo, eventTypes[i]);\n        this.handleEventInfo(eventInfo);\n      }\n    }\n\n    // Clean up the early contract.\n    const earlyEventTypes: string[] = earlyJsactionData.et;\n    const earlyEventHandler: (event: Event) => void = earlyJsactionData.h;\n    for (let idx = 0; idx < earlyEventTypes.length; idx++) {\n      const eventType: string = earlyEventTypes[idx];\n      window.document.documentElement.removeEventListener(eventType, earlyEventHandler);\n    }\n    delete window._ejsa;\n  }\n\n  /**\n   * Returns all JSAction event types that have been registered for a given\n   * browser event type.\n   */\n  private getEventTypesForBrowserEventType(browserEventType: string) {\n    const eventTypes = [];\n    if (this.eventHandlers[browserEventType]) {\n      eventTypes.push(browserEventType);\n    }\n    if (this.browserEventTypeToExtraEventTypes[browserEventType]) {\n      eventTypes.push(...this.browserEventTypeToExtraEventTypes[browserEventType]);\n    }\n    return eventTypes;\n  }\n\n  /**\n   * Returns the event handler function for a given event type.\n   */\n  handler(eventType: string): EventHandler | undefined {\n    return this.eventHandlers[eventType];\n  }\n\n  /**\n   * Cleans up the event contract. This resets all of the `EventContract`'s\n   * internal state. Users are responsible for not using this `EventContract`\n   * after it has been cleaned up.\n   */\n  cleanUp() {\n    this.containerManager!.cleanUp();\n    this.containerManager = null;\n    this.eventHandlers = {};\n    this.browserEventTypeToExtraEventTypes = {};\n    this.dispatcher = null;\n    this.queuedEventInfos = [];\n  }\n\n  /**\n   * Register a dispatcher function. Event info of each event mapped to\n   * a jsaction is passed for handling to this callback. The queued\n   * events are passed as well to the dispatcher for later replaying\n   * once the dispatcher is registered. Clears the event queue to null.\n   *\n   * @param dispatcher The dispatcher function.\n   * @param restriction\n   */\n  registerDispatcher(dispatcher: Dispatcher, restriction: Restriction) {\n    this.ecrd(dispatcher, restriction);\n  }\n\n  /**\n   * Unrenamed alias for registerDispatcher. Necessary for any codebases that\n   * split the `EventContract` and `Dispatcher` code into different compilation\n   * units.\n   */\n  ecrd(dispatcher: Dispatcher, restriction: Restriction) {\n    this.dispatcher = dispatcher;\n\n    if (this.queuedEventInfos?.length) {\n      for (let i = 0; i < this.queuedEventInfos.length; i++) {\n        this.handleEventInfo(this.queuedEventInfos[i]);\n      }\n      this.queuedEventInfos = null;\n    }\n  }\n\n  /**\n   * Adds a11y click support to the given `EventContract`. Meant to be called in\n   * the same compilation unit as the `EventContract`.\n   */\n  addA11yClickSupport() {\n    this.addA11yClickSupportImpl(\n      a11yClickLib.updateEventInfoForA11yClick,\n      a11yClickLib.preventDefaultForA11yClick,\n      a11yClickLib.populateClickOnlyAction,\n    );\n  }\n\n  /**\n   * Enables a11y click support to be deferred. Meant to be called in the same\n   * compilation unit as the `EventContract`.\n   */\n  exportAddA11yClickSupport() {\n    this.addA11yClickListener = true;\n    this.ecaacs = this.addA11yClickSupportImpl.bind(this);\n  }\n\n  /**\n   * Unrenamed function that loads a11yClickSupport.\n   */\n  private addA11yClickSupportImpl(\n    updateEventInfoForA11yClick: typeof a11yClickLib.updateEventInfoForA11yClick,\n    preventDefaultForA11yClick: typeof a11yClickLib.preventDefaultForA11yClick,\n    populateClickOnlyAction: typeof a11yClickLib.populateClickOnlyAction,\n  ) {\n    this.addA11yClickListener = true;\n    this.hasA11yClickSupport = true;\n    this.updateEventInfoForA11yClick = updateEventInfoForA11yClick;\n    this.preventDefaultForA11yClick = preventDefaultForA11yClick;\n    this.populateClickOnlyAction = populateClickOnlyAction;\n  }\n}\n\n/**\n * Adds a11y click support to the given `EventContract`. Meant to be called\n * in a different compilation unit from the `EventContract`. The `EventContract`\n * must have called `exportAddA11yClickSupport` in its compilation unit for this\n * to have any effect.\n */\nexport function addDeferredA11yClickSupport(eventContract: EventContract) {\n  eventContract.ecaacs?.(\n    a11yClickLib.updateEventInfoForA11yClick,\n    a11yClickLib.preventDefaultForA11yClick,\n    a11yClickLib.populateClickOnlyAction,\n  );\n}\n\n/**\n * Determines whether or not the `EventContract` needs to check with the\n * dispatcher even if there's no action.\n */\nfunction checkDispatcherForA11yClick(eventInfo: eventInfoLib.EventInfo): boolean {\n  return (\n    EventContract.A11Y_SUPPORT_IN_DISPATCHER &&\n    eventInfoLib.getEventType(eventInfo) === AccessibilityAttribute.MAYBE_CLICK_EVENT_TYPE\n  );\n}\n\n/**\n * Returns true if the default action of this event should be prevented before\n * this event is dispatched.\n */\nfunction shouldPreventDefaultBeforeDispatching(\n  actionElement: Element,\n  eventInfo: eventInfoLib.EventInfo,\n): boolean {\n  // Prevent browser from following <a> node links if a jsaction is present\n  // and we are dispatching the action now. Note that the targetElement may be\n  // a child of an anchor that has a jsaction attached. For that reason, we\n  // need to check the actionElement rather than the targetElement.\n  return (\n    actionElement.tagName === 'A' &&\n    (eventInfoLib.getEventType(eventInfo) === EventType.CLICK ||\n      eventInfoLib.getEventType(eventInfo) === EventType.CLICKMOD)\n  );\n}\n\n/**\n * Parses and caches an element's jsaction element into a map.\n *\n * This is primarily for internal use.\n *\n * @param actionElement The DOM node to retrieve the jsaction map from.\n * @param container The node which limits the namespace lookup for a jsaction\n * name. The container node itself will not be searched.\n * @return Map from event to qualified name of the jsaction bound to it.\n */\nexport function parseActions(actionElement: Element, container: Node): {[key: string]: string} {\n  let actionMap: {[key: string]: string} | undefined = cache.get(actionElement);\n  if (!actionMap) {\n    const jsactionAttribute = getAttr(actionElement, Attribute.JSACTION);\n    if (!jsactionAttribute) {\n      actionMap = EMPTY_ACTION_MAP;\n      cache.set(actionElement, actionMap);\n    } else {\n      actionMap = cache.getParsed(jsactionAttribute);\n      if (!actionMap) {\n        actionMap = {};\n        const values = jsactionAttribute.split(REGEXP_SEMICOLON);\n        for (let idx = 0; idx < values.length; idx++) {\n          const value = values[idx];\n          if (!value) {\n            continue;\n          }\n          const colon = value.indexOf(Char.EVENT_ACTION_SEPARATOR);\n          const hasColon = colon !== -1;\n          const type = hasColon ? stringTrim(value.substr(0, colon)) : DEFAULT_EVENT_TYPE;\n          const action = hasColon ? stringTrim(value.substr(colon + 1)) : value;\n          actionMap[type] = action;\n        }\n        cache.setParsed(jsactionAttribute, actionMap);\n      }\n      // If namespace support is active we need to augment the (potentially\n      // cached) jsaction mapping with the namespace.\n      if (EventContract.JSNAMESPACE_SUPPORT) {\n        const noNs = actionMap;\n        actionMap = {};\n        for (const type in noNs) {\n          actionMap[type] = getFullyQualifiedAction(noNs[type], actionElement, container);\n        }\n      }\n      cache.set(actionElement, actionMap);\n    }\n  }\n  return actionMap;\n}\n\n/**\n * Returns the fully qualified jsaction action. If the given jsaction\n * name doesn't already contain the namespace, the function iterates\n * over ancestor nodes until a jsnamespace attribute is found, and\n * uses the value of that attribute as the namespace.\n *\n * @param action The jsaction action to resolve.\n * @param start The node from which to start searching for a jsnamespace\n * attribute.\n * @param container The node which limits the search for a jsnamespace\n * attribute. This node will be searched.\n * @return The fully qualified name of the jsaction. If no namespace is found,\n * returns the unqualified name in case it exists in the global namespace.\n */\nfunction getFullyQualifiedAction(action: string, start: Element, container: Node): string {\n  if (EventContract.JSNAMESPACE_SUPPORT) {\n    if (isNamespacedAction(action)) {\n      return action;\n    }\n\n    let node: Node | null = start;\n    while (node) {\n      const namespace = getNamespaceFromElement(node as Element);\n      if (namespace) {\n        return namespace + Char.NAMESPACE_ACTION_SEPARATOR + action;\n      }\n\n      // If this node is the container, stop.\n      if (node === container) {\n        break;\n      }\n\n      node = node.parentNode;\n    }\n  }\n\n  return action;\n}\n\n/**\n * Checks if a jsaction action contains a namespace part.\n */\nfunction isNamespacedAction(action: string): boolean {\n  return action.indexOf(Char.NAMESPACE_ACTION_SEPARATOR) >= 0;\n}\n\n/**\n * Returns the value of the jsnamespace attribute of the given node.\n * Also caches the value for subsequent lookups.\n * @param element The node whose jsnamespace attribute is being asked for.\n * @return The value of the jsnamespace attribute, or null if not found.\n */\nfunction getNamespaceFromElement(element: Element): string | null {\n  let namespace = cache.getNamespace(element);\n  // Only query for the attribute if it has not been queried for\n  // before. getAttr() returns null if an attribute is not present. Thus,\n  // namespace is string|null if the query took place in the past, or\n  // undefined if the query did not take place.\n  if (namespace === undefined) {\n    namespace = getAttr(element, Attribute.JSNAMESPACE);\n    cache.setNamespace(element, namespace);\n  }\n  return namespace;\n}\n\n/**\n * Accesses the event handler attribute value of a DOM node. It guards\n * against weird situations (described in the body) that occur in\n * connection with nodes that are removed from their document.\n * @param element The DOM element.\n * @param attribute The name of the attribute to access.\n * @return The attribute value if it was found, null otherwise.\n */\nfunction getAttr(element: Element, attribute: string): string | null {\n  let value = null;\n  // NOTE: Nodes in IE do not always have a getAttribute\n  // method defined. This is the case where sourceElement has in\n  // fact been removed from the DOM before eventContract begins\n  // handling - where a parentNode does not have getAttribute\n  // defined.\n  // NOTE: We must use the 'in' operator instead of the regular dot\n  // notation, since the latter fails in IE8 if the getAttribute method is not\n  // defined. See b/7139109.\n  if ('getAttribute' in element) {\n    value = element.getAttribute(attribute);\n  }\n  return value;\n}\n\n/**\n * Helper function to trim whitespace from the beginning and the end\n * of the string. This deliberately doesn't use the closure equivalent\n * to keep dependencies small.\n * @param str  Input string.\n * @return  Trimmed string.\n */\nfunction stringTrim(str: string): string {\n  if (typeof String.prototype.trim === 'function') {\n    return str.trim();\n  }\n\n  const trimmedLeft = str.replace(/^\\s+/, '');\n  return trimmedLeft.replace(/\\s+$/, '');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventContractContainer} from './event_contract_container';\nimport {EventContract} from './eventcontract';\n\n/**\n * Provides a factory function for bootstrapping an event contract on a\n * window object.\n * @param field The property on the window that the event contract will be placed on.\n * @param container The container that listens to events\n * @param appId A given identifier for an application. If there are multiple apps on the page\n *              then this is how contracts can be initialized for each one.\n * @param events An array of event names that should be listened to.\n * @param anyWindow The global window object that should receive the event contract.\n * @returns The `event` contract. This is both assigned to `anyWindow` and returned for testing.\n */\nexport function bootstrapEventContract(\n  field: string,\n  container: Element,\n  appId: string,\n  events: string[],\n  anyWindow: any = window,\n) {\n  if (!anyWindow[field]) {\n    anyWindow[field] = {};\n  }\n  const eventContract = new EventContract(new EventContractContainer(container));\n  anyWindow[field][appId] = eventContract;\n  for (const ev of events) {\n    eventContract.addEvent(ev);\n  }\n  return eventContract;\n}\n"],"names":["Attribute","stopPropagation","dom.contains","testing","jsactionEvent.isIe","jsactionEvent.isWebKit","jsactionEvent.isGecko","AccessibilityAttribute","eventLib.preventDefault","eventLib.isSpaceKeyEvent","eventLib.shouldCallPreventDefaultOnNativeHtmlControl","eventLib.isActionKeyEvent","registerDispatcher","eventLib.isGecko","eventLib.addEventListener","eventLib.removeEventListener","eventInfoLib.getEvent","eventInfoLib.setA11yClickKey","eventInfoLib.setEventType","eventInfoLib.getA11yClickKey","eventInfoLib.getAction","eventInfoLib.getEventType","eventInfoLib.setAction","eventInfoLib.createEventInfoFromParameters","eventInfoLib.setIsReplay","eventInfoLib.cloneEventInfo","eventInfoLib.getActionElement","eventLib.isModifiedClickEvent","eventInfoLib.getTargetElement","eventInfoLib.getContainer","eventLib.isMouseSpecialEvent","eventLib.createMouseSpecialEvent","eventInfoLib.setEvent","eventInfoLib.setTargetElement","eventInfoLib.unsetAction","a11yClickLib.populateClickOnlyAction","eventLib.getBrowserEventType","a11yClickLib.updateEventInfoForA11yClick","a11yClickLib.preventDefaultForA11yClick","cache.get","cache.set","cache.getParsed","cache.setParsed","cache.getNamespace","cache.setNamespace"],"mappings":"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"}