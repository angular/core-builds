/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Encodes that the node lookup should start from the host node of this component. */
export const REFERENCE_NODE_HOST = 'h';
/** Encodes that the node lookup should start from the document body node. */
export const REFERENCE_NODE_BODY = 'b';
/**
 * Describes navigation steps that the runtime logic need to perform,
 * starting from a given (known) element.
 */
export var NodeNavigationStep;
(function (NodeNavigationStep) {
    NodeNavigationStep["FirstChild"] = "f";
    NodeNavigationStep["NextSibling"] = "n";
})(NodeNavigationStep || (NodeNavigationStep = {}));
/**
 * Keys within serialized view data structure to represent various
 * parts. See the `SerializedView` interface below for additional information.
 */
export const ELEMENT_CONTAINERS = 'e';
export const TEMPLATES = 't';
export const CONTAINERS = 'c';
export const MULTIPLIER = 'x';
export const NUM_ROOT_NODES = 'r';
export const TEMPLATE_ID = 'i'; // as it's also an "id"
export const NODES = 'n';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2h5ZHJhdGlvbi9pbnRlcmZhY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUtILHNGQUFzRjtBQUN0RixNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLENBQUM7QUFFdkMsNkVBQTZFO0FBQzdFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLEdBQUcsQ0FBQztBQUV2Qzs7O0dBR0c7QUFDSCxNQUFNLENBQU4sSUFBWSxrQkFHWDtBQUhELFdBQVksa0JBQWtCO0lBQzVCLHNDQUFnQixDQUFBO0lBQ2hCLHVDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFIVyxrQkFBa0IsS0FBbEIsa0JBQWtCLFFBRzdCO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUM7QUFDN0IsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQztBQUM5QixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUM7QUFDbEMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxDQUFFLHVCQUF1QjtBQUN4RCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7Uk5vZGV9IGZyb20gJy4uL3JlbmRlcjMvaW50ZXJmYWNlcy9yZW5kZXJlcl9kb20nO1xuXG5cbi8qKiBFbmNvZGVzIHRoYXQgdGhlIG5vZGUgbG9va3VwIHNob3VsZCBzdGFydCBmcm9tIHRoZSBob3N0IG5vZGUgb2YgdGhpcyBjb21wb25lbnQuICovXG5leHBvcnQgY29uc3QgUkVGRVJFTkNFX05PREVfSE9TVCA9ICdoJztcblxuLyoqIEVuY29kZXMgdGhhdCB0aGUgbm9kZSBsb29rdXAgc2hvdWxkIHN0YXJ0IGZyb20gdGhlIGRvY3VtZW50IGJvZHkgbm9kZS4gKi9cbmV4cG9ydCBjb25zdCBSRUZFUkVOQ0VfTk9ERV9CT0RZID0gJ2InO1xuXG4vKipcbiAqIERlc2NyaWJlcyBuYXZpZ2F0aW9uIHN0ZXBzIHRoYXQgdGhlIHJ1bnRpbWUgbG9naWMgbmVlZCB0byBwZXJmb3JtLFxuICogc3RhcnRpbmcgZnJvbSBhIGdpdmVuIChrbm93bikgZWxlbWVudC5cbiAqL1xuZXhwb3J0IGVudW0gTm9kZU5hdmlnYXRpb25TdGVwIHtcbiAgRmlyc3RDaGlsZCA9ICdmJyxcbiAgTmV4dFNpYmxpbmcgPSAnbicsXG59XG5cbi8qKlxuICogS2V5cyB3aXRoaW4gc2VyaWFsaXplZCB2aWV3IGRhdGEgc3RydWN0dXJlIHRvIHJlcHJlc2VudCB2YXJpb3VzXG4gKiBwYXJ0cy4gU2VlIHRoZSBgU2VyaWFsaXplZFZpZXdgIGludGVyZmFjZSBiZWxvdyBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfQ09OVEFJTkVSUyA9ICdlJztcbmV4cG9ydCBjb25zdCBURU1QTEFURVMgPSAndCc7XG5leHBvcnQgY29uc3QgQ09OVEFJTkVSUyA9ICdjJztcbmV4cG9ydCBjb25zdCBNVUxUSVBMSUVSID0gJ3gnO1xuZXhwb3J0IGNvbnN0IE5VTV9ST09UX05PREVTID0gJ3InO1xuZXhwb3J0IGNvbnN0IFRFTVBMQVRFX0lEID0gJ2knOyAgLy8gYXMgaXQncyBhbHNvIGFuIFwiaWRcIlxuZXhwb3J0IGNvbnN0IE5PREVTID0gJ24nO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgZWxlbWVudCBjb250YWluZXJzIHdpdGhpbiB0aGlzIHZpZXcsIHN0b3JlZCBhcyBrZXktdmFsdWUgcGFpcnNcbiAqIHdoZXJlIGtleSBpcyBhbiBpbmRleCBvZiBhIGNvbnRhaW5lciBpbiBhbiBMVmlldyAoYWxzbyB1c2VkIGluIHRoZVxuICogYGVsZW1lbnRDb250YWluZXJTdGFydGAgaW5zdHJ1Y3Rpb24pLCB0aGUgdmFsdWUgaXMgdGhlIG51bWJlciBvZiByb290IG5vZGVzXG4gKiBpbiB0aGlzIGNvbnRhaW5lci4gVGhpcyBpbmZvcm1hdGlvbiBpcyBuZWVkZWQgdG8gbG9jYXRlIGFuIGFuY2hvciBjb21tZW50XG4gKiBub2RlIHRoYXQgZ29lcyBhZnRlciBhbGwgY29udGFpbmVyIG5vZGVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbGl6ZWRFbGVtZW50Q29udGFpbmVycyB7XG4gIFtrZXk6IG51bWJlcl06IG51bWJlcjtcbn1cblxuLyoqXG4gKiBTZXJpYWxpemVkIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgcmVsZXZhbnQgaHlkcmF0aW9uXG4gKiBhbm5vdGF0aW9uIGluZm9ybWF0aW9uIHRoYXQgZGVzY3JpYmVzIGEgZ2l2ZW4gaHlkcmF0aW9uIGJvdW5kYXJ5XG4gKiAoZS5nLiBhIGNvbXBvbmVudCkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VyaWFsaXplZFZpZXcge1xuICAvKipcbiAgICogU2VyaWFsaXplZCBpbmZvcm1hdGlvbiBhYm91dCA8bmctY29udGFpbmVyPnMuXG4gICAqL1xuICBbRUxFTUVOVF9DT05UQUlORVJTXT86IFNlcmlhbGl6ZWRFbGVtZW50Q29udGFpbmVycztcblxuICAvKipcbiAgICogU2VyaWFsaXplZCBpbmZvcm1hdGlvbiBhYm91dCB0ZW1wbGF0ZXMuXG4gICAqIEtleS12YWx1ZSBwYWlycyB3aGVyZSBhIGtleSBpcyBhbiBpbmRleCBvZiB0aGUgY29ycmVzcG9uZGluZ1xuICAgKiBgdGVtcGxhdGVgIGluc3RydWN0aW9uIGFuZCB0aGUgdmFsdWUgaXMgYSB1bmlxdWUgaWQgdGhhdCBjYW5cbiAgICogYmUgdXNlZCBkdXJpbmcgaHlkcmF0aW9uIHRvIGlkZW50aWZ5IHRoYXQgdGVtcGxhdGUuXG4gICAqL1xuICBbVEVNUExBVEVTXT86IFJlY29yZDxudW1iZXIsIHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZWQgaW5mb3JtYXRpb24gYWJvdXQgdmlldyBjb250YWluZXJzLlxuICAgKiBLZXktdmFsdWUgcGFpcnMgd2hlcmUgYSBrZXkgaXMgYW4gaW5kZXggb2YgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICogTENvbnRhaW5lciBlbnRyeSB3aXRoaW4gYW4gTFZpZXcsIGFuZCB0aGUgdmFsdWUgaXMgYSBsaXN0XG4gICAqIG9mIHNlcmlhbGl6ZWQgaW5mb3JtYXRpb24gYWJvdXQgdmlld3Mgd2l0aGluIHRoaXMgY29udGFpbmVyLlxuICAgKi9cbiAgW0NPTlRBSU5FUlNdPzogUmVjb3JkPG51bWJlciwgU2VyaWFsaXplZENvbnRhaW5lclZpZXdbXT47XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZWQgaW5mb3JtYXRpb24gYWJvdXQgbm9kZXMgaW4gYSB0ZW1wbGF0ZS5cbiAgICogS2V5LXZhbHVlIHBhaXJzIHdoZXJlIGEga2V5IGlzIGFuIGluZGV4IG9mIHRoZSBjb3JyZXNwb25kaW5nXG4gICAqIERPTSBub2RlIGluIGFuIExWaWV3IGFuZCB0aGUgdmFsdWUgaXMgYSBwYXRoIHRoYXQgZGVzY3JpYmVzXG4gICAqIHRoZSBsb2NhdGlvbiBvZiB0aGlzIG5vZGUgKGFzIGEgc2V0IG9mIG5hdmlnYXRpb24gaW5zdHJ1Y3Rpb25zKS5cbiAgICovXG4gIFtOT0RFU10/OiBSZWNvcmQ8bnVtYmVyLCBzdHJpbmc+O1xufVxuXG4vKipcbiAqIFNlcmlhbGl6ZWQgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBjb250YWlucyByZWxldmFudCBoeWRyYXRpb25cbiAqIGFubm90YXRpb24gaW5mb3JtYXRpb24gYWJvdXQgYSB2aWV3IHRoYXQgaXMgYSBwYXJ0IG9mIGFcbiAqIFZpZXdDb250YWluZXIgY29sbGVjdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxpemVkQ29udGFpbmVyVmlldyBleHRlbmRzIFNlcmlhbGl6ZWRWaWV3IHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBpZCB0aGF0IHJlcHJlc2VudHMgYSBUVmlldyB0aGF0IHdhcyB1c2VkIHRvIGNyZWF0ZVxuICAgKiBhIGdpdmVuIGluc3RhbmNlIG9mIGEgdmlldzpcbiAgICogIC0gVFZpZXdUeXBlLkVtYmVkZGVkOiBhIHVuaXF1ZSBpZCBnZW5lcmF0ZWQgZHVyaW5nIHNlcmlhbGl6YXRpb24gb24gdGhlIHNlcnZlclxuICAgKiAgLSBUVmlld1R5cGUuQ29tcG9uZW50OiBhbiBpZCBnZW5lcmF0ZWQgYmFzZWQgb24gY29tcG9uZW50IHByb3BlcnRpZXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAoc2VlIGBnZXRDb21wb25lbnRJZGAgZnVuY3Rpb24gZm9yIGRldGFpbHMpXG4gICAqL1xuICBbVEVNUExBVEVfSURdOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb290IG5vZGVzIHRoYXQgYmVsb25nIHRvIHRoaXMgdmlldy5cbiAgICogVGhpcyBpbmZvcm1hdGlvbiBpcyBuZWVkZWQgdG8gZWZmZWN0aXZlbHkgdHJhdmVyc2UgdGhlIERPTSB0cmVlXG4gICAqIGFuZCBpZGVudGlmeSBzZWdtZW50cyB0aGF0IGJlbG9uZyB0byBkaWZmZXJlbnQgdmlld3MuXG4gICAqL1xuICBbTlVNX1JPT1RfTk9ERVNdOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiB0aW1lcyB0aGlzIHZpZXcgaXMgcmVwZWF0ZWQuXG4gICAqIFRoaXMgaXMgdXNlZCB0byBhdm9pZCBzZXJpYWxpemluZyBhbmQgc2VuZGluZyB0aGUgc2FtZSBoeWRyYXRpb25cbiAgICogaW5mb3JtYXRpb24gYWJvdXQgc2ltaWxhciB2aWV3cyAoZm9yIGV4YW1wbGUsIHByb2R1Y2VkIGJ5ICpuZ0ZvcikuXG4gICAqL1xuICBbTVVMVElQTElFUl0/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaHlkcmF0aW9uLXJlbGF0ZWQgaW5mb3JtYXRpb24gc2VyaWFsaXplZFxuICogb24gdGhlIHNlcnZlciwgYXMgd2VsbCBhcyB0aGUgbmVjZXNzYXJ5IHJlZmVyZW5jZXMgdG8gc2VnbWVudHMgb2ZcbiAqIHRoZSBET00sIHRvIGZhY2lsaXRhdGUgdGhlIGh5ZHJhdGlvbiBwcm9jZXNzIGZvciBhIGdpdmVuIGh5ZHJhdGlvblxuICogYm91bmRhcnkgb24gdGhlIGNsaWVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZWh5ZHJhdGVkVmlldyB7XG4gIC8qKlxuICAgKiBUaGUgcmVhZG9ubHkgaHlkcmF0aW9uIGFubm90YXRpb24gZGF0YS5cbiAgICovXG4gIGRhdGE6IFJlYWRvbmx5PFNlcmlhbGl6ZWRWaWV3PjtcblxuICAvKipcbiAgICogQSByZWZlcmVuY2UgdG8gdGhlIGZpcnN0IGNoaWxkIGluIGEgRE9NIHNlZ21lbnQgYXNzb2NpYXRlZFxuICAgKiB3aXRoIGEgZ2l2ZW4gaHlkcmF0aW9uIGJvdW5kYXJ5LlxuICAgKi9cbiAgZmlyc3RDaGlsZDogUk5vZGV8bnVsbDtcblxuICAvKipcbiAgICogU3RvcmVzIHJlZmVyZW5jZXMgdG8gZmlyc3Qgbm9kZXMgaW4gRE9NIHNlZ21lbnRzIHRoYXRcbiAgICogcmVwcmVzZW50IGVpdGhlciBhbiA8bmctY29udGFpbmVyPiBvciBhIHZpZXcgY29udGFpbmVyLlxuICAgKi9cbiAgc2VnbWVudEhlYWRzPzoge1tpbmRleDogbnVtYmVyXTogUk5vZGV8bnVsbH07XG59XG5cbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaHlkcmF0aW9uLXJlbGF0ZWQgaW5mb3JtYXRpb24gc2VyaWFsaXplZFxuICogb24gdGhlIHNlcnZlciwgYXMgd2VsbCBhcyB0aGUgbmVjZXNzYXJ5IHJlZmVyZW5jZXMgdG8gc2VnbWVudHMgb2ZcbiAqIHRoZSBET00sIHRvIGZhY2lsaXRhdGUgdGhlIGh5ZHJhdGlvbiBwcm9jZXNzIGZvciBhIGdpdmVuIHZpZXdcbiAqIGluc2lkZSBhIHZpZXcgY29udGFpbmVyIChlaXRoZXIgYW4gZW1iZWRkZWQgdmlldyBvciBhIHZpZXcgY3JlYXRlZFxuICogZm9yIGEgY29tcG9uZW50KS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZWh5ZHJhdGVkQ29udGFpbmVyVmlldyBleHRlbmRzIERlaHlkcmF0ZWRWaWV3IHtcbiAgZGF0YTogUmVhZG9ubHk8U2VyaWFsaXplZENvbnRhaW5lclZpZXc+O1xufVxuIl19