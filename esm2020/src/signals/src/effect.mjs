/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Watch } from './watch';
/**
 * Create a global `Effect` for the given reactive function.
 *
 * @developerPreview
 */
export function effect(effectFn) {
    const watch = new Watch(effectFn, queueWatch);
    globalWatches.add(watch);
    // Effects start dirty.
    watch.notify();
    return {
        destroy: () => {
            queuedWatches.delete(watch);
            globalWatches.delete(watch);
        },
    };
}
/**
 * Get a `Promise` that resolves when any scheduled effects have resolved.
 */
export function effectsDone() {
    return watchQueuePromise?.promise ?? Promise.resolve();
}
/**
 * Shut down all active effects.
 */
export function resetEffects() {
    queuedWatches.clear();
    globalWatches.clear();
}
const globalWatches = new Set();
const queuedWatches = new Set();
let watchQueuePromise = null;
function queueWatch(watch) {
    if (queuedWatches.has(watch) || !globalWatches.has(watch)) {
        return;
    }
    queuedWatches.add(watch);
    if (watchQueuePromise === null) {
        Promise.resolve().then(runWatchQueue);
        let resolveFn;
        const promise = new Promise((resolve) => {
            resolveFn = resolve;
        });
        watchQueuePromise = {
            promise,
            resolveFn,
        };
    }
}
function runWatchQueue() {
    for (const watch of queuedWatches) {
        queuedWatches.delete(watch);
        watch.run();
    }
    watchQueuePromise.resolveFn();
    watchQueuePromise = null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZmZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvc2lnbmFscy9zcmMvZWZmZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFjOUI7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxNQUFNLENBQUMsUUFBb0I7SUFDekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzlDLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFekIsdUJBQXVCO0lBQ3ZCLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVmLE9BQU87UUFDTCxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ1osYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1QixhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFdBQVc7SUFDekIsT0FBTyxpQkFBaUIsRUFBRSxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3pELENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxZQUFZO0lBQzFCLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QixhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDeEIsQ0FBQztBQUVELE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxFQUFTLENBQUM7QUFDdkMsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLEVBQVMsQ0FBQztBQUV2QyxJQUFJLGlCQUFpQixHQUEwRCxJQUFJLENBQUM7QUFFcEYsU0FBUyxVQUFVLENBQUMsS0FBWTtJQUM5QixJQUFJLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3pELE9BQU87S0FDUjtJQUVELGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFekIsSUFBSSxpQkFBaUIsS0FBSyxJQUFJLEVBQUU7UUFDOUIsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV0QyxJQUFJLFNBQXNCLENBQUM7UUFDM0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUM1QyxTQUFTLEdBQUcsT0FBTyxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBRUgsaUJBQWlCLEdBQUc7WUFDbEIsT0FBTztZQUNQLFNBQVM7U0FDVixDQUFDO0tBQ0g7QUFDSCxDQUFDO0FBRUQsU0FBUyxhQUFhO0lBQ3BCLEtBQUssTUFBTSxLQUFLLElBQUksYUFBYSxFQUFFO1FBQ2pDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ2I7SUFFRCxpQkFBa0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMvQixpQkFBaUIsR0FBRyxJQUFJLENBQUM7QUFDM0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1dhdGNofSBmcm9tICcuL3dhdGNoJztcblxuLyoqXG4gKiBBIGdsb2JhbCByZWFjdGl2ZSBlZmZlY3QsIHdoaWNoIGNhbiBiZSBtYW51YWxseSBkZXN0cm95ZWQuXG4gKlxuICogQGRldmVsb3BlclByZXZpZXdcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFZmZlY3RSZWYge1xuICAvKipcbiAgICogU2h1dCBkb3duIHRoZSBlZmZlY3QsIHJlbW92aW5nIGl0IGZyb20gYW55IHVwY29taW5nIHNjaGVkdWxlZCBleGVjdXRpb25zLlxuICAgKi9cbiAgZGVzdHJveSgpOiB2b2lkO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGdsb2JhbCBgRWZmZWN0YCBmb3IgdGhlIGdpdmVuIHJlYWN0aXZlIGZ1bmN0aW9uLlxuICpcbiAqIEBkZXZlbG9wZXJQcmV2aWV3XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZmZlY3QoZWZmZWN0Rm46ICgpID0+IHZvaWQpOiBFZmZlY3RSZWYge1xuICBjb25zdCB3YXRjaCA9IG5ldyBXYXRjaChlZmZlY3RGbiwgcXVldWVXYXRjaCk7XG4gIGdsb2JhbFdhdGNoZXMuYWRkKHdhdGNoKTtcblxuICAvLyBFZmZlY3RzIHN0YXJ0IGRpcnR5LlxuICB3YXRjaC5ub3RpZnkoKTtcblxuICByZXR1cm4ge1xuICAgIGRlc3Ryb3k6ICgpID0+IHtcbiAgICAgIHF1ZXVlZFdhdGNoZXMuZGVsZXRlKHdhdGNoKTtcbiAgICAgIGdsb2JhbFdhdGNoZXMuZGVsZXRlKHdhdGNoKTtcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIEdldCBhIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHdoZW4gYW55IHNjaGVkdWxlZCBlZmZlY3RzIGhhdmUgcmVzb2x2ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZmZlY3RzRG9uZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIHdhdGNoUXVldWVQcm9taXNlPy5wcm9taXNlID8/IFByb21pc2UucmVzb2x2ZSgpO1xufVxuXG4vKipcbiAqIFNodXQgZG93biBhbGwgYWN0aXZlIGVmZmVjdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldEVmZmVjdHMoKTogdm9pZCB7XG4gIHF1ZXVlZFdhdGNoZXMuY2xlYXIoKTtcbiAgZ2xvYmFsV2F0Y2hlcy5jbGVhcigpO1xufVxuXG5jb25zdCBnbG9iYWxXYXRjaGVzID0gbmV3IFNldDxXYXRjaD4oKTtcbmNvbnN0IHF1ZXVlZFdhdGNoZXMgPSBuZXcgU2V0PFdhdGNoPigpO1xuXG5sZXQgd2F0Y2hRdWV1ZVByb21pc2U6IHtwcm9taXNlOiBQcm9taXNlPHZvaWQ+OyByZXNvbHZlRm46ICgpID0+IHZvaWQ7fXxudWxsID0gbnVsbDtcblxuZnVuY3Rpb24gcXVldWVXYXRjaCh3YXRjaDogV2F0Y2gpOiB2b2lkIHtcbiAgaWYgKHF1ZXVlZFdhdGNoZXMuaGFzKHdhdGNoKSB8fCAhZ2xvYmFsV2F0Y2hlcy5oYXMod2F0Y2gpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcXVldWVkV2F0Y2hlcy5hZGQod2F0Y2gpO1xuXG4gIGlmICh3YXRjaFF1ZXVlUHJvbWlzZSA9PT0gbnVsbCkge1xuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4ocnVuV2F0Y2hRdWV1ZSk7XG5cbiAgICBsZXQgcmVzb2x2ZUZuITogKCkgPT4gdm9pZDtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcbiAgICAgIHJlc29sdmVGbiA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICB3YXRjaFF1ZXVlUHJvbWlzZSA9IHtcbiAgICAgIHByb21pc2UsXG4gICAgICByZXNvbHZlRm4sXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBydW5XYXRjaFF1ZXVlKCk6IHZvaWQge1xuICBmb3IgKGNvbnN0IHdhdGNoIG9mIHF1ZXVlZFdhdGNoZXMpIHtcbiAgICBxdWV1ZWRXYXRjaGVzLmRlbGV0ZSh3YXRjaCk7XG4gICAgd2F0Y2gucnVuKCk7XG4gIH1cblxuICB3YXRjaFF1ZXVlUHJvbWlzZSEucmVzb2x2ZUZuKCk7XG4gIHdhdGNoUXVldWVQcm9taXNlID0gbnVsbDtcbn1cbiJdfQ==