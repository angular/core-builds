/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Tracks the currently active reactive context (or `null` if there is no active
 * context).
 */
let activeConsumer = null;
/**
 * Counter tracking the next `ProducerId` or `ConsumerId`.
 */
let _nextReactiveId = 0;
/**
 * Get a new `ProducerId` or `ConsumerId`, allocated from the global sequence.
 *
 * The value returned is a type intersection of both branded types, and thus can be assigned to
 * either.
 */
export function nextReactiveId() {
    return _nextReactiveId++;
}
/**
 * Set `consumer` as the active reactive context, and return the previous `Consumer`
 * (if any) for later restoration.
 */
export function setActiveConsumer(consumer) {
    const prevConsumer = activeConsumer;
    activeConsumer = consumer;
    return prevConsumer;
}
/**
 * Notify all `Consumer`s of the given `Producer` that its value may have changed.
 */
export function producerNotifyConsumers(producer) {
    for (const [consumerId, edge] of producer.consumers) {
        const consumer = edge.consumerRef.deref();
        if (consumer === undefined || consumer.trackingVersion !== edge.atTrackingVersion) {
            producer.consumers.delete(consumerId);
            consumer?.producers.delete(producer.id);
            continue;
        }
        consumer.notify();
    }
}
/**
 * Record a dependency on the given `Producer` by the current reactive `Consumer` if
 * one is present.
 */
export function producerAccessed(producer) {
    if (activeConsumer === null) {
        return;
    }
    // Either create or update the dependency `Edge` in both directions.
    let edge = activeConsumer.producers.get(producer.id);
    if (edge === undefined) {
        edge = {
            consumerRef: activeConsumer.ref,
            producerRef: producer.ref,
            seenValueVersion: producer.valueVersion,
            atTrackingVersion: activeConsumer.trackingVersion,
        };
        activeConsumer.producers.set(producer.id, edge);
        producer.consumers.set(activeConsumer.id, edge);
    }
    else {
        edge.seenValueVersion = producer.valueVersion;
        edge.atTrackingVersion = activeConsumer.trackingVersion;
    }
}
/**
 * Checks if a `Producer` has a current value which is different than the value
 * last seen at a specific version by a `Consumer` which recorded a dependency on
 * this `Producer`.
 */
function producerPollStatus(producer, lastSeenValueVersion) {
    // `producer.valueVersion` may be stale, but a mismatch still means that the value
    // last seen by the `Consumer` is also stale.
    if (producer.valueVersion !== lastSeenValueVersion) {
        return true;
    }
    // Trigger the `Producer` to update its `valueVersion` if necessary.
    producer.checkForChangedValue();
    // At this point, we can trust `producer.valueVersion`.
    return producer.valueVersion !== lastSeenValueVersion;
}
/**
 * Function called to check the stale status of dependencies (producers) for a given consumer. This
 * is a verification step before refreshing a given consumer: if none of the the dependencies
 * reports a semantically new value, then the `Consumer` has not observed a real dependency change
 * (even though it may have been notified of one).
 */
export function consumerPollValueStatus(consumer) {
    for (const [producerId, edge] of consumer.producers) {
        const producer = edge.producerRef.deref();
        if (producer === undefined || edge.atTrackingVersion !== consumer.trackingVersion) {
            // This dependency edge is stale, so remove it.
            consumer.producers.delete(producerId);
            producer?.consumers.delete(consumer.id);
            continue;
        }
        if (producerPollStatus(producer, edge.seenValueVersion)) {
            // One of the dependencies reports a real value change.
            return true;
        }
    }
    // No dependency reported a real value change, so the `Consumer` has also not been
    // impacted.
    return false;
}
//# sourceMappingURL=data:application/json;base64,